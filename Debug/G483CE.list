
G483CE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007ac4  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000010c  08007c9c  08007c9c  00017c9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007da8  08007da8  00020414  2**0
                  CONTENTS
  4 .ARM          00000008  08007da8  08007da8  00017da8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007db0  08007db0  00020414  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007db0  08007db0  00017db0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007db4  08007db4  00017db4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000414  20000000  08007db8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000041c  20000414  080081cc  00020414  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000830  080081cc  00020830  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020414  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019b40  00000000  00000000  00020444  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002bc8  00000000  00000000  00039f84  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001640  00000000  00000000  0003cb50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001538  00000000  00000000  0003e190  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00023750  00000000  00000000  0003f6c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016fc1  00000000  00000000  00062e18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f292d  00000000  00000000  00079dd9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0016c706  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006060  00000000  00000000  0016c75c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000414 	.word	0x20000414
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08007c84 	.word	0x08007c84

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000418 	.word	0x20000418
 8000214:	08007c84 	.word	0x08007c84

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295
 8000228:	f04f 30ff 	movne.w	r0, #4294967295
 800022c:	f000 b96e 	b.w	800050c <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9d08      	ldr	r5, [sp, #32]
 800024e:	4604      	mov	r4, r0
 8000250:	468c      	mov	ip, r1
 8000252:	2b00      	cmp	r3, #0
 8000254:	f040 8083 	bne.w	800035e <__udivmoddi4+0x116>
 8000258:	428a      	cmp	r2, r1
 800025a:	4617      	mov	r7, r2
 800025c:	d947      	bls.n	80002ee <__udivmoddi4+0xa6>
 800025e:	fab2 f282 	clz	r2, r2
 8000262:	b142      	cbz	r2, 8000276 <__udivmoddi4+0x2e>
 8000264:	f1c2 0020 	rsb	r0, r2, #32
 8000268:	fa24 f000 	lsr.w	r0, r4, r0
 800026c:	4091      	lsls	r1, r2
 800026e:	4097      	lsls	r7, r2
 8000270:	ea40 0c01 	orr.w	ip, r0, r1
 8000274:	4094      	lsls	r4, r2
 8000276:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800027a:	0c23      	lsrs	r3, r4, #16
 800027c:	fbbc f6f8 	udiv	r6, ip, r8
 8000280:	fa1f fe87 	uxth.w	lr, r7
 8000284:	fb08 c116 	mls	r1, r8, r6, ip
 8000288:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800028c:	fb06 f10e 	mul.w	r1, r6, lr
 8000290:	4299      	cmp	r1, r3
 8000292:	d909      	bls.n	80002a8 <__udivmoddi4+0x60>
 8000294:	18fb      	adds	r3, r7, r3
 8000296:	f106 30ff 	add.w	r0, r6, #4294967295
 800029a:	f080 8119 	bcs.w	80004d0 <__udivmoddi4+0x288>
 800029e:	4299      	cmp	r1, r3
 80002a0:	f240 8116 	bls.w	80004d0 <__udivmoddi4+0x288>
 80002a4:	3e02      	subs	r6, #2
 80002a6:	443b      	add	r3, r7
 80002a8:	1a5b      	subs	r3, r3, r1
 80002aa:	b2a4      	uxth	r4, r4
 80002ac:	fbb3 f0f8 	udiv	r0, r3, r8
 80002b0:	fb08 3310 	mls	r3, r8, r0, r3
 80002b4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002b8:	fb00 fe0e 	mul.w	lr, r0, lr
 80002bc:	45a6      	cmp	lr, r4
 80002be:	d909      	bls.n	80002d4 <__udivmoddi4+0x8c>
 80002c0:	193c      	adds	r4, r7, r4
 80002c2:	f100 33ff 	add.w	r3, r0, #4294967295
 80002c6:	f080 8105 	bcs.w	80004d4 <__udivmoddi4+0x28c>
 80002ca:	45a6      	cmp	lr, r4
 80002cc:	f240 8102 	bls.w	80004d4 <__udivmoddi4+0x28c>
 80002d0:	3802      	subs	r0, #2
 80002d2:	443c      	add	r4, r7
 80002d4:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002d8:	eba4 040e 	sub.w	r4, r4, lr
 80002dc:	2600      	movs	r6, #0
 80002de:	b11d      	cbz	r5, 80002e8 <__udivmoddi4+0xa0>
 80002e0:	40d4      	lsrs	r4, r2
 80002e2:	2300      	movs	r3, #0
 80002e4:	e9c5 4300 	strd	r4, r3, [r5]
 80002e8:	4631      	mov	r1, r6
 80002ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ee:	b902      	cbnz	r2, 80002f2 <__udivmoddi4+0xaa>
 80002f0:	deff      	udf	#255	; 0xff
 80002f2:	fab2 f282 	clz	r2, r2
 80002f6:	2a00      	cmp	r2, #0
 80002f8:	d150      	bne.n	800039c <__udivmoddi4+0x154>
 80002fa:	1bcb      	subs	r3, r1, r7
 80002fc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000300:	fa1f f887 	uxth.w	r8, r7
 8000304:	2601      	movs	r6, #1
 8000306:	fbb3 fcfe 	udiv	ip, r3, lr
 800030a:	0c21      	lsrs	r1, r4, #16
 800030c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000310:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000314:	fb08 f30c 	mul.w	r3, r8, ip
 8000318:	428b      	cmp	r3, r1
 800031a:	d907      	bls.n	800032c <__udivmoddi4+0xe4>
 800031c:	1879      	adds	r1, r7, r1
 800031e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0xe2>
 8000324:	428b      	cmp	r3, r1
 8000326:	f200 80e9 	bhi.w	80004fc <__udivmoddi4+0x2b4>
 800032a:	4684      	mov	ip, r0
 800032c:	1ac9      	subs	r1, r1, r3
 800032e:	b2a3      	uxth	r3, r4
 8000330:	fbb1 f0fe 	udiv	r0, r1, lr
 8000334:	fb0e 1110 	mls	r1, lr, r0, r1
 8000338:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 800033c:	fb08 f800 	mul.w	r8, r8, r0
 8000340:	45a0      	cmp	r8, r4
 8000342:	d907      	bls.n	8000354 <__udivmoddi4+0x10c>
 8000344:	193c      	adds	r4, r7, r4
 8000346:	f100 33ff 	add.w	r3, r0, #4294967295
 800034a:	d202      	bcs.n	8000352 <__udivmoddi4+0x10a>
 800034c:	45a0      	cmp	r8, r4
 800034e:	f200 80d9 	bhi.w	8000504 <__udivmoddi4+0x2bc>
 8000352:	4618      	mov	r0, r3
 8000354:	eba4 0408 	sub.w	r4, r4, r8
 8000358:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800035c:	e7bf      	b.n	80002de <__udivmoddi4+0x96>
 800035e:	428b      	cmp	r3, r1
 8000360:	d909      	bls.n	8000376 <__udivmoddi4+0x12e>
 8000362:	2d00      	cmp	r5, #0
 8000364:	f000 80b1 	beq.w	80004ca <__udivmoddi4+0x282>
 8000368:	2600      	movs	r6, #0
 800036a:	e9c5 0100 	strd	r0, r1, [r5]
 800036e:	4630      	mov	r0, r6
 8000370:	4631      	mov	r1, r6
 8000372:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000376:	fab3 f683 	clz	r6, r3
 800037a:	2e00      	cmp	r6, #0
 800037c:	d14a      	bne.n	8000414 <__udivmoddi4+0x1cc>
 800037e:	428b      	cmp	r3, r1
 8000380:	d302      	bcc.n	8000388 <__udivmoddi4+0x140>
 8000382:	4282      	cmp	r2, r0
 8000384:	f200 80b8 	bhi.w	80004f8 <__udivmoddi4+0x2b0>
 8000388:	1a84      	subs	r4, r0, r2
 800038a:	eb61 0103 	sbc.w	r1, r1, r3
 800038e:	2001      	movs	r0, #1
 8000390:	468c      	mov	ip, r1
 8000392:	2d00      	cmp	r5, #0
 8000394:	d0a8      	beq.n	80002e8 <__udivmoddi4+0xa0>
 8000396:	e9c5 4c00 	strd	r4, ip, [r5]
 800039a:	e7a5      	b.n	80002e8 <__udivmoddi4+0xa0>
 800039c:	f1c2 0320 	rsb	r3, r2, #32
 80003a0:	fa20 f603 	lsr.w	r6, r0, r3
 80003a4:	4097      	lsls	r7, r2
 80003a6:	fa01 f002 	lsl.w	r0, r1, r2
 80003aa:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003ae:	40d9      	lsrs	r1, r3
 80003b0:	4330      	orrs	r0, r6
 80003b2:	0c03      	lsrs	r3, r0, #16
 80003b4:	fbb1 f6fe 	udiv	r6, r1, lr
 80003b8:	fa1f f887 	uxth.w	r8, r7
 80003bc:	fb0e 1116 	mls	r1, lr, r6, r1
 80003c0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003c4:	fb06 f108 	mul.w	r1, r6, r8
 80003c8:	4299      	cmp	r1, r3
 80003ca:	fa04 f402 	lsl.w	r4, r4, r2
 80003ce:	d909      	bls.n	80003e4 <__udivmoddi4+0x19c>
 80003d0:	18fb      	adds	r3, r7, r3
 80003d2:	f106 3cff 	add.w	ip, r6, #4294967295
 80003d6:	f080 808d 	bcs.w	80004f4 <__udivmoddi4+0x2ac>
 80003da:	4299      	cmp	r1, r3
 80003dc:	f240 808a 	bls.w	80004f4 <__udivmoddi4+0x2ac>
 80003e0:	3e02      	subs	r6, #2
 80003e2:	443b      	add	r3, r7
 80003e4:	1a5b      	subs	r3, r3, r1
 80003e6:	b281      	uxth	r1, r0
 80003e8:	fbb3 f0fe 	udiv	r0, r3, lr
 80003ec:	fb0e 3310 	mls	r3, lr, r0, r3
 80003f0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003f4:	fb00 f308 	mul.w	r3, r0, r8
 80003f8:	428b      	cmp	r3, r1
 80003fa:	d907      	bls.n	800040c <__udivmoddi4+0x1c4>
 80003fc:	1879      	adds	r1, r7, r1
 80003fe:	f100 3cff 	add.w	ip, r0, #4294967295
 8000402:	d273      	bcs.n	80004ec <__udivmoddi4+0x2a4>
 8000404:	428b      	cmp	r3, r1
 8000406:	d971      	bls.n	80004ec <__udivmoddi4+0x2a4>
 8000408:	3802      	subs	r0, #2
 800040a:	4439      	add	r1, r7
 800040c:	1acb      	subs	r3, r1, r3
 800040e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000412:	e778      	b.n	8000306 <__udivmoddi4+0xbe>
 8000414:	f1c6 0c20 	rsb	ip, r6, #32
 8000418:	fa03 f406 	lsl.w	r4, r3, r6
 800041c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000420:	431c      	orrs	r4, r3
 8000422:	fa20 f70c 	lsr.w	r7, r0, ip
 8000426:	fa01 f306 	lsl.w	r3, r1, r6
 800042a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 800042e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000432:	431f      	orrs	r7, r3
 8000434:	0c3b      	lsrs	r3, r7, #16
 8000436:	fbb1 f9fe 	udiv	r9, r1, lr
 800043a:	fa1f f884 	uxth.w	r8, r4
 800043e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000442:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000446:	fb09 fa08 	mul.w	sl, r9, r8
 800044a:	458a      	cmp	sl, r1
 800044c:	fa02 f206 	lsl.w	r2, r2, r6
 8000450:	fa00 f306 	lsl.w	r3, r0, r6
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x220>
 8000456:	1861      	adds	r1, r4, r1
 8000458:	f109 30ff 	add.w	r0, r9, #4294967295
 800045c:	d248      	bcs.n	80004f0 <__udivmoddi4+0x2a8>
 800045e:	458a      	cmp	sl, r1
 8000460:	d946      	bls.n	80004f0 <__udivmoddi4+0x2a8>
 8000462:	f1a9 0902 	sub.w	r9, r9, #2
 8000466:	4421      	add	r1, r4
 8000468:	eba1 010a 	sub.w	r1, r1, sl
 800046c:	b2bf      	uxth	r7, r7
 800046e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000472:	fb0e 1110 	mls	r1, lr, r0, r1
 8000476:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800047a:	fb00 f808 	mul.w	r8, r0, r8
 800047e:	45b8      	cmp	r8, r7
 8000480:	d907      	bls.n	8000492 <__udivmoddi4+0x24a>
 8000482:	19e7      	adds	r7, r4, r7
 8000484:	f100 31ff 	add.w	r1, r0, #4294967295
 8000488:	d22e      	bcs.n	80004e8 <__udivmoddi4+0x2a0>
 800048a:	45b8      	cmp	r8, r7
 800048c:	d92c      	bls.n	80004e8 <__udivmoddi4+0x2a0>
 800048e:	3802      	subs	r0, #2
 8000490:	4427      	add	r7, r4
 8000492:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000496:	eba7 0708 	sub.w	r7, r7, r8
 800049a:	fba0 8902 	umull	r8, r9, r0, r2
 800049e:	454f      	cmp	r7, r9
 80004a0:	46c6      	mov	lr, r8
 80004a2:	4649      	mov	r1, r9
 80004a4:	d31a      	bcc.n	80004dc <__udivmoddi4+0x294>
 80004a6:	d017      	beq.n	80004d8 <__udivmoddi4+0x290>
 80004a8:	b15d      	cbz	r5, 80004c2 <__udivmoddi4+0x27a>
 80004aa:	ebb3 020e 	subs.w	r2, r3, lr
 80004ae:	eb67 0701 	sbc.w	r7, r7, r1
 80004b2:	fa07 fc0c 	lsl.w	ip, r7, ip
 80004b6:	40f2      	lsrs	r2, r6
 80004b8:	ea4c 0202 	orr.w	r2, ip, r2
 80004bc:	40f7      	lsrs	r7, r6
 80004be:	e9c5 2700 	strd	r2, r7, [r5]
 80004c2:	2600      	movs	r6, #0
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	462e      	mov	r6, r5
 80004cc:	4628      	mov	r0, r5
 80004ce:	e70b      	b.n	80002e8 <__udivmoddi4+0xa0>
 80004d0:	4606      	mov	r6, r0
 80004d2:	e6e9      	b.n	80002a8 <__udivmoddi4+0x60>
 80004d4:	4618      	mov	r0, r3
 80004d6:	e6fd      	b.n	80002d4 <__udivmoddi4+0x8c>
 80004d8:	4543      	cmp	r3, r8
 80004da:	d2e5      	bcs.n	80004a8 <__udivmoddi4+0x260>
 80004dc:	ebb8 0e02 	subs.w	lr, r8, r2
 80004e0:	eb69 0104 	sbc.w	r1, r9, r4
 80004e4:	3801      	subs	r0, #1
 80004e6:	e7df      	b.n	80004a8 <__udivmoddi4+0x260>
 80004e8:	4608      	mov	r0, r1
 80004ea:	e7d2      	b.n	8000492 <__udivmoddi4+0x24a>
 80004ec:	4660      	mov	r0, ip
 80004ee:	e78d      	b.n	800040c <__udivmoddi4+0x1c4>
 80004f0:	4681      	mov	r9, r0
 80004f2:	e7b9      	b.n	8000468 <__udivmoddi4+0x220>
 80004f4:	4666      	mov	r6, ip
 80004f6:	e775      	b.n	80003e4 <__udivmoddi4+0x19c>
 80004f8:	4630      	mov	r0, r6
 80004fa:	e74a      	b.n	8000392 <__udivmoddi4+0x14a>
 80004fc:	f1ac 0c02 	sub.w	ip, ip, #2
 8000500:	4439      	add	r1, r7
 8000502:	e713      	b.n	800032c <__udivmoddi4+0xe4>
 8000504:	3802      	subs	r0, #2
 8000506:	443c      	add	r4, r7
 8000508:	e724      	b.n	8000354 <__udivmoddi4+0x10c>
 800050a:	bf00      	nop

0800050c <__aeabi_idiv0>:
 800050c:	4770      	bx	lr
 800050e:	bf00      	nop

08000510 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000510:	b580      	push	{r7, lr}
 8000512:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000514:	f001 f959 	bl	80017ca <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000518:	f000 fa76 	bl	8000a08 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 800051c:	f000 fe0c 	bl	8001138 <MX_GPIO_Init>
	MX_DAC1_Init();
 8000520:	f000 fbf6 	bl	8000d10 <MX_DAC1_Init>
	MX_USART1_UART_Init();
 8000524:	f000 fd8a 	bl	800103c <MX_USART1_UART_Init>
	MX_ADC1_Init();
 8000528:	f000 fade 	bl	8000ae8 <MX_ADC1_Init>
	MX_ADC3_Init();
 800052c:	f000 fb78 	bl	8000c20 <MX_ADC3_Init>
	MX_TIM2_Init();
 8000530:	f000 fc28 	bl	8000d84 <MX_TIM2_Init>
	MX_TIM6_Init();
 8000534:	f000 fcc2 	bl	8000ebc <MX_TIM6_Init>
	MX_TIM7_Init();
 8000538:	f000 fcf6 	bl	8000f28 <MX_TIM7_Init>
	MX_TIM8_Init();
 800053c:	f000 fd2a 	bl	8000f94 <MX_TIM8_Init>
	MX_DMA_Init();
 8000540:	f000 fdc8 	bl	80010d4 <MX_DMA_Init>
	MX_TIM5_Init();
 8000544:	f000 fc6c 	bl	8000e20 <MX_TIM5_Init>

	// Calibrate ADCs
	HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 8000548:	217f      	movs	r1, #127	; 0x7f
 800054a:	4849      	ldr	r0, [pc, #292]	; (8000670 <main+0x160>)
 800054c:	f002 ff30 	bl	80033b0 <HAL_ADCEx_Calibration_Start>
	HAL_ADCEx_Calibration_Start(&hadc3, ADC_SINGLE_ENDED);
 8000550:	217f      	movs	r1, #127	; 0x7f
 8000552:	4848      	ldr	r0, [pc, #288]	; (8000674 <main+0x164>)
 8000554:	f002 ff2c 	bl	80033b0 <HAL_ADCEx_Calibration_Start>

	// Enable ADC with DMA transfer for AD_wave_sel
	HAL_ADC_Start_DMA(&hadc3, (uint32_t*)&AD_wave_sel, 1);
 8000558:	2201      	movs	r2, #1
 800055a:	4947      	ldr	r1, [pc, #284]	; (8000678 <main+0x168>)
 800055c:	4845      	ldr	r0, [pc, #276]	; (8000674 <main+0x164>)
 800055e:	f001 fdef 	bl	8002140 <HAL_ADC_Start_DMA>
	// Enable ADC with DMA transfer for AD_ADSR
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)&AD_ADSR, 4);
 8000562:	2204      	movs	r2, #4
 8000564:	4945      	ldr	r1, [pc, #276]	; (800067c <main+0x16c>)
 8000566:	4842      	ldr	r0, [pc, #264]	; (8000670 <main+0x160>)
 8000568:	f001 fdea 	bl	8002140 <HAL_ADC_Start_DMA>

	// Enable DAC
	HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 800056c:	2100      	movs	r1, #0
 800056e:	4844      	ldr	r0, [pc, #272]	; (8000680 <main+0x170>)
 8000570:	f003 f9eb 	bl	800394a <HAL_DAC_Start>

	// Start timers
	HAL_TIM_Base_Start_IT(&htim2);
 8000574:	4843      	ldr	r0, [pc, #268]	; (8000684 <main+0x174>)
 8000576:	f005 f9d1 	bl	800591c <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim6);
 800057a:	4843      	ldr	r0, [pc, #268]	; (8000688 <main+0x178>)
 800057c:	f005 f9ce 	bl	800591c <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim7);
 8000580:	4842      	ldr	r0, [pc, #264]	; (800068c <main+0x17c>)
 8000582:	f005 f9cb 	bl	800591c <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim8);
 8000586:	4842      	ldr	r0, [pc, #264]	; (8000690 <main+0x180>)
 8000588:	f005 f9c8 	bl	800591c <HAL_TIM_Base_Start_IT>

	// Initialize each voice gate to OFF
 	voices[0].gate = OFF;
 800058c:	4b41      	ldr	r3, [pc, #260]	; (8000694 <main+0x184>)
 800058e:	2200      	movs	r2, #0
 8000590:	701a      	strb	r2, [r3, #0]
 	voices[1].gate = OFF;
 8000592:	4b40      	ldr	r3, [pc, #256]	; (8000694 <main+0x184>)
 8000594:	2200      	movs	r2, #0
 8000596:	719a      	strb	r2, [r3, #6]
 	voices[2].gate = OFF;
 8000598:	4b3e      	ldr	r3, [pc, #248]	; (8000694 <main+0x184>)
 800059a:	2200      	movs	r2, #0
 800059c:	731a      	strb	r2, [r3, #12]

 	// Initialize each voice index to start at beginning of lookup table
 	voices[0].index = 0;
 800059e:	4b3d      	ldr	r3, [pc, #244]	; (8000694 <main+0x184>)
 80005a0:	2200      	movs	r2, #0
 80005a2:	711a      	strb	r2, [r3, #4]
 	voices[1].index = 0;
 80005a4:	4b3b      	ldr	r3, [pc, #236]	; (8000694 <main+0x184>)
 80005a6:	2200      	movs	r2, #0
 80005a8:	729a      	strb	r2, [r3, #10]
 	voices[2].index = 0;
 80005aa:	4b3a      	ldr	r3, [pc, #232]	; (8000694 <main+0x184>)
 80005ac:	2200      	movs	r2, #0
 80005ae:	741a      	strb	r2, [r3, #16]



 	notes_on = 0;
 80005b0:	4b39      	ldr	r3, [pc, #228]	; (8000698 <main+0x188>)
 80005b2:	2200      	movs	r2, #0
 80005b4:	701a      	strb	r2, [r3, #0]
 	// __HAL_TIM_SET_AUTORELOAD
 	TIM6->ARR = ARR_VAL(C4);
 80005b6:	4b39      	ldr	r3, [pc, #228]	; (800069c <main+0x18c>)
 80005b8:	f241 32cc 	movw	r2, #5068	; 0x13cc
 80005bc:	62da      	str	r2, [r3, #44]	; 0x2c
 	TIM7->ARR = ARR_VAL(E4);
 80005be:	4b38      	ldr	r3, [pc, #224]	; (80006a0 <main+0x190>)
 80005c0:	f640 72b7 	movw	r2, #4023	; 0xfb7
 80005c4:	62da      	str	r2, [r3, #44]	; 0x2c
 	TIM8->ARR = ARR_VAL(G4);
 80005c6:	4b37      	ldr	r3, [pc, #220]	; (80006a4 <main+0x194>)
 80005c8:	f640 523b 	movw	r2, #3387	; 0xd3b
 80005cc:	62da      	str	r2, [r3, #44]	; 0x2c
 	lut = sin_lut;
 80005ce:	4b36      	ldr	r3, [pc, #216]	; (80006a8 <main+0x198>)
 80005d0:	4a36      	ldr	r2, [pc, #216]	; (80006ac <main+0x19c>)
 80005d2:	601a      	str	r2, [r3, #0]
 	while (1) {

	   //AD_wave_sel = HAL_ADC_GetValue(&hadc3);

   		//TODO put in function
     	HAL_UART_Receive_IT(&huart1, midi_tmp, 3);
 80005d4:	2203      	movs	r2, #3
 80005d6:	4936      	ldr	r1, [pc, #216]	; (80006b0 <main+0x1a0>)
 80005d8:	4836      	ldr	r0, [pc, #216]	; (80006b4 <main+0x1a4>)
 80005da:	f005 ff37 	bl	800644c <HAL_UART_Receive_IT>
     	if (GLOBAL_MIDI_NOTE_ON) {
 80005de:	4b36      	ldr	r3, [pc, #216]	; (80006b8 <main+0x1a8>)
 80005e0:	781b      	ldrb	r3, [r3, #0]
 80005e2:	2b90      	cmp	r3, #144	; 0x90
 80005e4:	d106      	bne.n	80005f4 <main+0xe4>
     		MIDI_IN_LED_ON;
 80005e6:	2201      	movs	r2, #1
 80005e8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80005ec:	4833      	ldr	r0, [pc, #204]	; (80006bc <main+0x1ac>)
 80005ee:	f004 f8f1 	bl	80047d4 <HAL_GPIO_WritePin>
 80005f2:	e009      	b.n	8000608 <main+0xf8>
     	}
     	else if (GLOBAL_MIDI_NOTE_OFF) {
 80005f4:	4b30      	ldr	r3, [pc, #192]	; (80006b8 <main+0x1a8>)
 80005f6:	781b      	ldrb	r3, [r3, #0]
 80005f8:	2b80      	cmp	r3, #128	; 0x80
 80005fa:	d105      	bne.n	8000608 <main+0xf8>
     		MIDI_IN_LED_OFF;
 80005fc:	2200      	movs	r2, #0
 80005fe:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000602:	482e      	ldr	r0, [pc, #184]	; (80006bc <main+0x1ac>)
 8000604:	f004 f8e6 	bl	80047d4 <HAL_GPIO_WritePin>
     	}


     	if (AD_wave_sel >= 0 && AD_wave_sel < 1024) {
 8000608:	4b1b      	ldr	r3, [pc, #108]	; (8000678 <main+0x168>)
 800060a:	881b      	ldrh	r3, [r3, #0]
 800060c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000610:	d203      	bcs.n	800061a <main+0x10a>
     		lut = sin_lut;
 8000612:	4b25      	ldr	r3, [pc, #148]	; (80006a8 <main+0x198>)
 8000614:	4a25      	ldr	r2, [pc, #148]	; (80006ac <main+0x19c>)
 8000616:	601a      	str	r2, [r3, #0]
 8000618:	e7dc      	b.n	80005d4 <main+0xc4>
     	}
     	else if (AD_wave_sel >= 1024 && AD_wave_sel < 2048) {
 800061a:	4b17      	ldr	r3, [pc, #92]	; (8000678 <main+0x168>)
 800061c:	881b      	ldrh	r3, [r3, #0]
 800061e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000622:	d308      	bcc.n	8000636 <main+0x126>
 8000624:	4b14      	ldr	r3, [pc, #80]	; (8000678 <main+0x168>)
 8000626:	881b      	ldrh	r3, [r3, #0]
 8000628:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800062c:	d203      	bcs.n	8000636 <main+0x126>
 	  		lut = tri_lut;
 800062e:	4b1e      	ldr	r3, [pc, #120]	; (80006a8 <main+0x198>)
 8000630:	4a23      	ldr	r2, [pc, #140]	; (80006c0 <main+0x1b0>)
 8000632:	601a      	str	r2, [r3, #0]
 8000634:	e01a      	b.n	800066c <main+0x15c>
     	}
     	else if (AD_wave_sel >= 2048 && AD_wave_sel < 3072) {
 8000636:	4b10      	ldr	r3, [pc, #64]	; (8000678 <main+0x168>)
 8000638:	881b      	ldrh	r3, [r3, #0]
 800063a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800063e:	d308      	bcc.n	8000652 <main+0x142>
 8000640:	4b0d      	ldr	r3, [pc, #52]	; (8000678 <main+0x168>)
 8000642:	881b      	ldrh	r3, [r3, #0]
 8000644:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8000648:	d203      	bcs.n	8000652 <main+0x142>
 	  		lut = saw_lut;
 800064a:	4b17      	ldr	r3, [pc, #92]	; (80006a8 <main+0x198>)
 800064c:	4a1d      	ldr	r2, [pc, #116]	; (80006c4 <main+0x1b4>)
 800064e:	601a      	str	r2, [r3, #0]
 8000650:	e00c      	b.n	800066c <main+0x15c>
     	}
     	else if (AD_wave_sel >= 3072 && AD_wave_sel < 4096) {
 8000652:	4b09      	ldr	r3, [pc, #36]	; (8000678 <main+0x168>)
 8000654:	881b      	ldrh	r3, [r3, #0]
 8000656:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800065a:	d3bb      	bcc.n	80005d4 <main+0xc4>
 800065c:	4b06      	ldr	r3, [pc, #24]	; (8000678 <main+0x168>)
 800065e:	881b      	ldrh	r3, [r3, #0]
 8000660:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000664:	d2b6      	bcs.n	80005d4 <main+0xc4>
 	  		lut = sqr_lut;
 8000666:	4b10      	ldr	r3, [pc, #64]	; (80006a8 <main+0x198>)
 8000668:	4a17      	ldr	r2, [pc, #92]	; (80006c8 <main+0x1b8>)
 800066a:	601a      	str	r2, [r3, #0]
     	HAL_UART_Receive_IT(&huart1, midi_tmp, 3);
 800066c:	e7b2      	b.n	80005d4 <main+0xc4>
 800066e:	bf00      	nop
 8000670:	2000054c 	.word	0x2000054c
 8000674:	200005b8 	.word	0x200005b8
 8000678:	20000432 	.word	0x20000432
 800067c:	20000434 	.word	0x20000434
 8000680:	20000488 	.word	0x20000488
 8000684:	20000778 	.word	0x20000778
 8000688:	2000072c 	.word	0x2000072c
 800068c:	200007dc 	.word	0x200007dc
 8000690:	2000043c 	.word	0x2000043c
 8000694:	20000718 	.word	0x20000718
 8000698:	20000430 	.word	0x20000430
 800069c:	40001000 	.word	0x40001000
 80006a0:	40001400 	.word	0x40001400
 80006a4:	40013400 	.word	0x40013400
 80006a8:	20000404 	.word	0x20000404
 80006ac:	20000004 	.word	0x20000004
 80006b0:	20000828 	.word	0x20000828
 80006b4:	20000624 	.word	0x20000624
 80006b8:	20000548 	.word	0x20000548
 80006bc:	48000400 	.word	0x48000400
 80006c0:	20000104 	.word	0x20000104
 80006c4:	20000304 	.word	0x20000304
 80006c8:	20000204 	.word	0x20000204

080006cc <HAL_TIM_PeriodElapsedCallback>:
 	AD_wave_sel = HAL_ADC_GetValue(&hadc3);
 }
*/
 // When timer triggers, put corresponding signal on DAC
 void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
 {
 80006cc:	b5b0      	push	{r4, r5, r7, lr}
 80006ce:	b082      	sub	sp, #8
 80006d0:	af00      	add	r7, sp, #0
 80006d2:	6078      	str	r0, [r7, #4]
 		sample = VOICE2;
 		RESET_INDEX(2);
 	}
*/

 	if (htim == &htim6) {
 80006d4:	687b      	ldr	r3, [r7, #4]
 80006d6:	4a6f      	ldr	r2, [pc, #444]	; (8000894 <HAL_TIM_PeriodElapsedCallback+0x1c8>)
 80006d8:	4293      	cmp	r3, r2
 80006da:	d145      	bne.n	8000768 <HAL_TIM_PeriodElapsedCallback+0x9c>
 		PUT_TO_DAC(VOICE0);
 80006dc:	4b6e      	ldr	r3, [pc, #440]	; (8000898 <HAL_TIM_PeriodElapsedCallback+0x1cc>)
 80006de:	781b      	ldrb	r3, [r3, #0]
 80006e0:	4618      	mov	r0, r3
 80006e2:	4b6e      	ldr	r3, [pc, #440]	; (800089c <HAL_TIM_PeriodElapsedCallback+0x1d0>)
 80006e4:	681a      	ldr	r2, [r3, #0]
 80006e6:	4b6c      	ldr	r3, [pc, #432]	; (8000898 <HAL_TIM_PeriodElapsedCallback+0x1cc>)
 80006e8:	791b      	ldrb	r3, [r3, #4]
 80006ea:	1c59      	adds	r1, r3, #1
 80006ec:	b2cc      	uxtb	r4, r1
 80006ee:	496a      	ldr	r1, [pc, #424]	; (8000898 <HAL_TIM_PeriodElapsedCallback+0x1cc>)
 80006f0:	710c      	strb	r4, [r1, #4]
 80006f2:	005b      	lsls	r3, r3, #1
 80006f4:	4413      	add	r3, r2
 80006f6:	881b      	ldrh	r3, [r3, #0]
 80006f8:	fb03 f200 	mul.w	r2, r3, r0
 80006fc:	4b66      	ldr	r3, [pc, #408]	; (8000898 <HAL_TIM_PeriodElapsedCallback+0x1cc>)
 80006fe:	799b      	ldrb	r3, [r3, #6]
 8000700:	4618      	mov	r0, r3
 8000702:	4b66      	ldr	r3, [pc, #408]	; (800089c <HAL_TIM_PeriodElapsedCallback+0x1d0>)
 8000704:	6819      	ldr	r1, [r3, #0]
 8000706:	4b64      	ldr	r3, [pc, #400]	; (8000898 <HAL_TIM_PeriodElapsedCallback+0x1cc>)
 8000708:	7a9b      	ldrb	r3, [r3, #10]
 800070a:	005b      	lsls	r3, r3, #1
 800070c:	440b      	add	r3, r1
 800070e:	881b      	ldrh	r3, [r3, #0]
 8000710:	fb03 f300 	mul.w	r3, r3, r0
 8000714:	441a      	add	r2, r3
 8000716:	4b60      	ldr	r3, [pc, #384]	; (8000898 <HAL_TIM_PeriodElapsedCallback+0x1cc>)
 8000718:	7b1b      	ldrb	r3, [r3, #12]
 800071a:	4618      	mov	r0, r3
 800071c:	4b5f      	ldr	r3, [pc, #380]	; (800089c <HAL_TIM_PeriodElapsedCallback+0x1d0>)
 800071e:	6819      	ldr	r1, [r3, #0]
 8000720:	4b5d      	ldr	r3, [pc, #372]	; (8000898 <HAL_TIM_PeriodElapsedCallback+0x1cc>)
 8000722:	7c1b      	ldrb	r3, [r3, #16]
 8000724:	005b      	lsls	r3, r3, #1
 8000726:	440b      	add	r3, r1
 8000728:	881b      	ldrh	r3, [r3, #0]
 800072a:	fb03 f300 	mul.w	r3, r3, r0
 800072e:	4413      	add	r3, r2
 8000730:	ee07 3a90 	vmov	s15, r3
 8000734:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000738:	4b59      	ldr	r3, [pc, #356]	; (80008a0 <HAL_TIM_PeriodElapsedCallback+0x1d4>)
 800073a:	edd3 7a00 	vldr	s15, [r3]
 800073e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000742:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000746:	ee17 3a90 	vmov	r3, s15
 800074a:	b29b      	uxth	r3, r3
 800074c:	2200      	movs	r2, #0
 800074e:	2100      	movs	r1, #0
 8000750:	4854      	ldr	r0, [pc, #336]	; (80008a4 <HAL_TIM_PeriodElapsedCallback+0x1d8>)
 8000752:	f003 f9a7 	bl	8003aa4 <HAL_DAC_SetValue>
 		RESET_INDEX(0);
 8000756:	4b50      	ldr	r3, [pc, #320]	; (8000898 <HAL_TIM_PeriodElapsedCallback+0x1cc>)
 8000758:	791b      	ldrb	r3, [r3, #4]
 800075a:	2b80      	cmp	r3, #128	; 0x80
 800075c:	f040 8095 	bne.w	800088a <HAL_TIM_PeriodElapsedCallback+0x1be>
 8000760:	4b4d      	ldr	r3, [pc, #308]	; (8000898 <HAL_TIM_PeriodElapsedCallback+0x1cc>)
 8000762:	2200      	movs	r2, #0
 8000764:	711a      	strb	r2, [r3, #4]
 		RESET_INDEX(2);
 	}



 }
 8000766:	e090      	b.n	800088a <HAL_TIM_PeriodElapsedCallback+0x1be>
 	else if (htim == &htim7) {
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	4a4f      	ldr	r2, [pc, #316]	; (80008a8 <HAL_TIM_PeriodElapsedCallback+0x1dc>)
 800076c:	4293      	cmp	r3, r2
 800076e:	d144      	bne.n	80007fa <HAL_TIM_PeriodElapsedCallback+0x12e>
 		PUT_TO_DAC(VOICE1);
 8000770:	4b49      	ldr	r3, [pc, #292]	; (8000898 <HAL_TIM_PeriodElapsedCallback+0x1cc>)
 8000772:	781b      	ldrb	r3, [r3, #0]
 8000774:	4619      	mov	r1, r3
 8000776:	4b49      	ldr	r3, [pc, #292]	; (800089c <HAL_TIM_PeriodElapsedCallback+0x1d0>)
 8000778:	681a      	ldr	r2, [r3, #0]
 800077a:	4b47      	ldr	r3, [pc, #284]	; (8000898 <HAL_TIM_PeriodElapsedCallback+0x1cc>)
 800077c:	791b      	ldrb	r3, [r3, #4]
 800077e:	005b      	lsls	r3, r3, #1
 8000780:	4413      	add	r3, r2
 8000782:	881b      	ldrh	r3, [r3, #0]
 8000784:	fb03 f201 	mul.w	r2, r3, r1
 8000788:	4b43      	ldr	r3, [pc, #268]	; (8000898 <HAL_TIM_PeriodElapsedCallback+0x1cc>)
 800078a:	799b      	ldrb	r3, [r3, #6]
 800078c:	461c      	mov	r4, r3
 800078e:	4b43      	ldr	r3, [pc, #268]	; (800089c <HAL_TIM_PeriodElapsedCallback+0x1d0>)
 8000790:	6819      	ldr	r1, [r3, #0]
 8000792:	4b41      	ldr	r3, [pc, #260]	; (8000898 <HAL_TIM_PeriodElapsedCallback+0x1cc>)
 8000794:	7a9b      	ldrb	r3, [r3, #10]
 8000796:	1c58      	adds	r0, r3, #1
 8000798:	b2c5      	uxtb	r5, r0
 800079a:	483f      	ldr	r0, [pc, #252]	; (8000898 <HAL_TIM_PeriodElapsedCallback+0x1cc>)
 800079c:	7285      	strb	r5, [r0, #10]
 800079e:	005b      	lsls	r3, r3, #1
 80007a0:	440b      	add	r3, r1
 80007a2:	881b      	ldrh	r3, [r3, #0]
 80007a4:	fb03 f304 	mul.w	r3, r3, r4
 80007a8:	441a      	add	r2, r3
 80007aa:	4b3b      	ldr	r3, [pc, #236]	; (8000898 <HAL_TIM_PeriodElapsedCallback+0x1cc>)
 80007ac:	7b1b      	ldrb	r3, [r3, #12]
 80007ae:	4618      	mov	r0, r3
 80007b0:	4b3a      	ldr	r3, [pc, #232]	; (800089c <HAL_TIM_PeriodElapsedCallback+0x1d0>)
 80007b2:	6819      	ldr	r1, [r3, #0]
 80007b4:	4b38      	ldr	r3, [pc, #224]	; (8000898 <HAL_TIM_PeriodElapsedCallback+0x1cc>)
 80007b6:	7c1b      	ldrb	r3, [r3, #16]
 80007b8:	005b      	lsls	r3, r3, #1
 80007ba:	440b      	add	r3, r1
 80007bc:	881b      	ldrh	r3, [r3, #0]
 80007be:	fb03 f300 	mul.w	r3, r3, r0
 80007c2:	4413      	add	r3, r2
 80007c4:	ee07 3a90 	vmov	s15, r3
 80007c8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80007cc:	4b34      	ldr	r3, [pc, #208]	; (80008a0 <HAL_TIM_PeriodElapsedCallback+0x1d4>)
 80007ce:	edd3 7a00 	vldr	s15, [r3]
 80007d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80007d6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80007da:	ee17 3a90 	vmov	r3, s15
 80007de:	b29b      	uxth	r3, r3
 80007e0:	2200      	movs	r2, #0
 80007e2:	2100      	movs	r1, #0
 80007e4:	482f      	ldr	r0, [pc, #188]	; (80008a4 <HAL_TIM_PeriodElapsedCallback+0x1d8>)
 80007e6:	f003 f95d 	bl	8003aa4 <HAL_DAC_SetValue>
 		RESET_INDEX(1);
 80007ea:	4b2b      	ldr	r3, [pc, #172]	; (8000898 <HAL_TIM_PeriodElapsedCallback+0x1cc>)
 80007ec:	7a9b      	ldrb	r3, [r3, #10]
 80007ee:	2b80      	cmp	r3, #128	; 0x80
 80007f0:	d14b      	bne.n	800088a <HAL_TIM_PeriodElapsedCallback+0x1be>
 80007f2:	4b29      	ldr	r3, [pc, #164]	; (8000898 <HAL_TIM_PeriodElapsedCallback+0x1cc>)
 80007f4:	2200      	movs	r2, #0
 80007f6:	729a      	strb	r2, [r3, #10]
 }
 80007f8:	e047      	b.n	800088a <HAL_TIM_PeriodElapsedCallback+0x1be>
 	else if (htim == &htim8) {
 80007fa:	687b      	ldr	r3, [r7, #4]
 80007fc:	4a2b      	ldr	r2, [pc, #172]	; (80008ac <HAL_TIM_PeriodElapsedCallback+0x1e0>)
 80007fe:	4293      	cmp	r3, r2
 8000800:	d143      	bne.n	800088a <HAL_TIM_PeriodElapsedCallback+0x1be>
 		PUT_TO_DAC(VOICE2);
 8000802:	4b25      	ldr	r3, [pc, #148]	; (8000898 <HAL_TIM_PeriodElapsedCallback+0x1cc>)
 8000804:	781b      	ldrb	r3, [r3, #0]
 8000806:	4619      	mov	r1, r3
 8000808:	4b24      	ldr	r3, [pc, #144]	; (800089c <HAL_TIM_PeriodElapsedCallback+0x1d0>)
 800080a:	681a      	ldr	r2, [r3, #0]
 800080c:	4b22      	ldr	r3, [pc, #136]	; (8000898 <HAL_TIM_PeriodElapsedCallback+0x1cc>)
 800080e:	791b      	ldrb	r3, [r3, #4]
 8000810:	005b      	lsls	r3, r3, #1
 8000812:	4413      	add	r3, r2
 8000814:	881b      	ldrh	r3, [r3, #0]
 8000816:	fb03 f201 	mul.w	r2, r3, r1
 800081a:	4b1f      	ldr	r3, [pc, #124]	; (8000898 <HAL_TIM_PeriodElapsedCallback+0x1cc>)
 800081c:	799b      	ldrb	r3, [r3, #6]
 800081e:	4618      	mov	r0, r3
 8000820:	4b1e      	ldr	r3, [pc, #120]	; (800089c <HAL_TIM_PeriodElapsedCallback+0x1d0>)
 8000822:	6819      	ldr	r1, [r3, #0]
 8000824:	4b1c      	ldr	r3, [pc, #112]	; (8000898 <HAL_TIM_PeriodElapsedCallback+0x1cc>)
 8000826:	7a9b      	ldrb	r3, [r3, #10]
 8000828:	005b      	lsls	r3, r3, #1
 800082a:	440b      	add	r3, r1
 800082c:	881b      	ldrh	r3, [r3, #0]
 800082e:	fb03 f300 	mul.w	r3, r3, r0
 8000832:	441a      	add	r2, r3
 8000834:	4b18      	ldr	r3, [pc, #96]	; (8000898 <HAL_TIM_PeriodElapsedCallback+0x1cc>)
 8000836:	7b1b      	ldrb	r3, [r3, #12]
 8000838:	461c      	mov	r4, r3
 800083a:	4b18      	ldr	r3, [pc, #96]	; (800089c <HAL_TIM_PeriodElapsedCallback+0x1d0>)
 800083c:	6819      	ldr	r1, [r3, #0]
 800083e:	4b16      	ldr	r3, [pc, #88]	; (8000898 <HAL_TIM_PeriodElapsedCallback+0x1cc>)
 8000840:	7c1b      	ldrb	r3, [r3, #16]
 8000842:	1c58      	adds	r0, r3, #1
 8000844:	b2c5      	uxtb	r5, r0
 8000846:	4814      	ldr	r0, [pc, #80]	; (8000898 <HAL_TIM_PeriodElapsedCallback+0x1cc>)
 8000848:	7405      	strb	r5, [r0, #16]
 800084a:	005b      	lsls	r3, r3, #1
 800084c:	440b      	add	r3, r1
 800084e:	881b      	ldrh	r3, [r3, #0]
 8000850:	fb03 f304 	mul.w	r3, r3, r4
 8000854:	4413      	add	r3, r2
 8000856:	ee07 3a90 	vmov	s15, r3
 800085a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800085e:	4b10      	ldr	r3, [pc, #64]	; (80008a0 <HAL_TIM_PeriodElapsedCallback+0x1d4>)
 8000860:	edd3 7a00 	vldr	s15, [r3]
 8000864:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000868:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800086c:	ee17 3a90 	vmov	r3, s15
 8000870:	b29b      	uxth	r3, r3
 8000872:	2200      	movs	r2, #0
 8000874:	2100      	movs	r1, #0
 8000876:	480b      	ldr	r0, [pc, #44]	; (80008a4 <HAL_TIM_PeriodElapsedCallback+0x1d8>)
 8000878:	f003 f914 	bl	8003aa4 <HAL_DAC_SetValue>
 		RESET_INDEX(2);
 800087c:	4b06      	ldr	r3, [pc, #24]	; (8000898 <HAL_TIM_PeriodElapsedCallback+0x1cc>)
 800087e:	7c1b      	ldrb	r3, [r3, #16]
 8000880:	2b80      	cmp	r3, #128	; 0x80
 8000882:	d102      	bne.n	800088a <HAL_TIM_PeriodElapsedCallback+0x1be>
 8000884:	4b04      	ldr	r3, [pc, #16]	; (8000898 <HAL_TIM_PeriodElapsedCallback+0x1cc>)
 8000886:	2200      	movs	r2, #0
 8000888:	741a      	strb	r2, [r3, #16]
 }
 800088a:	bf00      	nop
 800088c:	3708      	adds	r7, #8
 800088e:	46bd      	mov	sp, r7
 8000890:	bdb0      	pop	{r4, r5, r7, pc}
 8000892:	bf00      	nop
 8000894:	2000072c 	.word	0x2000072c
 8000898:	20000718 	.word	0x20000718
 800089c:	20000404 	.word	0x20000404
 80008a0:	20000000 	.word	0x20000000
 80008a4:	20000488 	.word	0x20000488
 80008a8:	200007dc 	.word	0x200007dc
 80008ac:	2000043c 	.word	0x2000043c

080008b0 <HAL_UART_RxCpltCallback>:

 // When UART message recieved, only valid if starts with 0x80 or 0x90
 void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
 {
 80008b0:	b480      	push	{r7}
 80008b2:	b085      	sub	sp, #20
 80008b4:	af00      	add	r7, sp, #0
 80008b6:	6078      	str	r0, [r7, #4]

 	if (midi_tmp[0] == 0x90) {
 80008b8:	4b48      	ldr	r3, [pc, #288]	; (80009dc <HAL_UART_RxCpltCallback+0x12c>)
 80008ba:	781b      	ldrb	r3, [r3, #0]
 80008bc:	2b90      	cmp	r3, #144	; 0x90
 80008be:	d120      	bne.n	8000902 <HAL_UART_RxCpltCallback+0x52>
 		uint8_t i;
 		for (i = 0; i < 3; i++) {
 80008c0:	2300      	movs	r3, #0
 80008c2:	73fb      	strb	r3, [r7, #15]
 80008c4:	e008      	b.n	80008d8 <HAL_UART_RxCpltCallback+0x28>
 			midi_msg[i] = midi_tmp[i];
 80008c6:	7bfa      	ldrb	r2, [r7, #15]
 80008c8:	7bfb      	ldrb	r3, [r7, #15]
 80008ca:	4944      	ldr	r1, [pc, #272]	; (80009dc <HAL_UART_RxCpltCallback+0x12c>)
 80008cc:	5c89      	ldrb	r1, [r1, r2]
 80008ce:	4a44      	ldr	r2, [pc, #272]	; (80009e0 <HAL_UART_RxCpltCallback+0x130>)
 80008d0:	54d1      	strb	r1, [r2, r3]
 		for (i = 0; i < 3; i++) {
 80008d2:	7bfb      	ldrb	r3, [r7, #15]
 80008d4:	3301      	adds	r3, #1
 80008d6:	73fb      	strb	r3, [r7, #15]
 80008d8:	7bfb      	ldrb	r3, [r7, #15]
 80008da:	2b02      	cmp	r3, #2
 80008dc:	d9f3      	bls.n	80008c6 <HAL_UART_RxCpltCallback+0x16>
 		}

 		voices[notes_on].gate = ON;
 80008de:	4b41      	ldr	r3, [pc, #260]	; (80009e4 <HAL_UART_RxCpltCallback+0x134>)
 80008e0:	781b      	ldrb	r3, [r3, #0]
 80008e2:	4619      	mov	r1, r3
 80008e4:	4a40      	ldr	r2, [pc, #256]	; (80009e8 <HAL_UART_RxCpltCallback+0x138>)
 80008e6:	460b      	mov	r3, r1
 80008e8:	005b      	lsls	r3, r3, #1
 80008ea:	440b      	add	r3, r1
 80008ec:	005b      	lsls	r3, r3, #1
 80008ee:	4413      	add	r3, r2
 80008f0:	2201      	movs	r2, #1
 80008f2:	701a      	strb	r2, [r3, #0]
 		notes_on++;
 80008f4:	4b3b      	ldr	r3, [pc, #236]	; (80009e4 <HAL_UART_RxCpltCallback+0x134>)
 80008f6:	781b      	ldrb	r3, [r3, #0]
 80008f8:	3301      	adds	r3, #1
 80008fa:	b2da      	uxtb	r2, r3
 80008fc:	4b39      	ldr	r3, [pc, #228]	; (80009e4 <HAL_UART_RxCpltCallback+0x134>)
 80008fe:	701a      	strb	r2, [r3, #0]
 8000900:	e023      	b.n	800094a <HAL_UART_RxCpltCallback+0x9a>


 	}

 	else if (midi_tmp[0] == 0x80) {
 8000902:	4b36      	ldr	r3, [pc, #216]	; (80009dc <HAL_UART_RxCpltCallback+0x12c>)
 8000904:	781b      	ldrb	r3, [r3, #0]
 8000906:	2b80      	cmp	r3, #128	; 0x80
 8000908:	d11f      	bne.n	800094a <HAL_UART_RxCpltCallback+0x9a>
 		uint8_t i;
 		for (i = 0; i < 3; i++) {
 800090a:	2300      	movs	r3, #0
 800090c:	73bb      	strb	r3, [r7, #14]
 800090e:	e008      	b.n	8000922 <HAL_UART_RxCpltCallback+0x72>
 			midi_msg[i] = midi_tmp[i];
 8000910:	7bba      	ldrb	r2, [r7, #14]
 8000912:	7bbb      	ldrb	r3, [r7, #14]
 8000914:	4931      	ldr	r1, [pc, #196]	; (80009dc <HAL_UART_RxCpltCallback+0x12c>)
 8000916:	5c89      	ldrb	r1, [r1, r2]
 8000918:	4a31      	ldr	r2, [pc, #196]	; (80009e0 <HAL_UART_RxCpltCallback+0x130>)
 800091a:	54d1      	strb	r1, [r2, r3]
 		for (i = 0; i < 3; i++) {
 800091c:	7bbb      	ldrb	r3, [r7, #14]
 800091e:	3301      	adds	r3, #1
 8000920:	73bb      	strb	r3, [r7, #14]
 8000922:	7bbb      	ldrb	r3, [r7, #14]
 8000924:	2b02      	cmp	r3, #2
 8000926:	d9f3      	bls.n	8000910 <HAL_UART_RxCpltCallback+0x60>
 		}

 		notes_on--;
 8000928:	4b2e      	ldr	r3, [pc, #184]	; (80009e4 <HAL_UART_RxCpltCallback+0x134>)
 800092a:	781b      	ldrb	r3, [r3, #0]
 800092c:	3b01      	subs	r3, #1
 800092e:	b2da      	uxtb	r2, r3
 8000930:	4b2c      	ldr	r3, [pc, #176]	; (80009e4 <HAL_UART_RxCpltCallback+0x134>)
 8000932:	701a      	strb	r2, [r3, #0]
 		voices[notes_on].gate = OFF;
 8000934:	4b2b      	ldr	r3, [pc, #172]	; (80009e4 <HAL_UART_RxCpltCallback+0x134>)
 8000936:	781b      	ldrb	r3, [r3, #0]
 8000938:	4619      	mov	r1, r3
 800093a:	4a2b      	ldr	r2, [pc, #172]	; (80009e8 <HAL_UART_RxCpltCallback+0x138>)
 800093c:	460b      	mov	r3, r1
 800093e:	005b      	lsls	r3, r3, #1
 8000940:	440b      	add	r3, r1
 8000942:	005b      	lsls	r3, r3, #1
 8000944:	4413      	add	r3, r2
 8000946:	2200      	movs	r2, #0
 8000948:	701a      	strb	r2, [r3, #0]

 	}

 	switch (notes_on) {
 800094a:	4b26      	ldr	r3, [pc, #152]	; (80009e4 <HAL_UART_RxCpltCallback+0x134>)
 800094c:	781b      	ldrb	r3, [r3, #0]
 800094e:	2b03      	cmp	r3, #3
 8000950:	d02b      	beq.n	80009aa <HAL_UART_RxCpltCallback+0xfa>
 8000952:	2b03      	cmp	r3, #3
 8000954:	dc3c      	bgt.n	80009d0 <HAL_UART_RxCpltCallback+0x120>
 8000956:	2b01      	cmp	r3, #1
 8000958:	d002      	beq.n	8000960 <HAL_UART_RxCpltCallback+0xb0>
 800095a:	2b02      	cmp	r3, #2
 800095c:	d012      	beq.n	8000984 <HAL_UART_RxCpltCallback+0xd4>
 	case 3:
 		TIM8->ARR = ARR_VAL(NOTE);
 		multiplier = 1;
 		break;
 	}
 }
 800095e:	e037      	b.n	80009d0 <HAL_UART_RxCpltCallback+0x120>
 		TIM6->ARR = ARR_VAL(NOTE);
 8000960:	4b1f      	ldr	r3, [pc, #124]	; (80009e0 <HAL_UART_RxCpltCallback+0x130>)
 8000962:	785b      	ldrb	r3, [r3, #1]
 8000964:	3301      	adds	r3, #1
 8000966:	4a21      	ldr	r2, [pc, #132]	; (80009ec <HAL_UART_RxCpltCallback+0x13c>)
 8000968:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800096c:	01db      	lsls	r3, r3, #7
 800096e:	461a      	mov	r2, r3
 8000970:	4b1f      	ldr	r3, [pc, #124]	; (80009f0 <HAL_UART_RxCpltCallback+0x140>)
 8000972:	fbb3 f3f2 	udiv	r3, r3, r2
 8000976:	4a1f      	ldr	r2, [pc, #124]	; (80009f4 <HAL_UART_RxCpltCallback+0x144>)
 8000978:	3b01      	subs	r3, #1
 800097a:	62d3      	str	r3, [r2, #44]	; 0x2c
 		multiplier = 3;
 800097c:	4b1e      	ldr	r3, [pc, #120]	; (80009f8 <HAL_UART_RxCpltCallback+0x148>)
 800097e:	4a1f      	ldr	r2, [pc, #124]	; (80009fc <HAL_UART_RxCpltCallback+0x14c>)
 8000980:	601a      	str	r2, [r3, #0]
 		break;
 8000982:	e025      	b.n	80009d0 <HAL_UART_RxCpltCallback+0x120>
 		TIM7->ARR = ARR_VAL(NOTE);
 8000984:	4b16      	ldr	r3, [pc, #88]	; (80009e0 <HAL_UART_RxCpltCallback+0x130>)
 8000986:	785b      	ldrb	r3, [r3, #1]
 8000988:	3301      	adds	r3, #1
 800098a:	4a18      	ldr	r2, [pc, #96]	; (80009ec <HAL_UART_RxCpltCallback+0x13c>)
 800098c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000990:	01db      	lsls	r3, r3, #7
 8000992:	461a      	mov	r2, r3
 8000994:	4b16      	ldr	r3, [pc, #88]	; (80009f0 <HAL_UART_RxCpltCallback+0x140>)
 8000996:	fbb3 f3f2 	udiv	r3, r3, r2
 800099a:	4a19      	ldr	r2, [pc, #100]	; (8000a00 <HAL_UART_RxCpltCallback+0x150>)
 800099c:	3b01      	subs	r3, #1
 800099e:	62d3      	str	r3, [r2, #44]	; 0x2c
 		multiplier = 1.5;
 80009a0:	4b15      	ldr	r3, [pc, #84]	; (80009f8 <HAL_UART_RxCpltCallback+0x148>)
 80009a2:	f04f 527f 	mov.w	r2, #1069547520	; 0x3fc00000
 80009a6:	601a      	str	r2, [r3, #0]
 		break;
 80009a8:	e012      	b.n	80009d0 <HAL_UART_RxCpltCallback+0x120>
 		TIM8->ARR = ARR_VAL(NOTE);
 80009aa:	4b0d      	ldr	r3, [pc, #52]	; (80009e0 <HAL_UART_RxCpltCallback+0x130>)
 80009ac:	785b      	ldrb	r3, [r3, #1]
 80009ae:	3301      	adds	r3, #1
 80009b0:	4a0e      	ldr	r2, [pc, #56]	; (80009ec <HAL_UART_RxCpltCallback+0x13c>)
 80009b2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80009b6:	01db      	lsls	r3, r3, #7
 80009b8:	461a      	mov	r2, r3
 80009ba:	4b0d      	ldr	r3, [pc, #52]	; (80009f0 <HAL_UART_RxCpltCallback+0x140>)
 80009bc:	fbb3 f3f2 	udiv	r3, r3, r2
 80009c0:	4a10      	ldr	r2, [pc, #64]	; (8000a04 <HAL_UART_RxCpltCallback+0x154>)
 80009c2:	3b01      	subs	r3, #1
 80009c4:	62d3      	str	r3, [r2, #44]	; 0x2c
 		multiplier = 1;
 80009c6:	4b0c      	ldr	r3, [pc, #48]	; (80009f8 <HAL_UART_RxCpltCallback+0x148>)
 80009c8:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80009cc:	601a      	str	r2, [r3, #0]
 		break;
 80009ce:	bf00      	nop
 }
 80009d0:	bf00      	nop
 80009d2:	3714      	adds	r7, #20
 80009d4:	46bd      	mov	sp, r7
 80009d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009da:	4770      	bx	lr
 80009dc:	20000828 	.word	0x20000828
 80009e0:	20000548 	.word	0x20000548
 80009e4:	20000430 	.word	0x20000430
 80009e8:	20000718 	.word	0x20000718
 80009ec:	08007c9c 	.word	0x08007c9c
 80009f0:	0a21fe80 	.word	0x0a21fe80
 80009f4:	40001000 	.word	0x40001000
 80009f8:	20000000 	.word	0x20000000
 80009fc:	40400000 	.word	0x40400000
 8000a00:	40001400 	.word	0x40001400
 8000a04:	40013400 	.word	0x40013400

08000a08 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	b0a8      	sub	sp, #160	; 0xa0
 8000a0c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a0e:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8000a12:	2238      	movs	r2, #56	; 0x38
 8000a14:	2100      	movs	r1, #0
 8000a16:	4618      	mov	r0, r3
 8000a18:	f007 f92c 	bl	8007c74 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a1c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000a20:	2200      	movs	r2, #0
 8000a22:	601a      	str	r2, [r3, #0]
 8000a24:	605a      	str	r2, [r3, #4]
 8000a26:	609a      	str	r2, [r3, #8]
 8000a28:	60da      	str	r2, [r3, #12]
 8000a2a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000a2c:	463b      	mov	r3, r7
 8000a2e:	2254      	movs	r2, #84	; 0x54
 8000a30:	2100      	movs	r1, #0
 8000a32:	4618      	mov	r0, r3
 8000a34:	f007 f91e 	bl	8007c74 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000a38:	2000      	movs	r0, #0
 8000a3a:	f003 fee3 	bl	8004804 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000a3e:	2302      	movs	r3, #2
 8000a40:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a42:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000a46:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a48:	2340      	movs	r3, #64	; 0x40
 8000a4a:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a4c:	2302      	movs	r3, #2
 8000a4e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000a52:	2302      	movs	r3, #2
 8000a54:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8000a58:	2304      	movs	r3, #4
 8000a5a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8000a5e:	2355      	movs	r3, #85	; 0x55
 8000a60:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000a64:	2302      	movs	r3, #2
 8000a66:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000a6a:	2302      	movs	r3, #2
 8000a6c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000a70:	2302      	movs	r3, #2
 8000a72:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a76:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8000a7a:	4618      	mov	r0, r3
 8000a7c:	f003 ff76 	bl	800496c <HAL_RCC_OscConfig>
 8000a80:	4603      	mov	r3, r0
 8000a82:	2b00      	cmp	r3, #0
 8000a84:	d001      	beq.n	8000a8a <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000a86:	f000 fb97 	bl	80011b8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a8a:	230f      	movs	r3, #15
 8000a8c:	657b      	str	r3, [r7, #84]	; 0x54
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a8e:	2303      	movs	r3, #3
 8000a90:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a92:	2300      	movs	r3, #0
 8000a94:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000a96:	2300      	movs	r3, #0
 8000a98:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	667b      	str	r3, [r7, #100]	; 0x64

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000a9e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000aa2:	2104      	movs	r1, #4
 8000aa4:	4618      	mov	r0, r3
 8000aa6:	f004 fa79 	bl	8004f9c <HAL_RCC_ClockConfig>
 8000aaa:	4603      	mov	r3, r0
 8000aac:	2b00      	cmp	r3, #0
 8000aae:	d001      	beq.n	8000ab4 <SystemClock_Config+0xac>
  {
    Error_Handler();
 8000ab0:	f000 fb82 	bl	80011b8 <Error_Handler>
  }
  /** Initializes the peripherals clocks
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_ADC12
 8000ab4:	4b0b      	ldr	r3, [pc, #44]	; (8000ae4 <SystemClock_Config+0xdc>)
 8000ab6:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_ADC345;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000ab8:	2300      	movs	r3, #0
 8000aba:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8000abc:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8000ac0:	647b      	str	r3, [r7, #68]	; 0x44
  PeriphClkInit.Adc345ClockSelection = RCC_ADC345CLKSOURCE_SYSCLK;
 8000ac2:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8000ac6:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000ac8:	463b      	mov	r3, r7
 8000aca:	4618      	mov	r0, r3
 8000acc:	f004 fc82 	bl	80053d4 <HAL_RCCEx_PeriphCLKConfig>
 8000ad0:	4603      	mov	r3, r0
 8000ad2:	2b00      	cmp	r3, #0
 8000ad4:	d001      	beq.n	8000ada <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8000ad6:	f000 fb6f 	bl	80011b8 <Error_Handler>
  }
}
 8000ada:	bf00      	nop
 8000adc:	37a0      	adds	r7, #160	; 0xa0
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	bd80      	pop	{r7, pc}
 8000ae2:	bf00      	nop
 8000ae4:	00018001 	.word	0x00018001

08000ae8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	b08c      	sub	sp, #48	; 0x30
 8000aec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000aee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000af2:	2200      	movs	r2, #0
 8000af4:	601a      	str	r2, [r3, #0]
 8000af6:	605a      	str	r2, [r3, #4]
 8000af8:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000afa:	1d3b      	adds	r3, r7, #4
 8000afc:	2220      	movs	r2, #32
 8000afe:	2100      	movs	r1, #0
 8000b00:	4618      	mov	r0, r3
 8000b02:	f007 f8b7 	bl	8007c74 <memset>
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8000b06:	4b44      	ldr	r3, [pc, #272]	; (8000c18 <MX_ADC1_Init+0x130>)
 8000b08:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000b0c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000b0e:	4b42      	ldr	r3, [pc, #264]	; (8000c18 <MX_ADC1_Init+0x130>)
 8000b10:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000b14:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000b16:	4b40      	ldr	r3, [pc, #256]	; (8000c18 <MX_ADC1_Init+0x130>)
 8000b18:	2200      	movs	r2, #0
 8000b1a:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000b1c:	4b3e      	ldr	r3, [pc, #248]	; (8000c18 <MX_ADC1_Init+0x130>)
 8000b1e:	2200      	movs	r2, #0
 8000b20:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8000b22:	4b3d      	ldr	r3, [pc, #244]	; (8000c18 <MX_ADC1_Init+0x130>)
 8000b24:	2200      	movs	r2, #0
 8000b26:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000b28:	4b3b      	ldr	r3, [pc, #236]	; (8000c18 <MX_ADC1_Init+0x130>)
 8000b2a:	2201      	movs	r2, #1
 8000b2c:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8000b2e:	4b3a      	ldr	r3, [pc, #232]	; (8000c18 <MX_ADC1_Init+0x130>)
 8000b30:	2208      	movs	r2, #8
 8000b32:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000b34:	4b38      	ldr	r3, [pc, #224]	; (8000c18 <MX_ADC1_Init+0x130>)
 8000b36:	2200      	movs	r2, #0
 8000b38:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000b3a:	4b37      	ldr	r3, [pc, #220]	; (8000c18 <MX_ADC1_Init+0x130>)
 8000b3c:	2201      	movs	r2, #1
 8000b3e:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 4;
 8000b40:	4b35      	ldr	r3, [pc, #212]	; (8000c18 <MX_ADC1_Init+0x130>)
 8000b42:	2204      	movs	r2, #4
 8000b44:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000b46:	4b34      	ldr	r3, [pc, #208]	; (8000c18 <MX_ADC1_Init+0x130>)
 8000b48:	2200      	movs	r2, #0
 8000b4a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000b4e:	4b32      	ldr	r3, [pc, #200]	; (8000c18 <MX_ADC1_Init+0x130>)
 8000b50:	2200      	movs	r2, #0
 8000b52:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000b54:	4b30      	ldr	r3, [pc, #192]	; (8000c18 <MX_ADC1_Init+0x130>)
 8000b56:	2200      	movs	r2, #0
 8000b58:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000b5a:	4b2f      	ldr	r3, [pc, #188]	; (8000c18 <MX_ADC1_Init+0x130>)
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000b62:	4b2d      	ldr	r3, [pc, #180]	; (8000c18 <MX_ADC1_Init+0x130>)
 8000b64:	2200      	movs	r2, #0
 8000b66:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8000b68:	4b2b      	ldr	r3, [pc, #172]	; (8000c18 <MX_ADC1_Init+0x130>)
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000b70:	4829      	ldr	r0, [pc, #164]	; (8000c18 <MX_ADC1_Init+0x130>)
 8000b72:	f001 f923 	bl	8001dbc <HAL_ADC_Init>
 8000b76:	4603      	mov	r3, r0
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	d001      	beq.n	8000b80 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8000b7c:	f000 fb1c 	bl	80011b8 <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000b80:	2300      	movs	r3, #0
 8000b82:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000b84:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b88:	4619      	mov	r1, r3
 8000b8a:	4823      	ldr	r0, [pc, #140]	; (8000c18 <MX_ADC1_Init+0x130>)
 8000b8c:	f002 fca4 	bl	80034d8 <HAL_ADCEx_MultiModeConfigChannel>
 8000b90:	4603      	mov	r3, r0
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	d001      	beq.n	8000b9a <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8000b96:	f000 fb0f 	bl	80011b8 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000b9a:	4b20      	ldr	r3, [pc, #128]	; (8000c1c <MX_ADC1_Init+0x134>)
 8000b9c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000b9e:	2306      	movs	r3, #6
 8000ba0:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000ba6:	237f      	movs	r3, #127	; 0x7f
 8000ba8:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000baa:	2304      	movs	r3, #4
 8000bac:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000bae:	2300      	movs	r3, #0
 8000bb0:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000bb2:	1d3b      	adds	r3, r7, #4
 8000bb4:	4619      	mov	r1, r3
 8000bb6:	4818      	ldr	r0, [pc, #96]	; (8000c18 <MX_ADC1_Init+0x130>)
 8000bb8:	f001 fe12 	bl	80027e0 <HAL_ADC_ConfigChannel>
 8000bbc:	4603      	mov	r3, r0
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	d001      	beq.n	8000bc6 <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 8000bc2:	f000 faf9 	bl	80011b8 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000bc6:	230c      	movs	r3, #12
 8000bc8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000bca:	1d3b      	adds	r3, r7, #4
 8000bcc:	4619      	mov	r1, r3
 8000bce:	4812      	ldr	r0, [pc, #72]	; (8000c18 <MX_ADC1_Init+0x130>)
 8000bd0:	f001 fe06 	bl	80027e0 <HAL_ADC_ConfigChannel>
 8000bd4:	4603      	mov	r3, r0
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	d001      	beq.n	8000bde <MX_ADC1_Init+0xf6>
  {
    Error_Handler();
 8000bda:	f000 faed 	bl	80011b8 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8000bde:	2312      	movs	r3, #18
 8000be0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000be2:	1d3b      	adds	r3, r7, #4
 8000be4:	4619      	mov	r1, r3
 8000be6:	480c      	ldr	r0, [pc, #48]	; (8000c18 <MX_ADC1_Init+0x130>)
 8000be8:	f001 fdfa 	bl	80027e0 <HAL_ADC_ConfigChannel>
 8000bec:	4603      	mov	r3, r0
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	d001      	beq.n	8000bf6 <MX_ADC1_Init+0x10e>
  {
    Error_Handler();
 8000bf2:	f000 fae1 	bl	80011b8 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8000bf6:	2318      	movs	r3, #24
 8000bf8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000bfa:	1d3b      	adds	r3, r7, #4
 8000bfc:	4619      	mov	r1, r3
 8000bfe:	4806      	ldr	r0, [pc, #24]	; (8000c18 <MX_ADC1_Init+0x130>)
 8000c00:	f001 fdee 	bl	80027e0 <HAL_ADC_ConfigChannel>
 8000c04:	4603      	mov	r3, r0
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	d001      	beq.n	8000c0e <MX_ADC1_Init+0x126>
  {
    Error_Handler();
 8000c0a:	f000 fad5 	bl	80011b8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000c0e:	bf00      	nop
 8000c10:	3730      	adds	r7, #48	; 0x30
 8000c12:	46bd      	mov	sp, r7
 8000c14:	bd80      	pop	{r7, pc}
 8000c16:	bf00      	nop
 8000c18:	2000054c 	.word	0x2000054c
 8000c1c:	04300002 	.word	0x04300002

08000c20 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	b08c      	sub	sp, #48	; 0x30
 8000c24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000c26:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	601a      	str	r2, [r3, #0]
 8000c2e:	605a      	str	r2, [r3, #4]
 8000c30:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000c32:	1d3b      	adds	r3, r7, #4
 8000c34:	2220      	movs	r2, #32
 8000c36:	2100      	movs	r1, #0
 8000c38:	4618      	mov	r0, r3
 8000c3a:	f007 f81b 	bl	8007c74 <memset>
  /* USER CODE BEGIN ADC3_Init 1 */

  /* USER CODE END ADC3_Init 1 */
  /** Common config
  */
  hadc3.Instance = ADC3;
 8000c3e:	4b31      	ldr	r3, [pc, #196]	; (8000d04 <MX_ADC3_Init+0xe4>)
 8000c40:	4a31      	ldr	r2, [pc, #196]	; (8000d08 <MX_ADC3_Init+0xe8>)
 8000c42:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000c44:	4b2f      	ldr	r3, [pc, #188]	; (8000d04 <MX_ADC3_Init+0xe4>)
 8000c46:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000c4a:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8000c4c:	4b2d      	ldr	r3, [pc, #180]	; (8000d04 <MX_ADC3_Init+0xe4>)
 8000c4e:	2200      	movs	r2, #0
 8000c50:	609a      	str	r2, [r3, #8]
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000c52:	4b2c      	ldr	r3, [pc, #176]	; (8000d04 <MX_ADC3_Init+0xe4>)
 8000c54:	2200      	movs	r2, #0
 8000c56:	60da      	str	r2, [r3, #12]
  hadc3.Init.GainCompensation = 0;
 8000c58:	4b2a      	ldr	r3, [pc, #168]	; (8000d04 <MX_ADC3_Init+0xe4>)
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	611a      	str	r2, [r3, #16]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000c5e:	4b29      	ldr	r3, [pc, #164]	; (8000d04 <MX_ADC3_Init+0xe4>)
 8000c60:	2200      	movs	r2, #0
 8000c62:	615a      	str	r2, [r3, #20]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000c64:	4b27      	ldr	r3, [pc, #156]	; (8000d04 <MX_ADC3_Init+0xe4>)
 8000c66:	2204      	movs	r2, #4
 8000c68:	619a      	str	r2, [r3, #24]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8000c6a:	4b26      	ldr	r3, [pc, #152]	; (8000d04 <MX_ADC3_Init+0xe4>)
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ContinuousConvMode = ENABLE;
 8000c70:	4b24      	ldr	r3, [pc, #144]	; (8000d04 <MX_ADC3_Init+0xe4>)
 8000c72:	2201      	movs	r2, #1
 8000c74:	775a      	strb	r2, [r3, #29]
  hadc3.Init.NbrOfConversion = 1;
 8000c76:	4b23      	ldr	r3, [pc, #140]	; (8000d04 <MX_ADC3_Init+0xe4>)
 8000c78:	2201      	movs	r2, #1
 8000c7a:	621a      	str	r2, [r3, #32]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000c7c:	4b21      	ldr	r3, [pc, #132]	; (8000d04 <MX_ADC3_Init+0xe4>)
 8000c7e:	2200      	movs	r2, #0
 8000c80:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000c84:	4b1f      	ldr	r3, [pc, #124]	; (8000d04 <MX_ADC3_Init+0xe4>)
 8000c86:	2200      	movs	r2, #0
 8000c88:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000c8a:	4b1e      	ldr	r3, [pc, #120]	; (8000d04 <MX_ADC3_Init+0xe4>)
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8000c90:	4b1c      	ldr	r3, [pc, #112]	; (8000d04 <MX_ADC3_Init+0xe4>)
 8000c92:	2200      	movs	r2, #0
 8000c94:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000c98:	4b1a      	ldr	r3, [pc, #104]	; (8000d04 <MX_ADC3_Init+0xe4>)
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc3.Init.OversamplingMode = DISABLE;
 8000c9e:	4b19      	ldr	r3, [pc, #100]	; (8000d04 <MX_ADC3_Init+0xe4>)
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000ca6:	4817      	ldr	r0, [pc, #92]	; (8000d04 <MX_ADC3_Init+0xe4>)
 8000ca8:	f001 f888 	bl	8001dbc <HAL_ADC_Init>
 8000cac:	4603      	mov	r3, r0
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	d001      	beq.n	8000cb6 <MX_ADC3_Init+0x96>
  {
    Error_Handler();
 8000cb2:	f000 fa81 	bl	80011b8 <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc3, &multimode) != HAL_OK)
 8000cba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cbe:	4619      	mov	r1, r3
 8000cc0:	4810      	ldr	r0, [pc, #64]	; (8000d04 <MX_ADC3_Init+0xe4>)
 8000cc2:	f002 fc09 	bl	80034d8 <HAL_ADCEx_MultiModeConfigChannel>
 8000cc6:	4603      	mov	r3, r0
 8000cc8:	2b00      	cmp	r3, #0
 8000cca:	d001      	beq.n	8000cd0 <MX_ADC3_Init+0xb0>
  {
    Error_Handler();
 8000ccc:	f000 fa74 	bl	80011b8 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000cd0:	4b0e      	ldr	r3, [pc, #56]	; (8000d0c <MX_ADC3_Init+0xec>)
 8000cd2:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000cd4:	2306      	movs	r3, #6
 8000cd6:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000cd8:	2300      	movs	r3, #0
 8000cda:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000cdc:	237f      	movs	r3, #127	; 0x7f
 8000cde:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000ce0:	2304      	movs	r3, #4
 8000ce2:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000ce8:	1d3b      	adds	r3, r7, #4
 8000cea:	4619      	mov	r1, r3
 8000cec:	4805      	ldr	r0, [pc, #20]	; (8000d04 <MX_ADC3_Init+0xe4>)
 8000cee:	f001 fd77 	bl	80027e0 <HAL_ADC_ConfigChannel>
 8000cf2:	4603      	mov	r3, r0
 8000cf4:	2b00      	cmp	r3, #0
 8000cf6:	d001      	beq.n	8000cfc <MX_ADC3_Init+0xdc>
  {
    Error_Handler();
 8000cf8:	f000 fa5e 	bl	80011b8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8000cfc:	bf00      	nop
 8000cfe:	3730      	adds	r7, #48	; 0x30
 8000d00:	46bd      	mov	sp, r7
 8000d02:	bd80      	pop	{r7, pc}
 8000d04:	200005b8 	.word	0x200005b8
 8000d08:	50000400 	.word	0x50000400
 8000d0c:	04300002 	.word	0x04300002

08000d10 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b08c      	sub	sp, #48	; 0x30
 8000d14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000d16:	463b      	mov	r3, r7
 8000d18:	2230      	movs	r2, #48	; 0x30
 8000d1a:	2100      	movs	r1, #0
 8000d1c:	4618      	mov	r0, r3
 8000d1e:	f006 ffa9 	bl	8007c74 <memset>
  /* USER CODE BEGIN DAC1_Init 1 */

  /* USER CODE END DAC1_Init 1 */
  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8000d22:	4b16      	ldr	r3, [pc, #88]	; (8000d7c <MX_DAC1_Init+0x6c>)
 8000d24:	4a16      	ldr	r2, [pc, #88]	; (8000d80 <MX_DAC1_Init+0x70>)
 8000d26:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8000d28:	4814      	ldr	r0, [pc, #80]	; (8000d7c <MX_DAC1_Init+0x6c>)
 8000d2a:	f002 fdec 	bl	8003906 <HAL_DAC_Init>
 8000d2e:	4603      	mov	r3, r0
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d001      	beq.n	8000d38 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8000d34:	f000 fa40 	bl	80011b8 <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 8000d38:	2302      	movs	r3, #2
 8000d3a:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 8000d40:	2300      	movs	r3, #0
 8000d42:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8000d44:	2300      	movs	r3, #0
 8000d46:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8000d48:	2300      	movs	r3, #0
 8000d4a:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000d50:	2300      	movs	r3, #0
 8000d52:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_BOTH;
 8000d54:	2304      	movs	r3, #4
 8000d56:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8000d58:	2300      	movs	r3, #0
 8000d5a:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000d5c:	463b      	mov	r3, r7
 8000d5e:	2200      	movs	r2, #0
 8000d60:	4619      	mov	r1, r3
 8000d62:	4806      	ldr	r0, [pc, #24]	; (8000d7c <MX_DAC1_Init+0x6c>)
 8000d64:	f002 fed0 	bl	8003b08 <HAL_DAC_ConfigChannel>
 8000d68:	4603      	mov	r3, r0
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	d001      	beq.n	8000d72 <MX_DAC1_Init+0x62>
  {
    Error_Handler();
 8000d6e:	f000 fa23 	bl	80011b8 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8000d72:	bf00      	nop
 8000d74:	3730      	adds	r7, #48	; 0x30
 8000d76:	46bd      	mov	sp, r7
 8000d78:	bd80      	pop	{r7, pc}
 8000d7a:	bf00      	nop
 8000d7c:	20000488 	.word	0x20000488
 8000d80:	50000800 	.word	0x50000800

08000d84 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	b088      	sub	sp, #32
 8000d88:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d8a:	f107 0310 	add.w	r3, r7, #16
 8000d8e:	2200      	movs	r2, #0
 8000d90:	601a      	str	r2, [r3, #0]
 8000d92:	605a      	str	r2, [r3, #4]
 8000d94:	609a      	str	r2, [r3, #8]
 8000d96:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d98:	1d3b      	adds	r3, r7, #4
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	601a      	str	r2, [r3, #0]
 8000d9e:	605a      	str	r2, [r3, #4]
 8000da0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000da2:	4b1e      	ldr	r3, [pc, #120]	; (8000e1c <MX_TIM2_Init+0x98>)
 8000da4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000da8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000daa:	4b1c      	ldr	r3, [pc, #112]	; (8000e1c <MX_TIM2_Init+0x98>)
 8000dac:	2200      	movs	r2, #0
 8000dae:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000db0:	4b1a      	ldr	r3, [pc, #104]	; (8000e1c <MX_TIM2_Init+0x98>)
 8000db2:	2200      	movs	r2, #0
 8000db4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4.294967295E9;
 8000db6:	4b19      	ldr	r3, [pc, #100]	; (8000e1c <MX_TIM2_Init+0x98>)
 8000db8:	f04f 32ff 	mov.w	r2, #4294967295
 8000dbc:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000dbe:	4b17      	ldr	r3, [pc, #92]	; (8000e1c <MX_TIM2_Init+0x98>)
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000dc4:	4b15      	ldr	r3, [pc, #84]	; (8000e1c <MX_TIM2_Init+0x98>)
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000dca:	4814      	ldr	r0, [pc, #80]	; (8000e1c <MX_TIM2_Init+0x98>)
 8000dcc:	f004 fd4e 	bl	800586c <HAL_TIM_Base_Init>
 8000dd0:	4603      	mov	r3, r0
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	d001      	beq.n	8000dda <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8000dd6:	f000 f9ef 	bl	80011b8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000dda:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000dde:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000de0:	f107 0310 	add.w	r3, r7, #16
 8000de4:	4619      	mov	r1, r3
 8000de6:	480d      	ldr	r0, [pc, #52]	; (8000e1c <MX_TIM2_Init+0x98>)
 8000de8:	f004 ff90 	bl	8005d0c <HAL_TIM_ConfigClockSource>
 8000dec:	4603      	mov	r3, r0
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d001      	beq.n	8000df6 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8000df2:	f000 f9e1 	bl	80011b8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000df6:	2320      	movs	r3, #32
 8000df8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000dfe:	1d3b      	adds	r3, r7, #4
 8000e00:	4619      	mov	r1, r3
 8000e02:	4806      	ldr	r0, [pc, #24]	; (8000e1c <MX_TIM2_Init+0x98>)
 8000e04:	f005 f9f6 	bl	80061f4 <HAL_TIMEx_MasterConfigSynchronization>
 8000e08:	4603      	mov	r3, r0
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d001      	beq.n	8000e12 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8000e0e:	f000 f9d3 	bl	80011b8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000e12:	bf00      	nop
 8000e14:	3720      	adds	r7, #32
 8000e16:	46bd      	mov	sp, r7
 8000e18:	bd80      	pop	{r7, pc}
 8000e1a:	bf00      	nop
 8000e1c:	20000778 	.word	0x20000778

08000e20 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b088      	sub	sp, #32
 8000e24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e26:	f107 0310 	add.w	r3, r7, #16
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	601a      	str	r2, [r3, #0]
 8000e2e:	605a      	str	r2, [r3, #4]
 8000e30:	609a      	str	r2, [r3, #8]
 8000e32:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e34:	1d3b      	adds	r3, r7, #4
 8000e36:	2200      	movs	r2, #0
 8000e38:	601a      	str	r2, [r3, #0]
 8000e3a:	605a      	str	r2, [r3, #4]
 8000e3c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8000e3e:	4b1d      	ldr	r3, [pc, #116]	; (8000eb4 <MX_TIM5_Init+0x94>)
 8000e40:	4a1d      	ldr	r2, [pc, #116]	; (8000eb8 <MX_TIM5_Init+0x98>)
 8000e42:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8000e44:	4b1b      	ldr	r3, [pc, #108]	; (8000eb4 <MX_TIM5_Init+0x94>)
 8000e46:	2200      	movs	r2, #0
 8000e48:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e4a:	4b1a      	ldr	r3, [pc, #104]	; (8000eb4 <MX_TIM5_Init+0x94>)
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 65535;
 8000e50:	4b18      	ldr	r3, [pc, #96]	; (8000eb4 <MX_TIM5_Init+0x94>)
 8000e52:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000e56:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e58:	4b16      	ldr	r3, [pc, #88]	; (8000eb4 <MX_TIM5_Init+0x94>)
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e5e:	4b15      	ldr	r3, [pc, #84]	; (8000eb4 <MX_TIM5_Init+0x94>)
 8000e60:	2200      	movs	r2, #0
 8000e62:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8000e64:	4813      	ldr	r0, [pc, #76]	; (8000eb4 <MX_TIM5_Init+0x94>)
 8000e66:	f004 fd01 	bl	800586c <HAL_TIM_Base_Init>
 8000e6a:	4603      	mov	r3, r0
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	d001      	beq.n	8000e74 <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 8000e70:	f000 f9a2 	bl	80011b8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e74:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e78:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8000e7a:	f107 0310 	add.w	r3, r7, #16
 8000e7e:	4619      	mov	r1, r3
 8000e80:	480c      	ldr	r0, [pc, #48]	; (8000eb4 <MX_TIM5_Init+0x94>)
 8000e82:	f004 ff43 	bl	8005d0c <HAL_TIM_ConfigClockSource>
 8000e86:	4603      	mov	r3, r0
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	d001      	beq.n	8000e90 <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 8000e8c:	f000 f994 	bl	80011b8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000e90:	2320      	movs	r3, #32
 8000e92:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e94:	2300      	movs	r3, #0
 8000e96:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8000e98:	1d3b      	adds	r3, r7, #4
 8000e9a:	4619      	mov	r1, r3
 8000e9c:	4805      	ldr	r0, [pc, #20]	; (8000eb4 <MX_TIM5_Init+0x94>)
 8000e9e:	f005 f9a9 	bl	80061f4 <HAL_TIMEx_MasterConfigSynchronization>
 8000ea2:	4603      	mov	r3, r0
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d001      	beq.n	8000eac <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 8000ea8:	f000 f986 	bl	80011b8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8000eac:	bf00      	nop
 8000eae:	3720      	adds	r7, #32
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	bd80      	pop	{r7, pc}
 8000eb4:	200004fc 	.word	0x200004fc
 8000eb8:	40000c00 	.word	0x40000c00

08000ebc <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b084      	sub	sp, #16
 8000ec0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ec2:	1d3b      	adds	r3, r7, #4
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	601a      	str	r2, [r3, #0]
 8000ec8:	605a      	str	r2, [r3, #4]
 8000eca:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000ecc:	4b14      	ldr	r3, [pc, #80]	; (8000f20 <MX_TIM6_Init+0x64>)
 8000ece:	4a15      	ldr	r2, [pc, #84]	; (8000f24 <MX_TIM6_Init+0x68>)
 8000ed0:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0;
 8000ed2:	4b13      	ldr	r3, [pc, #76]	; (8000f20 <MX_TIM6_Init+0x64>)
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ed8:	4b11      	ldr	r3, [pc, #68]	; (8000f20 <MX_TIM6_Init+0x64>)
 8000eda:	2200      	movs	r2, #0
 8000edc:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 8000ede:	4b10      	ldr	r3, [pc, #64]	; (8000f20 <MX_TIM6_Init+0x64>)
 8000ee0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000ee4:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ee6:	4b0e      	ldr	r3, [pc, #56]	; (8000f20 <MX_TIM6_Init+0x64>)
 8000ee8:	2200      	movs	r2, #0
 8000eea:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000eec:	480c      	ldr	r0, [pc, #48]	; (8000f20 <MX_TIM6_Init+0x64>)
 8000eee:	f004 fcbd 	bl	800586c <HAL_TIM_Base_Init>
 8000ef2:	4603      	mov	r3, r0
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d001      	beq.n	8000efc <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8000ef8:	f000 f95e 	bl	80011b8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000efc:	2320      	movs	r3, #32
 8000efe:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f00:	2300      	movs	r3, #0
 8000f02:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000f04:	1d3b      	adds	r3, r7, #4
 8000f06:	4619      	mov	r1, r3
 8000f08:	4805      	ldr	r0, [pc, #20]	; (8000f20 <MX_TIM6_Init+0x64>)
 8000f0a:	f005 f973 	bl	80061f4 <HAL_TIMEx_MasterConfigSynchronization>
 8000f0e:	4603      	mov	r3, r0
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d001      	beq.n	8000f18 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8000f14:	f000 f950 	bl	80011b8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8000f18:	bf00      	nop
 8000f1a:	3710      	adds	r7, #16
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	bd80      	pop	{r7, pc}
 8000f20:	2000072c 	.word	0x2000072c
 8000f24:	40001000 	.word	0x40001000

08000f28 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b084      	sub	sp, #16
 8000f2c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f2e:	1d3b      	adds	r3, r7, #4
 8000f30:	2200      	movs	r2, #0
 8000f32:	601a      	str	r2, [r3, #0]
 8000f34:	605a      	str	r2, [r3, #4]
 8000f36:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8000f38:	4b14      	ldr	r3, [pc, #80]	; (8000f8c <MX_TIM7_Init+0x64>)
 8000f3a:	4a15      	ldr	r2, [pc, #84]	; (8000f90 <MX_TIM7_Init+0x68>)
 8000f3c:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 0;
 8000f3e:	4b13      	ldr	r3, [pc, #76]	; (8000f8c <MX_TIM7_Init+0x64>)
 8000f40:	2200      	movs	r2, #0
 8000f42:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f44:	4b11      	ldr	r3, [pc, #68]	; (8000f8c <MX_TIM7_Init+0x64>)
 8000f46:	2200      	movs	r2, #0
 8000f48:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 65535;
 8000f4a:	4b10      	ldr	r3, [pc, #64]	; (8000f8c <MX_TIM7_Init+0x64>)
 8000f4c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000f50:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f52:	4b0e      	ldr	r3, [pc, #56]	; (8000f8c <MX_TIM7_Init+0x64>)
 8000f54:	2200      	movs	r2, #0
 8000f56:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8000f58:	480c      	ldr	r0, [pc, #48]	; (8000f8c <MX_TIM7_Init+0x64>)
 8000f5a:	f004 fc87 	bl	800586c <HAL_TIM_Base_Init>
 8000f5e:	4603      	mov	r3, r0
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d001      	beq.n	8000f68 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 8000f64:	f000 f928 	bl	80011b8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000f68:	2320      	movs	r3, #32
 8000f6a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8000f70:	1d3b      	adds	r3, r7, #4
 8000f72:	4619      	mov	r1, r3
 8000f74:	4805      	ldr	r0, [pc, #20]	; (8000f8c <MX_TIM7_Init+0x64>)
 8000f76:	f005 f93d 	bl	80061f4 <HAL_TIMEx_MasterConfigSynchronization>
 8000f7a:	4603      	mov	r3, r0
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d001      	beq.n	8000f84 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 8000f80:	f000 f91a 	bl	80011b8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8000f84:	bf00      	nop
 8000f86:	3710      	adds	r7, #16
 8000f88:	46bd      	mov	sp, r7
 8000f8a:	bd80      	pop	{r7, pc}
 8000f8c:	200007dc 	.word	0x200007dc
 8000f90:	40001400 	.word	0x40001400

08000f94 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b088      	sub	sp, #32
 8000f98:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f9a:	f107 0310 	add.w	r3, r7, #16
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	601a      	str	r2, [r3, #0]
 8000fa2:	605a      	str	r2, [r3, #4]
 8000fa4:	609a      	str	r2, [r3, #8]
 8000fa6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000fa8:	1d3b      	adds	r3, r7, #4
 8000faa:	2200      	movs	r2, #0
 8000fac:	601a      	str	r2, [r3, #0]
 8000fae:	605a      	str	r2, [r3, #4]
 8000fb0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8000fb2:	4b20      	ldr	r3, [pc, #128]	; (8001034 <MX_TIM8_Init+0xa0>)
 8000fb4:	4a20      	ldr	r2, [pc, #128]	; (8001038 <MX_TIM8_Init+0xa4>)
 8000fb6:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8000fb8:	4b1e      	ldr	r3, [pc, #120]	; (8001034 <MX_TIM8_Init+0xa0>)
 8000fba:	2200      	movs	r2, #0
 8000fbc:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fbe:	4b1d      	ldr	r3, [pc, #116]	; (8001034 <MX_TIM8_Init+0xa0>)
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8000fc4:	4b1b      	ldr	r3, [pc, #108]	; (8001034 <MX_TIM8_Init+0xa0>)
 8000fc6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000fca:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000fcc:	4b19      	ldr	r3, [pc, #100]	; (8001034 <MX_TIM8_Init+0xa0>)
 8000fce:	2200      	movs	r2, #0
 8000fd0:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8000fd2:	4b18      	ldr	r3, [pc, #96]	; (8001034 <MX_TIM8_Init+0xa0>)
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000fd8:	4b16      	ldr	r3, [pc, #88]	; (8001034 <MX_TIM8_Init+0xa0>)
 8000fda:	2200      	movs	r2, #0
 8000fdc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8000fde:	4815      	ldr	r0, [pc, #84]	; (8001034 <MX_TIM8_Init+0xa0>)
 8000fe0:	f004 fc44 	bl	800586c <HAL_TIM_Base_Init>
 8000fe4:	4603      	mov	r3, r0
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d001      	beq.n	8000fee <MX_TIM8_Init+0x5a>
  {
    Error_Handler();
 8000fea:	f000 f8e5 	bl	80011b8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000fee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ff2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8000ff4:	f107 0310 	add.w	r3, r7, #16
 8000ff8:	4619      	mov	r1, r3
 8000ffa:	480e      	ldr	r0, [pc, #56]	; (8001034 <MX_TIM8_Init+0xa0>)
 8000ffc:	f004 fe86 	bl	8005d0c <HAL_TIM_ConfigClockSource>
 8001000:	4603      	mov	r3, r0
 8001002:	2b00      	cmp	r3, #0
 8001004:	d001      	beq.n	800100a <MX_TIM8_Init+0x76>
  {
    Error_Handler();
 8001006:	f000 f8d7 	bl	80011b8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800100a:	2320      	movs	r3, #32
 800100c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800100e:	2300      	movs	r3, #0
 8001010:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001012:	2300      	movs	r3, #0
 8001014:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001016:	1d3b      	adds	r3, r7, #4
 8001018:	4619      	mov	r1, r3
 800101a:	4806      	ldr	r0, [pc, #24]	; (8001034 <MX_TIM8_Init+0xa0>)
 800101c:	f005 f8ea 	bl	80061f4 <HAL_TIMEx_MasterConfigSynchronization>
 8001020:	4603      	mov	r3, r0
 8001022:	2b00      	cmp	r3, #0
 8001024:	d001      	beq.n	800102a <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 8001026:	f000 f8c7 	bl	80011b8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 800102a:	bf00      	nop
 800102c:	3720      	adds	r7, #32
 800102e:	46bd      	mov	sp, r7
 8001030:	bd80      	pop	{r7, pc}
 8001032:	bf00      	nop
 8001034:	2000043c 	.word	0x2000043c
 8001038:	40013400 	.word	0x40013400

0800103c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001040:	4b22      	ldr	r3, [pc, #136]	; (80010cc <MX_USART1_UART_Init+0x90>)
 8001042:	4a23      	ldr	r2, [pc, #140]	; (80010d0 <MX_USART1_UART_Init+0x94>)
 8001044:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 31250;
 8001046:	4b21      	ldr	r3, [pc, #132]	; (80010cc <MX_USART1_UART_Init+0x90>)
 8001048:	f647 2212 	movw	r2, #31250	; 0x7a12
 800104c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800104e:	4b1f      	ldr	r3, [pc, #124]	; (80010cc <MX_USART1_UART_Init+0x90>)
 8001050:	2200      	movs	r2, #0
 8001052:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001054:	4b1d      	ldr	r3, [pc, #116]	; (80010cc <MX_USART1_UART_Init+0x90>)
 8001056:	2200      	movs	r2, #0
 8001058:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800105a:	4b1c      	ldr	r3, [pc, #112]	; (80010cc <MX_USART1_UART_Init+0x90>)
 800105c:	2200      	movs	r2, #0
 800105e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_RX;
 8001060:	4b1a      	ldr	r3, [pc, #104]	; (80010cc <MX_USART1_UART_Init+0x90>)
 8001062:	2204      	movs	r2, #4
 8001064:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001066:	4b19      	ldr	r3, [pc, #100]	; (80010cc <MX_USART1_UART_Init+0x90>)
 8001068:	2200      	movs	r2, #0
 800106a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800106c:	4b17      	ldr	r3, [pc, #92]	; (80010cc <MX_USART1_UART_Init+0x90>)
 800106e:	2200      	movs	r2, #0
 8001070:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001072:	4b16      	ldr	r3, [pc, #88]	; (80010cc <MX_USART1_UART_Init+0x90>)
 8001074:	2200      	movs	r2, #0
 8001076:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001078:	4b14      	ldr	r3, [pc, #80]	; (80010cc <MX_USART1_UART_Init+0x90>)
 800107a:	2200      	movs	r2, #0
 800107c:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800107e:	4b13      	ldr	r3, [pc, #76]	; (80010cc <MX_USART1_UART_Init+0x90>)
 8001080:	2200      	movs	r2, #0
 8001082:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001084:	4811      	ldr	r0, [pc, #68]	; (80010cc <MX_USART1_UART_Init+0x90>)
 8001086:	f005 f991 	bl	80063ac <HAL_UART_Init>
 800108a:	4603      	mov	r3, r0
 800108c:	2b00      	cmp	r3, #0
 800108e:	d001      	beq.n	8001094 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001090:	f000 f892 	bl	80011b8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001094:	2100      	movs	r1, #0
 8001096:	480d      	ldr	r0, [pc, #52]	; (80010cc <MX_USART1_UART_Init+0x90>)
 8001098:	f006 fcfd 	bl	8007a96 <HAL_UARTEx_SetTxFifoThreshold>
 800109c:	4603      	mov	r3, r0
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d001      	beq.n	80010a6 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80010a2:	f000 f889 	bl	80011b8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80010a6:	2100      	movs	r1, #0
 80010a8:	4808      	ldr	r0, [pc, #32]	; (80010cc <MX_USART1_UART_Init+0x90>)
 80010aa:	f006 fd32 	bl	8007b12 <HAL_UARTEx_SetRxFifoThreshold>
 80010ae:	4603      	mov	r3, r0
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d001      	beq.n	80010b8 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 80010b4:	f000 f880 	bl	80011b8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80010b8:	4804      	ldr	r0, [pc, #16]	; (80010cc <MX_USART1_UART_Init+0x90>)
 80010ba:	f006 fcb3 	bl	8007a24 <HAL_UARTEx_DisableFifoMode>
 80010be:	4603      	mov	r3, r0
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d001      	beq.n	80010c8 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 80010c4:	f000 f878 	bl	80011b8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80010c8:	bf00      	nop
 80010ca:	bd80      	pop	{r7, pc}
 80010cc:	20000624 	.word	0x20000624
 80010d0:	40013800 	.word	0x40013800

080010d4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b082      	sub	sp, #8
 80010d8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80010da:	4b16      	ldr	r3, [pc, #88]	; (8001134 <MX_DMA_Init+0x60>)
 80010dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80010de:	4a15      	ldr	r2, [pc, #84]	; (8001134 <MX_DMA_Init+0x60>)
 80010e0:	f043 0304 	orr.w	r3, r3, #4
 80010e4:	6493      	str	r3, [r2, #72]	; 0x48
 80010e6:	4b13      	ldr	r3, [pc, #76]	; (8001134 <MX_DMA_Init+0x60>)
 80010e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80010ea:	f003 0304 	and.w	r3, r3, #4
 80010ee:	607b      	str	r3, [r7, #4]
 80010f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80010f2:	4b10      	ldr	r3, [pc, #64]	; (8001134 <MX_DMA_Init+0x60>)
 80010f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80010f6:	4a0f      	ldr	r2, [pc, #60]	; (8001134 <MX_DMA_Init+0x60>)
 80010f8:	f043 0301 	orr.w	r3, r3, #1
 80010fc:	6493      	str	r3, [r2, #72]	; 0x48
 80010fe:	4b0d      	ldr	r3, [pc, #52]	; (8001134 <MX_DMA_Init+0x60>)
 8001100:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001102:	f003 0301 	and.w	r3, r3, #1
 8001106:	603b      	str	r3, [r7, #0]
 8001108:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800110a:	2200      	movs	r2, #0
 800110c:	2100      	movs	r1, #0
 800110e:	200b      	movs	r0, #11
 8001110:	f002 fbc5 	bl	800389e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001114:	200b      	movs	r0, #11
 8001116:	f002 fbdc 	bl	80038d2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 800111a:	2200      	movs	r2, #0
 800111c:	2100      	movs	r1, #0
 800111e:	200d      	movs	r0, #13
 8001120:	f002 fbbd 	bl	800389e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8001124:	200d      	movs	r0, #13
 8001126:	f002 fbd4 	bl	80038d2 <HAL_NVIC_EnableIRQ>

}
 800112a:	bf00      	nop
 800112c:	3708      	adds	r7, #8
 800112e:	46bd      	mov	sp, r7
 8001130:	bd80      	pop	{r7, pc}
 8001132:	bf00      	nop
 8001134:	40021000 	.word	0x40021000

08001138 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	b088      	sub	sp, #32
 800113c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800113e:	f107 030c 	add.w	r3, r7, #12
 8001142:	2200      	movs	r2, #0
 8001144:	601a      	str	r2, [r3, #0]
 8001146:	605a      	str	r2, [r3, #4]
 8001148:	609a      	str	r2, [r3, #8]
 800114a:	60da      	str	r2, [r3, #12]
 800114c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800114e:	4b18      	ldr	r3, [pc, #96]	; (80011b0 <MX_GPIO_Init+0x78>)
 8001150:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001152:	4a17      	ldr	r2, [pc, #92]	; (80011b0 <MX_GPIO_Init+0x78>)
 8001154:	f043 0301 	orr.w	r3, r3, #1
 8001158:	64d3      	str	r3, [r2, #76]	; 0x4c
 800115a:	4b15      	ldr	r3, [pc, #84]	; (80011b0 <MX_GPIO_Init+0x78>)
 800115c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800115e:	f003 0301 	and.w	r3, r3, #1
 8001162:	60bb      	str	r3, [r7, #8]
 8001164:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001166:	4b12      	ldr	r3, [pc, #72]	; (80011b0 <MX_GPIO_Init+0x78>)
 8001168:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800116a:	4a11      	ldr	r2, [pc, #68]	; (80011b0 <MX_GPIO_Init+0x78>)
 800116c:	f043 0302 	orr.w	r3, r3, #2
 8001170:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001172:	4b0f      	ldr	r3, [pc, #60]	; (80011b0 <MX_GPIO_Init+0x78>)
 8001174:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001176:	f003 0302 	and.w	r3, r3, #2
 800117a:	607b      	str	r3, [r7, #4]
 800117c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_RESET);
 800117e:	2200      	movs	r2, #0
 8001180:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001184:	480b      	ldr	r0, [pc, #44]	; (80011b4 <MX_GPIO_Init+0x7c>)
 8001186:	f003 fb25 	bl	80047d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 800118a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800118e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001190:	2301      	movs	r3, #1
 8001192:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001194:	2300      	movs	r3, #0
 8001196:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001198:	2300      	movs	r3, #0
 800119a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800119c:	f107 030c 	add.w	r3, r7, #12
 80011a0:	4619      	mov	r1, r3
 80011a2:	4804      	ldr	r0, [pc, #16]	; (80011b4 <MX_GPIO_Init+0x7c>)
 80011a4:	f003 f994 	bl	80044d0 <HAL_GPIO_Init>

}
 80011a8:	bf00      	nop
 80011aa:	3720      	adds	r7, #32
 80011ac:	46bd      	mov	sp, r7
 80011ae:	bd80      	pop	{r7, pc}
 80011b0:	40021000 	.word	0x40021000
 80011b4:	48000400 	.word	0x48000400

080011b8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80011b8:	b480      	push	{r7}
 80011ba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80011bc:	b672      	cpsid	i
}
 80011be:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80011c0:	e7fe      	b.n	80011c0 <Error_Handler+0x8>
	...

080011c4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b082      	sub	sp, #8
 80011c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011ca:	4b0f      	ldr	r3, [pc, #60]	; (8001208 <HAL_MspInit+0x44>)
 80011cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80011ce:	4a0e      	ldr	r2, [pc, #56]	; (8001208 <HAL_MspInit+0x44>)
 80011d0:	f043 0301 	orr.w	r3, r3, #1
 80011d4:	6613      	str	r3, [r2, #96]	; 0x60
 80011d6:	4b0c      	ldr	r3, [pc, #48]	; (8001208 <HAL_MspInit+0x44>)
 80011d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80011da:	f003 0301 	and.w	r3, r3, #1
 80011de:	607b      	str	r3, [r7, #4]
 80011e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80011e2:	4b09      	ldr	r3, [pc, #36]	; (8001208 <HAL_MspInit+0x44>)
 80011e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011e6:	4a08      	ldr	r2, [pc, #32]	; (8001208 <HAL_MspInit+0x44>)
 80011e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011ec:	6593      	str	r3, [r2, #88]	; 0x58
 80011ee:	4b06      	ldr	r3, [pc, #24]	; (8001208 <HAL_MspInit+0x44>)
 80011f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011f6:	603b      	str	r3, [r7, #0]
 80011f8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80011fa:	f003 fba7 	bl	800494c <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011fe:	bf00      	nop
 8001200:	3708      	adds	r7, #8
 8001202:	46bd      	mov	sp, r7
 8001204:	bd80      	pop	{r7, pc}
 8001206:	bf00      	nop
 8001208:	40021000 	.word	0x40021000

0800120c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b08c      	sub	sp, #48	; 0x30
 8001210:	af00      	add	r7, sp, #0
 8001212:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001214:	f107 031c 	add.w	r3, r7, #28
 8001218:	2200      	movs	r2, #0
 800121a:	601a      	str	r2, [r3, #0]
 800121c:	605a      	str	r2, [r3, #4]
 800121e:	609a      	str	r2, [r3, #8]
 8001220:	60da      	str	r2, [r3, #12]
 8001222:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800122c:	d150      	bne.n	80012d0 <HAL_ADC_MspInit+0xc4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 800122e:	4b58      	ldr	r3, [pc, #352]	; (8001390 <HAL_ADC_MspInit+0x184>)
 8001230:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001232:	4a57      	ldr	r2, [pc, #348]	; (8001390 <HAL_ADC_MspInit+0x184>)
 8001234:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001238:	64d3      	str	r3, [r2, #76]	; 0x4c
 800123a:	4b55      	ldr	r3, [pc, #340]	; (8001390 <HAL_ADC_MspInit+0x184>)
 800123c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800123e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001242:	61bb      	str	r3, [r7, #24]
 8001244:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001246:	4b52      	ldr	r3, [pc, #328]	; (8001390 <HAL_ADC_MspInit+0x184>)
 8001248:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800124a:	4a51      	ldr	r2, [pc, #324]	; (8001390 <HAL_ADC_MspInit+0x184>)
 800124c:	f043 0301 	orr.w	r3, r3, #1
 8001250:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001252:	4b4f      	ldr	r3, [pc, #316]	; (8001390 <HAL_ADC_MspInit+0x184>)
 8001254:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001256:	f003 0301 	and.w	r3, r3, #1
 800125a:	617b      	str	r3, [r7, #20]
 800125c:	697b      	ldr	r3, [r7, #20]
    PA0     ------> ADC1_IN1
    PA1     ------> ADC1_IN2
    PA2     ------> ADC1_IN3
    PA3     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 800125e:	230f      	movs	r3, #15
 8001260:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001262:	2303      	movs	r3, #3
 8001264:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001266:	2300      	movs	r3, #0
 8001268:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800126a:	f107 031c 	add.w	r3, r7, #28
 800126e:	4619      	mov	r1, r3
 8001270:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001274:	f003 f92c 	bl	80044d0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8001278:	4b46      	ldr	r3, [pc, #280]	; (8001394 <HAL_ADC_MspInit+0x188>)
 800127a:	4a47      	ldr	r2, [pc, #284]	; (8001398 <HAL_ADC_MspInit+0x18c>)
 800127c:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 800127e:	4b45      	ldr	r3, [pc, #276]	; (8001394 <HAL_ADC_MspInit+0x188>)
 8001280:	2205      	movs	r2, #5
 8001282:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001284:	4b43      	ldr	r3, [pc, #268]	; (8001394 <HAL_ADC_MspInit+0x188>)
 8001286:	2200      	movs	r2, #0
 8001288:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800128a:	4b42      	ldr	r3, [pc, #264]	; (8001394 <HAL_ADC_MspInit+0x188>)
 800128c:	2200      	movs	r2, #0
 800128e:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001290:	4b40      	ldr	r3, [pc, #256]	; (8001394 <HAL_ADC_MspInit+0x188>)
 8001292:	2280      	movs	r2, #128	; 0x80
 8001294:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001296:	4b3f      	ldr	r3, [pc, #252]	; (8001394 <HAL_ADC_MspInit+0x188>)
 8001298:	f44f 7200 	mov.w	r2, #512	; 0x200
 800129c:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800129e:	4b3d      	ldr	r3, [pc, #244]	; (8001394 <HAL_ADC_MspInit+0x188>)
 80012a0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80012a4:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80012a6:	4b3b      	ldr	r3, [pc, #236]	; (8001394 <HAL_ADC_MspInit+0x188>)
 80012a8:	2220      	movs	r2, #32
 80012aa:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80012ac:	4b39      	ldr	r3, [pc, #228]	; (8001394 <HAL_ADC_MspInit+0x188>)
 80012ae:	2200      	movs	r2, #0
 80012b0:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80012b2:	4838      	ldr	r0, [pc, #224]	; (8001394 <HAL_ADC_MspInit+0x188>)
 80012b4:	f002 fdda 	bl	8003e6c <HAL_DMA_Init>
 80012b8:	4603      	mov	r3, r0
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d001      	beq.n	80012c2 <HAL_ADC_MspInit+0xb6>
    {
      Error_Handler();
 80012be:	f7ff ff7b 	bl	80011b8 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	4a33      	ldr	r2, [pc, #204]	; (8001394 <HAL_ADC_MspInit+0x188>)
 80012c6:	655a      	str	r2, [r3, #84]	; 0x54
 80012c8:	4a32      	ldr	r2, [pc, #200]	; (8001394 <HAL_ADC_MspInit+0x188>)
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 80012ce:	e05b      	b.n	8001388 <HAL_ADC_MspInit+0x17c>
  else if(hadc->Instance==ADC3)
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	4a31      	ldr	r2, [pc, #196]	; (800139c <HAL_ADC_MspInit+0x190>)
 80012d6:	4293      	cmp	r3, r2
 80012d8:	d156      	bne.n	8001388 <HAL_ADC_MspInit+0x17c>
    __HAL_RCC_ADC345_CLK_ENABLE();
 80012da:	4b2d      	ldr	r3, [pc, #180]	; (8001390 <HAL_ADC_MspInit+0x184>)
 80012dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012de:	4a2c      	ldr	r2, [pc, #176]	; (8001390 <HAL_ADC_MspInit+0x184>)
 80012e0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80012e4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012e6:	4b2a      	ldr	r3, [pc, #168]	; (8001390 <HAL_ADC_MspInit+0x184>)
 80012e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80012ee:	613b      	str	r3, [r7, #16]
 80012f0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012f2:	4b27      	ldr	r3, [pc, #156]	; (8001390 <HAL_ADC_MspInit+0x184>)
 80012f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012f6:	4a26      	ldr	r2, [pc, #152]	; (8001390 <HAL_ADC_MspInit+0x184>)
 80012f8:	f043 0302 	orr.w	r3, r3, #2
 80012fc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012fe:	4b24      	ldr	r3, [pc, #144]	; (8001390 <HAL_ADC_MspInit+0x184>)
 8001300:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001302:	f003 0302 	and.w	r3, r3, #2
 8001306:	60fb      	str	r3, [r7, #12]
 8001308:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800130a:	2302      	movs	r3, #2
 800130c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800130e:	2303      	movs	r3, #3
 8001310:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001312:	2300      	movs	r3, #0
 8001314:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001316:	f107 031c 	add.w	r3, r7, #28
 800131a:	4619      	mov	r1, r3
 800131c:	4820      	ldr	r0, [pc, #128]	; (80013a0 <HAL_ADC_MspInit+0x194>)
 800131e:	f003 f8d7 	bl	80044d0 <HAL_GPIO_Init>
    hdma_adc3.Instance = DMA1_Channel3;
 8001322:	4b20      	ldr	r3, [pc, #128]	; (80013a4 <HAL_ADC_MspInit+0x198>)
 8001324:	4a20      	ldr	r2, [pc, #128]	; (80013a8 <HAL_ADC_MspInit+0x19c>)
 8001326:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Request = DMA_REQUEST_ADC3;
 8001328:	4b1e      	ldr	r3, [pc, #120]	; (80013a4 <HAL_ADC_MspInit+0x198>)
 800132a:	2225      	movs	r2, #37	; 0x25
 800132c:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800132e:	4b1d      	ldr	r3, [pc, #116]	; (80013a4 <HAL_ADC_MspInit+0x198>)
 8001330:	2200      	movs	r2, #0
 8001332:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 8001334:	4b1b      	ldr	r3, [pc, #108]	; (80013a4 <HAL_ADC_MspInit+0x198>)
 8001336:	2200      	movs	r2, #0
 8001338:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 800133a:	4b1a      	ldr	r3, [pc, #104]	; (80013a4 <HAL_ADC_MspInit+0x198>)
 800133c:	2280      	movs	r2, #128	; 0x80
 800133e:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001340:	4b18      	ldr	r3, [pc, #96]	; (80013a4 <HAL_ADC_MspInit+0x198>)
 8001342:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001346:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001348:	4b16      	ldr	r3, [pc, #88]	; (80013a4 <HAL_ADC_MspInit+0x198>)
 800134a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800134e:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 8001350:	4b14      	ldr	r3, [pc, #80]	; (80013a4 <HAL_ADC_MspInit+0x198>)
 8001352:	2220      	movs	r2, #32
 8001354:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 8001356:	4b13      	ldr	r3, [pc, #76]	; (80013a4 <HAL_ADC_MspInit+0x198>)
 8001358:	2200      	movs	r2, #0
 800135a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 800135c:	4811      	ldr	r0, [pc, #68]	; (80013a4 <HAL_ADC_MspInit+0x198>)
 800135e:	f002 fd85 	bl	8003e6c <HAL_DMA_Init>
 8001362:	4603      	mov	r3, r0
 8001364:	2b00      	cmp	r3, #0
 8001366:	d001      	beq.n	800136c <HAL_ADC_MspInit+0x160>
      Error_Handler();
 8001368:	f7ff ff26 	bl	80011b8 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc3);
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	4a0d      	ldr	r2, [pc, #52]	; (80013a4 <HAL_ADC_MspInit+0x198>)
 8001370:	655a      	str	r2, [r3, #84]	; 0x54
 8001372:	4a0c      	ldr	r2, [pc, #48]	; (80013a4 <HAL_ADC_MspInit+0x198>)
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	6293      	str	r3, [r2, #40]	; 0x28
    HAL_NVIC_SetPriority(ADC3_IRQn, 0, 0);
 8001378:	2200      	movs	r2, #0
 800137a:	2100      	movs	r1, #0
 800137c:	202f      	movs	r0, #47	; 0x2f
 800137e:	f002 fa8e 	bl	800389e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC3_IRQn);
 8001382:	202f      	movs	r0, #47	; 0x2f
 8001384:	f002 faa5 	bl	80038d2 <HAL_NVIC_EnableIRQ>
}
 8001388:	bf00      	nop
 800138a:	3730      	adds	r7, #48	; 0x30
 800138c:	46bd      	mov	sp, r7
 800138e:	bd80      	pop	{r7, pc}
 8001390:	40021000 	.word	0x40021000
 8001394:	200006b8 	.word	0x200006b8
 8001398:	40020008 	.word	0x40020008
 800139c:	50000400 	.word	0x50000400
 80013a0:	48000400 	.word	0x48000400
 80013a4:	2000049c 	.word	0x2000049c
 80013a8:	40020030 	.word	0x40020030

080013ac <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b08a      	sub	sp, #40	; 0x28
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013b4:	f107 0314 	add.w	r3, r7, #20
 80013b8:	2200      	movs	r2, #0
 80013ba:	601a      	str	r2, [r3, #0]
 80013bc:	605a      	str	r2, [r3, #4]
 80013be:	609a      	str	r2, [r3, #8]
 80013c0:	60da      	str	r2, [r3, #12]
 80013c2:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	4a1d      	ldr	r2, [pc, #116]	; (8001440 <HAL_DAC_MspInit+0x94>)
 80013ca:	4293      	cmp	r3, r2
 80013cc:	d134      	bne.n	8001438 <HAL_DAC_MspInit+0x8c>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 80013ce:	4b1d      	ldr	r3, [pc, #116]	; (8001444 <HAL_DAC_MspInit+0x98>)
 80013d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013d2:	4a1c      	ldr	r2, [pc, #112]	; (8001444 <HAL_DAC_MspInit+0x98>)
 80013d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80013d8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80013da:	4b1a      	ldr	r3, [pc, #104]	; (8001444 <HAL_DAC_MspInit+0x98>)
 80013dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013de:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013e2:	613b      	str	r3, [r7, #16]
 80013e4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013e6:	4b17      	ldr	r3, [pc, #92]	; (8001444 <HAL_DAC_MspInit+0x98>)
 80013e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013ea:	4a16      	ldr	r2, [pc, #88]	; (8001444 <HAL_DAC_MspInit+0x98>)
 80013ec:	f043 0301 	orr.w	r3, r3, #1
 80013f0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80013f2:	4b14      	ldr	r3, [pc, #80]	; (8001444 <HAL_DAC_MspInit+0x98>)
 80013f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013f6:	f003 0301 	and.w	r3, r3, #1
 80013fa:	60fb      	str	r3, [r7, #12]
 80013fc:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80013fe:	2310      	movs	r3, #16
 8001400:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001402:	2303      	movs	r3, #3
 8001404:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001406:	2300      	movs	r3, #0
 8001408:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800140a:	f107 0314 	add.w	r3, r7, #20
 800140e:	4619      	mov	r1, r3
 8001410:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001414:	f003 f85c 	bl	80044d0 <HAL_GPIO_Init>

    /* DAC1 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8001418:	2200      	movs	r2, #0
 800141a:	2100      	movs	r1, #0
 800141c:	2036      	movs	r0, #54	; 0x36
 800141e:	f002 fa3e 	bl	800389e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001422:	2036      	movs	r0, #54	; 0x36
 8001424:	f002 fa55 	bl	80038d2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC1_MspInit 1 */
    /* DAC1 interrupt Init */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8001428:	2200      	movs	r2, #0
 800142a:	2100      	movs	r1, #0
 800142c:	2036      	movs	r0, #54	; 0x36
 800142e:	f002 fa36 	bl	800389e <HAL_NVIC_SetPriority>
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001432:	2036      	movs	r0, #54	; 0x36
 8001434:	f002 fa4d 	bl	80038d2 <HAL_NVIC_EnableIRQ>
  /* USER CODE END DAC1_MspInit 1 */
  }

}
 8001438:	bf00      	nop
 800143a:	3728      	adds	r7, #40	; 0x28
 800143c:	46bd      	mov	sp, r7
 800143e:	bd80      	pop	{r7, pc}
 8001440:	50000800 	.word	0x50000800
 8001444:	40021000 	.word	0x40021000

08001448 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	b088      	sub	sp, #32
 800144c:	af00      	add	r7, sp, #0
 800144e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001458:	d114      	bne.n	8001484 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800145a:	4b40      	ldr	r3, [pc, #256]	; (800155c <HAL_TIM_Base_MspInit+0x114>)
 800145c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800145e:	4a3f      	ldr	r2, [pc, #252]	; (800155c <HAL_TIM_Base_MspInit+0x114>)
 8001460:	f043 0301 	orr.w	r3, r3, #1
 8001464:	6593      	str	r3, [r2, #88]	; 0x58
 8001466:	4b3d      	ldr	r3, [pc, #244]	; (800155c <HAL_TIM_Base_MspInit+0x114>)
 8001468:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800146a:	f003 0301 	and.w	r3, r3, #1
 800146e:	61fb      	str	r3, [r7, #28]
 8001470:	69fb      	ldr	r3, [r7, #28]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001472:	2200      	movs	r2, #0
 8001474:	2100      	movs	r1, #0
 8001476:	201c      	movs	r0, #28
 8001478:	f002 fa11 	bl	800389e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800147c:	201c      	movs	r0, #28
 800147e:	f002 fa28 	bl	80038d2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8001482:	e066      	b.n	8001552 <HAL_TIM_Base_MspInit+0x10a>
  else if(htim_base->Instance==TIM5)
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	4a35      	ldr	r2, [pc, #212]	; (8001560 <HAL_TIM_Base_MspInit+0x118>)
 800148a:	4293      	cmp	r3, r2
 800148c:	d114      	bne.n	80014b8 <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800148e:	4b33      	ldr	r3, [pc, #204]	; (800155c <HAL_TIM_Base_MspInit+0x114>)
 8001490:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001492:	4a32      	ldr	r2, [pc, #200]	; (800155c <HAL_TIM_Base_MspInit+0x114>)
 8001494:	f043 0308 	orr.w	r3, r3, #8
 8001498:	6593      	str	r3, [r2, #88]	; 0x58
 800149a:	4b30      	ldr	r3, [pc, #192]	; (800155c <HAL_TIM_Base_MspInit+0x114>)
 800149c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800149e:	f003 0308 	and.w	r3, r3, #8
 80014a2:	61bb      	str	r3, [r7, #24]
 80014a4:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 80014a6:	2200      	movs	r2, #0
 80014a8:	2100      	movs	r1, #0
 80014aa:	2032      	movs	r0, #50	; 0x32
 80014ac:	f002 f9f7 	bl	800389e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 80014b0:	2032      	movs	r0, #50	; 0x32
 80014b2:	f002 fa0e 	bl	80038d2 <HAL_NVIC_EnableIRQ>
}
 80014b6:	e04c      	b.n	8001552 <HAL_TIM_Base_MspInit+0x10a>
  else if(htim_base->Instance==TIM6)
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	4a29      	ldr	r2, [pc, #164]	; (8001564 <HAL_TIM_Base_MspInit+0x11c>)
 80014be:	4293      	cmp	r3, r2
 80014c0:	d114      	bne.n	80014ec <HAL_TIM_Base_MspInit+0xa4>
    __HAL_RCC_TIM6_CLK_ENABLE();
 80014c2:	4b26      	ldr	r3, [pc, #152]	; (800155c <HAL_TIM_Base_MspInit+0x114>)
 80014c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014c6:	4a25      	ldr	r2, [pc, #148]	; (800155c <HAL_TIM_Base_MspInit+0x114>)
 80014c8:	f043 0310 	orr.w	r3, r3, #16
 80014cc:	6593      	str	r3, [r2, #88]	; 0x58
 80014ce:	4b23      	ldr	r3, [pc, #140]	; (800155c <HAL_TIM_Base_MspInit+0x114>)
 80014d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014d2:	f003 0310 	and.w	r3, r3, #16
 80014d6:	617b      	str	r3, [r7, #20]
 80014d8:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 80014da:	2200      	movs	r2, #0
 80014dc:	2100      	movs	r1, #0
 80014de:	2036      	movs	r0, #54	; 0x36
 80014e0:	f002 f9dd 	bl	800389e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80014e4:	2036      	movs	r0, #54	; 0x36
 80014e6:	f002 f9f4 	bl	80038d2 <HAL_NVIC_EnableIRQ>
}
 80014ea:	e032      	b.n	8001552 <HAL_TIM_Base_MspInit+0x10a>
  else if(htim_base->Instance==TIM7)
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	4a1d      	ldr	r2, [pc, #116]	; (8001568 <HAL_TIM_Base_MspInit+0x120>)
 80014f2:	4293      	cmp	r3, r2
 80014f4:	d114      	bne.n	8001520 <HAL_TIM_Base_MspInit+0xd8>
    __HAL_RCC_TIM7_CLK_ENABLE();
 80014f6:	4b19      	ldr	r3, [pc, #100]	; (800155c <HAL_TIM_Base_MspInit+0x114>)
 80014f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014fa:	4a18      	ldr	r2, [pc, #96]	; (800155c <HAL_TIM_Base_MspInit+0x114>)
 80014fc:	f043 0320 	orr.w	r3, r3, #32
 8001500:	6593      	str	r3, [r2, #88]	; 0x58
 8001502:	4b16      	ldr	r3, [pc, #88]	; (800155c <HAL_TIM_Base_MspInit+0x114>)
 8001504:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001506:	f003 0320 	and.w	r3, r3, #32
 800150a:	613b      	str	r3, [r7, #16]
 800150c:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM7_DAC_IRQn, 0, 0);
 800150e:	2200      	movs	r2, #0
 8001510:	2100      	movs	r1, #0
 8001512:	2037      	movs	r0, #55	; 0x37
 8001514:	f002 f9c3 	bl	800389e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_DAC_IRQn);
 8001518:	2037      	movs	r0, #55	; 0x37
 800151a:	f002 f9da 	bl	80038d2 <HAL_NVIC_EnableIRQ>
}
 800151e:	e018      	b.n	8001552 <HAL_TIM_Base_MspInit+0x10a>
  else if(htim_base->Instance==TIM8)
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	4a11      	ldr	r2, [pc, #68]	; (800156c <HAL_TIM_Base_MspInit+0x124>)
 8001526:	4293      	cmp	r3, r2
 8001528:	d113      	bne.n	8001552 <HAL_TIM_Base_MspInit+0x10a>
    __HAL_RCC_TIM8_CLK_ENABLE();
 800152a:	4b0c      	ldr	r3, [pc, #48]	; (800155c <HAL_TIM_Base_MspInit+0x114>)
 800152c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800152e:	4a0b      	ldr	r2, [pc, #44]	; (800155c <HAL_TIM_Base_MspInit+0x114>)
 8001530:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001534:	6613      	str	r3, [r2, #96]	; 0x60
 8001536:	4b09      	ldr	r3, [pc, #36]	; (800155c <HAL_TIM_Base_MspInit+0x114>)
 8001538:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800153a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800153e:	60fb      	str	r3, [r7, #12]
 8001540:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM8_UP_IRQn, 0, 0);
 8001542:	2200      	movs	r2, #0
 8001544:	2100      	movs	r1, #0
 8001546:	202c      	movs	r0, #44	; 0x2c
 8001548:	f002 f9a9 	bl	800389e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_IRQn);
 800154c:	202c      	movs	r0, #44	; 0x2c
 800154e:	f002 f9c0 	bl	80038d2 <HAL_NVIC_EnableIRQ>
}
 8001552:	bf00      	nop
 8001554:	3720      	adds	r7, #32
 8001556:	46bd      	mov	sp, r7
 8001558:	bd80      	pop	{r7, pc}
 800155a:	bf00      	nop
 800155c:	40021000 	.word	0x40021000
 8001560:	40000c00 	.word	0x40000c00
 8001564:	40001000 	.word	0x40001000
 8001568:	40001400 	.word	0x40001400
 800156c:	40013400 	.word	0x40013400

08001570 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	b08a      	sub	sp, #40	; 0x28
 8001574:	af00      	add	r7, sp, #0
 8001576:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001578:	f107 0314 	add.w	r3, r7, #20
 800157c:	2200      	movs	r2, #0
 800157e:	601a      	str	r2, [r3, #0]
 8001580:	605a      	str	r2, [r3, #4]
 8001582:	609a      	str	r2, [r3, #8]
 8001584:	60da      	str	r2, [r3, #12]
 8001586:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	4a2a      	ldr	r2, [pc, #168]	; (8001638 <HAL_UART_MspInit+0xc8>)
 800158e:	4293      	cmp	r3, r2
 8001590:	d14d      	bne.n	800162e <HAL_UART_MspInit+0xbe>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001592:	4b2a      	ldr	r3, [pc, #168]	; (800163c <HAL_UART_MspInit+0xcc>)
 8001594:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001596:	4a29      	ldr	r2, [pc, #164]	; (800163c <HAL_UART_MspInit+0xcc>)
 8001598:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800159c:	6613      	str	r3, [r2, #96]	; 0x60
 800159e:	4b27      	ldr	r3, [pc, #156]	; (800163c <HAL_UART_MspInit+0xcc>)
 80015a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80015a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80015a6:	613b      	str	r3, [r7, #16]
 80015a8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015aa:	4b24      	ldr	r3, [pc, #144]	; (800163c <HAL_UART_MspInit+0xcc>)
 80015ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015ae:	4a23      	ldr	r2, [pc, #140]	; (800163c <HAL_UART_MspInit+0xcc>)
 80015b0:	f043 0301 	orr.w	r3, r3, #1
 80015b4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80015b6:	4b21      	ldr	r3, [pc, #132]	; (800163c <HAL_UART_MspInit+0xcc>)
 80015b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015ba:	f003 0301 	and.w	r3, r3, #1
 80015be:	60fb      	str	r3, [r7, #12]
 80015c0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80015c2:	4b1e      	ldr	r3, [pc, #120]	; (800163c <HAL_UART_MspInit+0xcc>)
 80015c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015c6:	4a1d      	ldr	r2, [pc, #116]	; (800163c <HAL_UART_MspInit+0xcc>)
 80015c8:	f043 0302 	orr.w	r3, r3, #2
 80015cc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80015ce:	4b1b      	ldr	r3, [pc, #108]	; (800163c <HAL_UART_MspInit+0xcc>)
 80015d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015d2:	f003 0302 	and.w	r3, r3, #2
 80015d6:	60bb      	str	r3, [r7, #8]
 80015d8:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA10     ------> USART1_RX
    PB6     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80015da:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80015de:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015e0:	2302      	movs	r3, #2
 80015e2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015e4:	2300      	movs	r3, #0
 80015e6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015e8:	2300      	movs	r3, #0
 80015ea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80015ec:	2307      	movs	r3, #7
 80015ee:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015f0:	f107 0314 	add.w	r3, r7, #20
 80015f4:	4619      	mov	r1, r3
 80015f6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80015fa:	f002 ff69 	bl	80044d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80015fe:	2340      	movs	r3, #64	; 0x40
 8001600:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001602:	2302      	movs	r3, #2
 8001604:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001606:	2300      	movs	r3, #0
 8001608:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800160a:	2300      	movs	r3, #0
 800160c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800160e:	2307      	movs	r3, #7
 8001610:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001612:	f107 0314 	add.w	r3, r7, #20
 8001616:	4619      	mov	r1, r3
 8001618:	4809      	ldr	r0, [pc, #36]	; (8001640 <HAL_UART_MspInit+0xd0>)
 800161a:	f002 ff59 	bl	80044d0 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800161e:	2200      	movs	r2, #0
 8001620:	2100      	movs	r1, #0
 8001622:	2025      	movs	r0, #37	; 0x25
 8001624:	f002 f93b 	bl	800389e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001628:	2025      	movs	r0, #37	; 0x25
 800162a:	f002 f952 	bl	80038d2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800162e:	bf00      	nop
 8001630:	3728      	adds	r7, #40	; 0x28
 8001632:	46bd      	mov	sp, r7
 8001634:	bd80      	pop	{r7, pc}
 8001636:	bf00      	nop
 8001638:	40013800 	.word	0x40013800
 800163c:	40021000 	.word	0x40021000
 8001640:	48000400 	.word	0x48000400

08001644 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001644:	b480      	push	{r7}
 8001646:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001648:	e7fe      	b.n	8001648 <NMI_Handler+0x4>

0800164a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800164a:	b480      	push	{r7}
 800164c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800164e:	e7fe      	b.n	800164e <HardFault_Handler+0x4>

08001650 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001650:	b480      	push	{r7}
 8001652:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001654:	e7fe      	b.n	8001654 <MemManage_Handler+0x4>

08001656 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001656:	b480      	push	{r7}
 8001658:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800165a:	e7fe      	b.n	800165a <BusFault_Handler+0x4>

0800165c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800165c:	b480      	push	{r7}
 800165e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001660:	e7fe      	b.n	8001660 <UsageFault_Handler+0x4>

08001662 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001662:	b480      	push	{r7}
 8001664:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001666:	bf00      	nop
 8001668:	46bd      	mov	sp, r7
 800166a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166e:	4770      	bx	lr

08001670 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001670:	b480      	push	{r7}
 8001672:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001674:	bf00      	nop
 8001676:	46bd      	mov	sp, r7
 8001678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167c:	4770      	bx	lr

0800167e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800167e:	b480      	push	{r7}
 8001680:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001682:	bf00      	nop
 8001684:	46bd      	mov	sp, r7
 8001686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168a:	4770      	bx	lr

0800168c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001690:	f000 f8ee 	bl	8001870 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001694:	bf00      	nop
 8001696:	bd80      	pop	{r7, pc}

08001698 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800169c:	4802      	ldr	r0, [pc, #8]	; (80016a8 <DMA1_Channel1_IRQHandler+0x10>)
 800169e:	f002 fdc8 	bl	8004232 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80016a2:	bf00      	nop
 80016a4:	bd80      	pop	{r7, pc}
 80016a6:	bf00      	nop
 80016a8:	200006b8 	.word	0x200006b8

080016ac <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 80016b0:	4802      	ldr	r0, [pc, #8]	; (80016bc <DMA1_Channel3_IRQHandler+0x10>)
 80016b2:	f002 fdbe 	bl	8004232 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 80016b6:	bf00      	nop
 80016b8:	bd80      	pop	{r7, pc}
 80016ba:	bf00      	nop
 80016bc:	2000049c 	.word	0x2000049c

080016c0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80016c4:	4802      	ldr	r0, [pc, #8]	; (80016d0 <TIM2_IRQHandler+0x10>)
 80016c6:	f004 f9a1 	bl	8005a0c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80016ca:	bf00      	nop
 80016cc:	bd80      	pop	{r7, pc}
 80016ce:	bf00      	nop
 80016d0:	20000778 	.word	0x20000778

080016d4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80016d8:	4802      	ldr	r0, [pc, #8]	; (80016e4 <USART1_IRQHandler+0x10>)
 80016da:	f004 fefd 	bl	80064d8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80016de:	bf00      	nop
 80016e0:	bd80      	pop	{r7, pc}
 80016e2:	bf00      	nop
 80016e4:	20000624 	.word	0x20000624

080016e8 <TIM8_UP_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt.
  */
void TIM8_UP_IRQHandler(void)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_IRQn 0 */

  /* USER CODE END TIM8_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 80016ec:	4802      	ldr	r0, [pc, #8]	; (80016f8 <TIM8_UP_IRQHandler+0x10>)
 80016ee:	f004 f98d 	bl	8005a0c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_IRQn 1 */

  /* USER CODE END TIM8_UP_IRQn 1 */
}
 80016f2:	bf00      	nop
 80016f4:	bd80      	pop	{r7, pc}
 80016f6:	bf00      	nop
 80016f8:	2000043c 	.word	0x2000043c

080016fc <ADC3_IRQHandler>:

/**
  * @brief This function handles ADC3 global interrupt.
  */
void ADC3_IRQHandler(void)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC3_IRQn 0 */

  /* USER CODE END ADC3_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc3);
 8001700:	4802      	ldr	r0, [pc, #8]	; (800170c <ADC3_IRQHandler+0x10>)
 8001702:	f000 fdeb 	bl	80022dc <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC3_IRQn 1 */

  /* USER CODE END ADC3_IRQn 1 */
}
 8001706:	bf00      	nop
 8001708:	bd80      	pop	{r7, pc}
 800170a:	bf00      	nop
 800170c:	200005b8 	.word	0x200005b8

08001710 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8001714:	4802      	ldr	r0, [pc, #8]	; (8001720 <TIM5_IRQHandler+0x10>)
 8001716:	f004 f979 	bl	8005a0c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 800171a:	bf00      	nop
 800171c:	bd80      	pop	{r7, pc}
 800171e:	bf00      	nop
 8001720:	200004fc 	.word	0x200004fc

08001724 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC3 channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001728:	4803      	ldr	r0, [pc, #12]	; (8001738 <TIM6_DAC_IRQHandler+0x14>)
 800172a:	f004 f96f 	bl	8005a0c <HAL_TIM_IRQHandler>
  HAL_DAC_IRQHandler(&hdac1);
 800172e:	4803      	ldr	r0, [pc, #12]	; (800173c <TIM6_DAC_IRQHandler+0x18>)
 8001730:	f002 f95e 	bl	80039f0 <HAL_DAC_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001734:	bf00      	nop
 8001736:	bd80      	pop	{r7, pc}
 8001738:	2000072c 	.word	0x2000072c
 800173c:	20000488 	.word	0x20000488

08001740 <TIM7_DAC_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt, DAC2 and DAC4 channel underrun error interrupts.
  */
void TIM7_DAC_IRQHandler(void)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_DAC_IRQn 0 */

  /* USER CODE END TIM7_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8001744:	4802      	ldr	r0, [pc, #8]	; (8001750 <TIM7_DAC_IRQHandler+0x10>)
 8001746:	f004 f961 	bl	8005a0c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_DAC_IRQn 1 */

  /* USER CODE END TIM7_DAC_IRQn 1 */
}
 800174a:	bf00      	nop
 800174c:	bd80      	pop	{r7, pc}
 800174e:	bf00      	nop
 8001750:	200007dc 	.word	0x200007dc

08001754 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001754:	b480      	push	{r7}
 8001756:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001758:	4b06      	ldr	r3, [pc, #24]	; (8001774 <SystemInit+0x20>)
 800175a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800175e:	4a05      	ldr	r2, [pc, #20]	; (8001774 <SystemInit+0x20>)
 8001760:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001764:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001768:	bf00      	nop
 800176a:	46bd      	mov	sp, r7
 800176c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001770:	4770      	bx	lr
 8001772:	bf00      	nop
 8001774:	e000ed00 	.word	0xe000ed00

08001778 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001778:	480d      	ldr	r0, [pc, #52]	; (80017b0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800177a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800177c:	480d      	ldr	r0, [pc, #52]	; (80017b4 <LoopForever+0x6>)
  ldr r1, =_edata
 800177e:	490e      	ldr	r1, [pc, #56]	; (80017b8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001780:	4a0e      	ldr	r2, [pc, #56]	; (80017bc <LoopForever+0xe>)
  movs r3, #0
 8001782:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001784:	e002      	b.n	800178c <LoopCopyDataInit>

08001786 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001786:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001788:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800178a:	3304      	adds	r3, #4

0800178c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800178c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800178e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001790:	d3f9      	bcc.n	8001786 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001792:	4a0b      	ldr	r2, [pc, #44]	; (80017c0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001794:	4c0b      	ldr	r4, [pc, #44]	; (80017c4 <LoopForever+0x16>)
  movs r3, #0
 8001796:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001798:	e001      	b.n	800179e <LoopFillZerobss>

0800179a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800179a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800179c:	3204      	adds	r2, #4

0800179e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800179e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80017a0:	d3fb      	bcc.n	800179a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80017a2:	f7ff ffd7 	bl	8001754 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80017a6:	f006 fa41 	bl	8007c2c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80017aa:	f7fe feb1 	bl	8000510 <main>

080017ae <LoopForever>:

LoopForever:
    b LoopForever
 80017ae:	e7fe      	b.n	80017ae <LoopForever>
  ldr   r0, =_estack
 80017b0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80017b4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80017b8:	20000414 	.word	0x20000414
  ldr r2, =_sidata
 80017bc:	08007db8 	.word	0x08007db8
  ldr r2, =_sbss
 80017c0:	20000414 	.word	0x20000414
  ldr r4, =_ebss
 80017c4:	20000830 	.word	0x20000830

080017c8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80017c8:	e7fe      	b.n	80017c8 <ADC1_2_IRQHandler>

080017ca <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80017ca:	b580      	push	{r7, lr}
 80017cc:	b082      	sub	sp, #8
 80017ce:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80017d0:	2300      	movs	r3, #0
 80017d2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80017d4:	2003      	movs	r0, #3
 80017d6:	f002 f857 	bl	8003888 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80017da:	2000      	movs	r0, #0
 80017dc:	f000 f80e 	bl	80017fc <HAL_InitTick>
 80017e0:	4603      	mov	r3, r0
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d002      	beq.n	80017ec <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80017e6:	2301      	movs	r3, #1
 80017e8:	71fb      	strb	r3, [r7, #7]
 80017ea:	e001      	b.n	80017f0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80017ec:	f7ff fcea 	bl	80011c4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80017f0:	79fb      	ldrb	r3, [r7, #7]

}
 80017f2:	4618      	mov	r0, r3
 80017f4:	3708      	adds	r7, #8
 80017f6:	46bd      	mov	sp, r7
 80017f8:	bd80      	pop	{r7, pc}
	...

080017fc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	b084      	sub	sp, #16
 8001800:	af00      	add	r7, sp, #0
 8001802:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001804:	2300      	movs	r3, #0
 8001806:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001808:	4b16      	ldr	r3, [pc, #88]	; (8001864 <HAL_InitTick+0x68>)
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	2b00      	cmp	r3, #0
 800180e:	d022      	beq.n	8001856 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001810:	4b15      	ldr	r3, [pc, #84]	; (8001868 <HAL_InitTick+0x6c>)
 8001812:	681a      	ldr	r2, [r3, #0]
 8001814:	4b13      	ldr	r3, [pc, #76]	; (8001864 <HAL_InitTick+0x68>)
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800181c:	fbb1 f3f3 	udiv	r3, r1, r3
 8001820:	fbb2 f3f3 	udiv	r3, r2, r3
 8001824:	4618      	mov	r0, r3
 8001826:	f002 f862 	bl	80038ee <HAL_SYSTICK_Config>
 800182a:	4603      	mov	r3, r0
 800182c:	2b00      	cmp	r3, #0
 800182e:	d10f      	bne.n	8001850 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	2b0f      	cmp	r3, #15
 8001834:	d809      	bhi.n	800184a <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001836:	2200      	movs	r2, #0
 8001838:	6879      	ldr	r1, [r7, #4]
 800183a:	f04f 30ff 	mov.w	r0, #4294967295
 800183e:	f002 f82e 	bl	800389e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001842:	4a0a      	ldr	r2, [pc, #40]	; (800186c <HAL_InitTick+0x70>)
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	6013      	str	r3, [r2, #0]
 8001848:	e007      	b.n	800185a <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800184a:	2301      	movs	r3, #1
 800184c:	73fb      	strb	r3, [r7, #15]
 800184e:	e004      	b.n	800185a <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001850:	2301      	movs	r3, #1
 8001852:	73fb      	strb	r3, [r7, #15]
 8001854:	e001      	b.n	800185a <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001856:	2301      	movs	r3, #1
 8001858:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800185a:	7bfb      	ldrb	r3, [r7, #15]
}
 800185c:	4618      	mov	r0, r3
 800185e:	3710      	adds	r7, #16
 8001860:	46bd      	mov	sp, r7
 8001862:	bd80      	pop	{r7, pc}
 8001864:	20000410 	.word	0x20000410
 8001868:	20000408 	.word	0x20000408
 800186c:	2000040c 	.word	0x2000040c

08001870 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001870:	b480      	push	{r7}
 8001872:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001874:	4b05      	ldr	r3, [pc, #20]	; (800188c <HAL_IncTick+0x1c>)
 8001876:	681a      	ldr	r2, [r3, #0]
 8001878:	4b05      	ldr	r3, [pc, #20]	; (8001890 <HAL_IncTick+0x20>)
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	4413      	add	r3, r2
 800187e:	4a03      	ldr	r2, [pc, #12]	; (800188c <HAL_IncTick+0x1c>)
 8001880:	6013      	str	r3, [r2, #0]
}
 8001882:	bf00      	nop
 8001884:	46bd      	mov	sp, r7
 8001886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188a:	4770      	bx	lr
 800188c:	2000082c 	.word	0x2000082c
 8001890:	20000410 	.word	0x20000410

08001894 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001894:	b480      	push	{r7}
 8001896:	af00      	add	r7, sp, #0
  return uwTick;
 8001898:	4b03      	ldr	r3, [pc, #12]	; (80018a8 <HAL_GetTick+0x14>)
 800189a:	681b      	ldr	r3, [r3, #0]
}
 800189c:	4618      	mov	r0, r3
 800189e:	46bd      	mov	sp, r7
 80018a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a4:	4770      	bx	lr
 80018a6:	bf00      	nop
 80018a8:	2000082c 	.word	0x2000082c

080018ac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	b084      	sub	sp, #16
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80018b4:	f7ff ffee 	bl	8001894 <HAL_GetTick>
 80018b8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80018c4:	d004      	beq.n	80018d0 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 80018c6:	4b09      	ldr	r3, [pc, #36]	; (80018ec <HAL_Delay+0x40>)
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	68fa      	ldr	r2, [r7, #12]
 80018cc:	4413      	add	r3, r2
 80018ce:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80018d0:	bf00      	nop
 80018d2:	f7ff ffdf 	bl	8001894 <HAL_GetTick>
 80018d6:	4602      	mov	r2, r0
 80018d8:	68bb      	ldr	r3, [r7, #8]
 80018da:	1ad3      	subs	r3, r2, r3
 80018dc:	68fa      	ldr	r2, [r7, #12]
 80018de:	429a      	cmp	r2, r3
 80018e0:	d8f7      	bhi.n	80018d2 <HAL_Delay+0x26>
  {
  }
}
 80018e2:	bf00      	nop
 80018e4:	bf00      	nop
 80018e6:	3710      	adds	r7, #16
 80018e8:	46bd      	mov	sp, r7
 80018ea:	bd80      	pop	{r7, pc}
 80018ec:	20000410 	.word	0x20000410

080018f0 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80018f0:	b480      	push	{r7}
 80018f2:	b083      	sub	sp, #12
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	6078      	str	r0, [r7, #4]
 80018f8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	689b      	ldr	r3, [r3, #8]
 80018fe:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001902:	683b      	ldr	r3, [r7, #0]
 8001904:	431a      	orrs	r2, r3
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	609a      	str	r2, [r3, #8]
}
 800190a:	bf00      	nop
 800190c:	370c      	adds	r7, #12
 800190e:	46bd      	mov	sp, r7
 8001910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001914:	4770      	bx	lr

08001916 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001916:	b480      	push	{r7}
 8001918:	b083      	sub	sp, #12
 800191a:	af00      	add	r7, sp, #0
 800191c:	6078      	str	r0, [r7, #4]
 800191e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	689b      	ldr	r3, [r3, #8]
 8001924:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001928:	683b      	ldr	r3, [r7, #0]
 800192a:	431a      	orrs	r2, r3
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	609a      	str	r2, [r3, #8]
}
 8001930:	bf00      	nop
 8001932:	370c      	adds	r7, #12
 8001934:	46bd      	mov	sp, r7
 8001936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193a:	4770      	bx	lr

0800193c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800193c:	b480      	push	{r7}
 800193e:	b083      	sub	sp, #12
 8001940:	af00      	add	r7, sp, #0
 8001942:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	689b      	ldr	r3, [r3, #8]
 8001948:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 800194c:	4618      	mov	r0, r3
 800194e:	370c      	adds	r7, #12
 8001950:	46bd      	mov	sp, r7
 8001952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001956:	4770      	bx	lr

08001958 <LL_ADC_SetOffset>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001958:	b480      	push	{r7}
 800195a:	b087      	sub	sp, #28
 800195c:	af00      	add	r7, sp, #0
 800195e:	60f8      	str	r0, [r7, #12]
 8001960:	60b9      	str	r1, [r7, #8]
 8001962:	607a      	str	r2, [r7, #4]
 8001964:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	3360      	adds	r3, #96	; 0x60
 800196a:	461a      	mov	r2, r3
 800196c:	68bb      	ldr	r3, [r7, #8]
 800196e:	009b      	lsls	r3, r3, #2
 8001970:	4413      	add	r3, r2
 8001972:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001974:	697b      	ldr	r3, [r7, #20]
 8001976:	681a      	ldr	r2, [r3, #0]
 8001978:	4b08      	ldr	r3, [pc, #32]	; (800199c <LL_ADC_SetOffset+0x44>)
 800197a:	4013      	ands	r3, r2
 800197c:	687a      	ldr	r2, [r7, #4]
 800197e:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8001982:	683a      	ldr	r2, [r7, #0]
 8001984:	430a      	orrs	r2, r1
 8001986:	4313      	orrs	r3, r2
 8001988:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800198c:	697b      	ldr	r3, [r7, #20]
 800198e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001990:	bf00      	nop
 8001992:	371c      	adds	r7, #28
 8001994:	46bd      	mov	sp, r7
 8001996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199a:	4770      	bx	lr
 800199c:	03fff000 	.word	0x03fff000

080019a0 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80019a0:	b480      	push	{r7}
 80019a2:	b085      	sub	sp, #20
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	6078      	str	r0, [r7, #4]
 80019a8:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	3360      	adds	r3, #96	; 0x60
 80019ae:	461a      	mov	r2, r3
 80019b0:	683b      	ldr	r3, [r7, #0]
 80019b2:	009b      	lsls	r3, r3, #2
 80019b4:	4413      	add	r3, r2
 80019b6:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 80019c0:	4618      	mov	r0, r3
 80019c2:	3714      	adds	r7, #20
 80019c4:	46bd      	mov	sp, r7
 80019c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ca:	4770      	bx	lr

080019cc <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80019cc:	b480      	push	{r7}
 80019ce:	b087      	sub	sp, #28
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	60f8      	str	r0, [r7, #12]
 80019d4:	60b9      	str	r1, [r7, #8]
 80019d6:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	3360      	adds	r3, #96	; 0x60
 80019dc:	461a      	mov	r2, r3
 80019de:	68bb      	ldr	r3, [r7, #8]
 80019e0:	009b      	lsls	r3, r3, #2
 80019e2:	4413      	add	r3, r2
 80019e4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80019e6:	697b      	ldr	r3, [r7, #20]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	431a      	orrs	r2, r3
 80019f2:	697b      	ldr	r3, [r7, #20]
 80019f4:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80019f6:	bf00      	nop
 80019f8:	371c      	adds	r7, #28
 80019fa:	46bd      	mov	sp, r7
 80019fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a00:	4770      	bx	lr

08001a02 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8001a02:	b480      	push	{r7}
 8001a04:	b087      	sub	sp, #28
 8001a06:	af00      	add	r7, sp, #0
 8001a08:	60f8      	str	r0, [r7, #12]
 8001a0a:	60b9      	str	r1, [r7, #8]
 8001a0c:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	3360      	adds	r3, #96	; 0x60
 8001a12:	461a      	mov	r2, r3
 8001a14:	68bb      	ldr	r3, [r7, #8]
 8001a16:	009b      	lsls	r3, r3, #2
 8001a18:	4413      	add	r3, r2
 8001a1a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001a1c:	697b      	ldr	r3, [r7, #20]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	431a      	orrs	r2, r3
 8001a28:	697b      	ldr	r3, [r7, #20]
 8001a2a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8001a2c:	bf00      	nop
 8001a2e:	371c      	adds	r7, #28
 8001a30:	46bd      	mov	sp, r7
 8001a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a36:	4770      	bx	lr

08001a38 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8001a38:	b480      	push	{r7}
 8001a3a:	b087      	sub	sp, #28
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	60f8      	str	r0, [r7, #12]
 8001a40:	60b9      	str	r1, [r7, #8]
 8001a42:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	3360      	adds	r3, #96	; 0x60
 8001a48:	461a      	mov	r2, r3
 8001a4a:	68bb      	ldr	r3, [r7, #8]
 8001a4c:	009b      	lsls	r3, r3, #2
 8001a4e:	4413      	add	r3, r2
 8001a50:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001a52:	697b      	ldr	r3, [r7, #20]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	431a      	orrs	r2, r3
 8001a5e:	697b      	ldr	r3, [r7, #20]
 8001a60:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8001a62:	bf00      	nop
 8001a64:	371c      	adds	r7, #28
 8001a66:	46bd      	mov	sp, r7
 8001a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6c:	4770      	bx	lr

08001a6e <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8001a6e:	b480      	push	{r7}
 8001a70:	b083      	sub	sp, #12
 8001a72:	af00      	add	r7, sp, #0
 8001a74:	6078      	str	r0, [r7, #4]
 8001a76:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	695b      	ldr	r3, [r3, #20]
 8001a7c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001a80:	683b      	ldr	r3, [r7, #0]
 8001a82:	431a      	orrs	r2, r3
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	615a      	str	r2, [r3, #20]
}
 8001a88:	bf00      	nop
 8001a8a:	370c      	adds	r7, #12
 8001a8c:	46bd      	mov	sp, r7
 8001a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a92:	4770      	bx	lr

08001a94 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8001a94:	b480      	push	{r7}
 8001a96:	b083      	sub	sp, #12
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	68db      	ldr	r3, [r3, #12]
 8001aa0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d101      	bne.n	8001aac <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001aa8:	2301      	movs	r3, #1
 8001aaa:	e000      	b.n	8001aae <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001aac:	2300      	movs	r3, #0
}
 8001aae:	4618      	mov	r0, r3
 8001ab0:	370c      	adds	r7, #12
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab8:	4770      	bx	lr

08001aba <LL_ADC_REG_SetSequencerRanks>:
  *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock cycles (fADC) to convert in 12-bit resolution.
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001aba:	b480      	push	{r7}
 8001abc:	b087      	sub	sp, #28
 8001abe:	af00      	add	r7, sp, #0
 8001ac0:	60f8      	str	r0, [r7, #12]
 8001ac2:	60b9      	str	r1, [r7, #8]
 8001ac4:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	3330      	adds	r3, #48	; 0x30
 8001aca:	461a      	mov	r2, r3
 8001acc:	68bb      	ldr	r3, [r7, #8]
 8001ace:	0a1b      	lsrs	r3, r3, #8
 8001ad0:	009b      	lsls	r3, r3, #2
 8001ad2:	f003 030c 	and.w	r3, r3, #12
 8001ad6:	4413      	add	r3, r2
 8001ad8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001ada:	697b      	ldr	r3, [r7, #20]
 8001adc:	681a      	ldr	r2, [r3, #0]
 8001ade:	68bb      	ldr	r3, [r7, #8]
 8001ae0:	f003 031f 	and.w	r3, r3, #31
 8001ae4:	211f      	movs	r1, #31
 8001ae6:	fa01 f303 	lsl.w	r3, r1, r3
 8001aea:	43db      	mvns	r3, r3
 8001aec:	401a      	ands	r2, r3
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	0e9b      	lsrs	r3, r3, #26
 8001af2:	f003 011f 	and.w	r1, r3, #31
 8001af6:	68bb      	ldr	r3, [r7, #8]
 8001af8:	f003 031f 	and.w	r3, r3, #31
 8001afc:	fa01 f303 	lsl.w	r3, r1, r3
 8001b00:	431a      	orrs	r2, r3
 8001b02:	697b      	ldr	r3, [r7, #20]
 8001b04:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001b06:	bf00      	nop
 8001b08:	371c      	adds	r7, #28
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b10:	4770      	bx	lr

08001b12 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8001b12:	b480      	push	{r7}
 8001b14:	b083      	sub	sp, #12
 8001b16:	af00      	add	r7, sp, #0
 8001b18:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b1e:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d101      	bne.n	8001b2a <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8001b26:	2301      	movs	r3, #1
 8001b28:	e000      	b.n	8001b2c <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8001b2a:	2300      	movs	r3, #0
}
 8001b2c:	4618      	mov	r0, r3
 8001b2e:	370c      	adds	r7, #12
 8001b30:	46bd      	mov	sp, r7
 8001b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b36:	4770      	bx	lr

08001b38 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001b38:	b480      	push	{r7}
 8001b3a:	b087      	sub	sp, #28
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	60f8      	str	r0, [r7, #12]
 8001b40:	60b9      	str	r1, [r7, #8]
 8001b42:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	3314      	adds	r3, #20
 8001b48:	461a      	mov	r2, r3
 8001b4a:	68bb      	ldr	r3, [r7, #8]
 8001b4c:	0e5b      	lsrs	r3, r3, #25
 8001b4e:	009b      	lsls	r3, r3, #2
 8001b50:	f003 0304 	and.w	r3, r3, #4
 8001b54:	4413      	add	r3, r2
 8001b56:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001b58:	697b      	ldr	r3, [r7, #20]
 8001b5a:	681a      	ldr	r2, [r3, #0]
 8001b5c:	68bb      	ldr	r3, [r7, #8]
 8001b5e:	0d1b      	lsrs	r3, r3, #20
 8001b60:	f003 031f 	and.w	r3, r3, #31
 8001b64:	2107      	movs	r1, #7
 8001b66:	fa01 f303 	lsl.w	r3, r1, r3
 8001b6a:	43db      	mvns	r3, r3
 8001b6c:	401a      	ands	r2, r3
 8001b6e:	68bb      	ldr	r3, [r7, #8]
 8001b70:	0d1b      	lsrs	r3, r3, #20
 8001b72:	f003 031f 	and.w	r3, r3, #31
 8001b76:	6879      	ldr	r1, [r7, #4]
 8001b78:	fa01 f303 	lsl.w	r3, r1, r3
 8001b7c:	431a      	orrs	r2, r3
 8001b7e:	697b      	ldr	r3, [r7, #20]
 8001b80:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001b82:	bf00      	nop
 8001b84:	371c      	adds	r7, #28
 8001b86:	46bd      	mov	sp, r7
 8001b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8c:	4770      	bx	lr
	...

08001b90 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001b90:	b480      	push	{r7}
 8001b92:	b085      	sub	sp, #20
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	60f8      	str	r0, [r7, #12]
 8001b98:	60b9      	str	r1, [r7, #8]
 8001b9a:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001ba2:	68bb      	ldr	r3, [r7, #8]
 8001ba4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ba8:	43db      	mvns	r3, r3
 8001baa:	401a      	ands	r2, r3
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	f003 0318 	and.w	r3, r3, #24
 8001bb2:	4908      	ldr	r1, [pc, #32]	; (8001bd4 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001bb4:	40d9      	lsrs	r1, r3
 8001bb6:	68bb      	ldr	r3, [r7, #8]
 8001bb8:	400b      	ands	r3, r1
 8001bba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001bbe:	431a      	orrs	r2, r3
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001bc6:	bf00      	nop
 8001bc8:	3714      	adds	r7, #20
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd0:	4770      	bx	lr
 8001bd2:	bf00      	nop
 8001bd4:	0007ffff 	.word	0x0007ffff

08001bd8 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001bd8:	b480      	push	{r7}
 8001bda:	b083      	sub	sp, #12
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	689b      	ldr	r3, [r3, #8]
 8001be4:	f003 031f 	and.w	r3, r3, #31
}
 8001be8:	4618      	mov	r0, r3
 8001bea:	370c      	adds	r7, #12
 8001bec:	46bd      	mov	sp, r7
 8001bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf2:	4770      	bx	lr

08001bf4 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001bf4:	b480      	push	{r7}
 8001bf6:	b083      	sub	sp, #12
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	689b      	ldr	r3, [r3, #8]
 8001c00:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 8001c04:	4618      	mov	r0, r3
 8001c06:	370c      	adds	r7, #12
 8001c08:	46bd      	mov	sp, r7
 8001c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0e:	4770      	bx	lr

08001c10 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001c10:	b480      	push	{r7}
 8001c12:	b083      	sub	sp, #12
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	689b      	ldr	r3, [r3, #8]
 8001c1c:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8001c20:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001c24:	687a      	ldr	r2, [r7, #4]
 8001c26:	6093      	str	r3, [r2, #8]
}
 8001c28:	bf00      	nop
 8001c2a:	370c      	adds	r7, #12
 8001c2c:	46bd      	mov	sp, r7
 8001c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c32:	4770      	bx	lr

08001c34 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001c34:	b480      	push	{r7}
 8001c36:	b083      	sub	sp, #12
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	689b      	ldr	r3, [r3, #8]
 8001c40:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001c44:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001c48:	d101      	bne.n	8001c4e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001c4a:	2301      	movs	r3, #1
 8001c4c:	e000      	b.n	8001c50 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001c4e:	2300      	movs	r3, #0
}
 8001c50:	4618      	mov	r0, r3
 8001c52:	370c      	adds	r7, #12
 8001c54:	46bd      	mov	sp, r7
 8001c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5a:	4770      	bx	lr

08001c5c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001c5c:	b480      	push	{r7}
 8001c5e:	b083      	sub	sp, #12
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	689b      	ldr	r3, [r3, #8]
 8001c68:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8001c6c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001c70:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001c78:	bf00      	nop
 8001c7a:	370c      	adds	r7, #12
 8001c7c:	46bd      	mov	sp, r7
 8001c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c82:	4770      	bx	lr

08001c84 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001c84:	b480      	push	{r7}
 8001c86:	b083      	sub	sp, #12
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	689b      	ldr	r3, [r3, #8]
 8001c90:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c94:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001c98:	d101      	bne.n	8001c9e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001c9a:	2301      	movs	r3, #1
 8001c9c:	e000      	b.n	8001ca0 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001c9e:	2300      	movs	r3, #0
}
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	370c      	adds	r7, #12
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001caa:	4770      	bx	lr

08001cac <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001cac:	b480      	push	{r7}
 8001cae:	b083      	sub	sp, #12
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	689b      	ldr	r3, [r3, #8]
 8001cb8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001cbc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001cc0:	f043 0201 	orr.w	r2, r3, #1
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001cc8:	bf00      	nop
 8001cca:	370c      	adds	r7, #12
 8001ccc:	46bd      	mov	sp, r7
 8001cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd2:	4770      	bx	lr

08001cd4 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8001cd4:	b480      	push	{r7}
 8001cd6:	b083      	sub	sp, #12
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	689b      	ldr	r3, [r3, #8]
 8001ce0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001ce4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001ce8:	f043 0202 	orr.w	r2, r3, #2
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8001cf0:	bf00      	nop
 8001cf2:	370c      	adds	r7, #12
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfa:	4770      	bx	lr

08001cfc <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001cfc:	b480      	push	{r7}
 8001cfe:	b083      	sub	sp, #12
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	689b      	ldr	r3, [r3, #8]
 8001d08:	f003 0301 	and.w	r3, r3, #1
 8001d0c:	2b01      	cmp	r3, #1
 8001d0e:	d101      	bne.n	8001d14 <LL_ADC_IsEnabled+0x18>
 8001d10:	2301      	movs	r3, #1
 8001d12:	e000      	b.n	8001d16 <LL_ADC_IsEnabled+0x1a>
 8001d14:	2300      	movs	r3, #0
}
 8001d16:	4618      	mov	r0, r3
 8001d18:	370c      	adds	r7, #12
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d20:	4770      	bx	lr

08001d22 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8001d22:	b480      	push	{r7}
 8001d24:	b083      	sub	sp, #12
 8001d26:	af00      	add	r7, sp, #0
 8001d28:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	689b      	ldr	r3, [r3, #8]
 8001d2e:	f003 0302 	and.w	r3, r3, #2
 8001d32:	2b02      	cmp	r3, #2
 8001d34:	d101      	bne.n	8001d3a <LL_ADC_IsDisableOngoing+0x18>
 8001d36:	2301      	movs	r3, #1
 8001d38:	e000      	b.n	8001d3c <LL_ADC_IsDisableOngoing+0x1a>
 8001d3a:	2300      	movs	r3, #0
}
 8001d3c:	4618      	mov	r0, r3
 8001d3e:	370c      	adds	r7, #12
 8001d40:	46bd      	mov	sp, r7
 8001d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d46:	4770      	bx	lr

08001d48 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001d48:	b480      	push	{r7}
 8001d4a:	b083      	sub	sp, #12
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	689b      	ldr	r3, [r3, #8]
 8001d54:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001d58:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001d5c:	f043 0204 	orr.w	r2, r3, #4
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001d64:	bf00      	nop
 8001d66:	370c      	adds	r7, #12
 8001d68:	46bd      	mov	sp, r7
 8001d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6e:	4770      	bx	lr

08001d70 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001d70:	b480      	push	{r7}
 8001d72:	b083      	sub	sp, #12
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	689b      	ldr	r3, [r3, #8]
 8001d7c:	f003 0304 	and.w	r3, r3, #4
 8001d80:	2b04      	cmp	r3, #4
 8001d82:	d101      	bne.n	8001d88 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001d84:	2301      	movs	r3, #1
 8001d86:	e000      	b.n	8001d8a <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001d88:	2300      	movs	r3, #0
}
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	370c      	adds	r7, #12
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d94:	4770      	bx	lr

08001d96 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001d96:	b480      	push	{r7}
 8001d98:	b083      	sub	sp, #12
 8001d9a:	af00      	add	r7, sp, #0
 8001d9c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	689b      	ldr	r3, [r3, #8]
 8001da2:	f003 0308 	and.w	r3, r3, #8
 8001da6:	2b08      	cmp	r3, #8
 8001da8:	d101      	bne.n	8001dae <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001daa:	2301      	movs	r3, #1
 8001dac:	e000      	b.n	8001db0 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001dae:	2300      	movs	r3, #0
}
 8001db0:	4618      	mov	r0, r3
 8001db2:	370c      	adds	r7, #12
 8001db4:	46bd      	mov	sp, r7
 8001db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dba:	4770      	bx	lr

08001dbc <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001dbc:	b590      	push	{r4, r7, lr}
 8001dbe:	b089      	sub	sp, #36	; 0x24
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001dc4:	2300      	movs	r3, #0
 8001dc6:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001dc8:	2300      	movs	r3, #0
 8001dca:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d101      	bne.n	8001dd6 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001dd2:	2301      	movs	r3, #1
 8001dd4:	e1af      	b.n	8002136 <HAL_ADC_Init+0x37a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	695b      	ldr	r3, [r3, #20]
 8001dda:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d109      	bne.n	8001df8 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001de4:	6878      	ldr	r0, [r7, #4]
 8001de6:	f7ff fa11 	bl	800120c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	2200      	movs	r2, #0
 8001dee:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	2200      	movs	r2, #0
 8001df4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	4618      	mov	r0, r3
 8001dfe:	f7ff ff19 	bl	8001c34 <LL_ADC_IsDeepPowerDownEnabled>
 8001e02:	4603      	mov	r3, r0
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d004      	beq.n	8001e12 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	4618      	mov	r0, r3
 8001e0e:	f7ff feff 	bl	8001c10 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	4618      	mov	r0, r3
 8001e18:	f7ff ff34 	bl	8001c84 <LL_ADC_IsInternalRegulatorEnabled>
 8001e1c:	4603      	mov	r3, r0
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d115      	bne.n	8001e4e <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	4618      	mov	r0, r3
 8001e28:	f7ff ff18 	bl	8001c5c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001e2c:	4b9f      	ldr	r3, [pc, #636]	; (80020ac <HAL_ADC_Init+0x2f0>)
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	099b      	lsrs	r3, r3, #6
 8001e32:	4a9f      	ldr	r2, [pc, #636]	; (80020b0 <HAL_ADC_Init+0x2f4>)
 8001e34:	fba2 2303 	umull	r2, r3, r2, r3
 8001e38:	099b      	lsrs	r3, r3, #6
 8001e3a:	3301      	adds	r3, #1
 8001e3c:	005b      	lsls	r3, r3, #1
 8001e3e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001e40:	e002      	b.n	8001e48 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001e42:	68bb      	ldr	r3, [r7, #8]
 8001e44:	3b01      	subs	r3, #1
 8001e46:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001e48:	68bb      	ldr	r3, [r7, #8]
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d1f9      	bne.n	8001e42 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	4618      	mov	r0, r3
 8001e54:	f7ff ff16 	bl	8001c84 <LL_ADC_IsInternalRegulatorEnabled>
 8001e58:	4603      	mov	r3, r0
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d10d      	bne.n	8001e7a <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e62:	f043 0210 	orr.w	r2, r3, #16
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e6e:	f043 0201 	orr.w	r2, r3, #1
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8001e76:	2301      	movs	r3, #1
 8001e78:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	4618      	mov	r0, r3
 8001e80:	f7ff ff76 	bl	8001d70 <LL_ADC_REG_IsConversionOngoing>
 8001e84:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e8a:	f003 0310 	and.w	r3, r3, #16
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	f040 8148 	bne.w	8002124 <HAL_ADC_Init+0x368>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001e94:	697b      	ldr	r3, [r7, #20]
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	f040 8144 	bne.w	8002124 <HAL_ADC_Init+0x368>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ea0:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001ea4:	f043 0202 	orr.w	r2, r3, #2
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	4618      	mov	r0, r3
 8001eb2:	f7ff ff23 	bl	8001cfc <LL_ADC_IsEnabled>
 8001eb6:	4603      	mov	r3, r0
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d141      	bne.n	8001f40 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001ec4:	d004      	beq.n	8001ed0 <HAL_ADC_Init+0x114>
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	4a7a      	ldr	r2, [pc, #488]	; (80020b4 <HAL_ADC_Init+0x2f8>)
 8001ecc:	4293      	cmp	r3, r2
 8001ece:	d10f      	bne.n	8001ef0 <HAL_ADC_Init+0x134>
 8001ed0:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8001ed4:	f7ff ff12 	bl	8001cfc <LL_ADC_IsEnabled>
 8001ed8:	4604      	mov	r4, r0
 8001eda:	4876      	ldr	r0, [pc, #472]	; (80020b4 <HAL_ADC_Init+0x2f8>)
 8001edc:	f7ff ff0e 	bl	8001cfc <LL_ADC_IsEnabled>
 8001ee0:	4603      	mov	r3, r0
 8001ee2:	4323      	orrs	r3, r4
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	bf0c      	ite	eq
 8001ee8:	2301      	moveq	r3, #1
 8001eea:	2300      	movne	r3, #0
 8001eec:	b2db      	uxtb	r3, r3
 8001eee:	e012      	b.n	8001f16 <HAL_ADC_Init+0x15a>
 8001ef0:	4871      	ldr	r0, [pc, #452]	; (80020b8 <HAL_ADC_Init+0x2fc>)
 8001ef2:	f7ff ff03 	bl	8001cfc <LL_ADC_IsEnabled>
 8001ef6:	4604      	mov	r4, r0
 8001ef8:	4870      	ldr	r0, [pc, #448]	; (80020bc <HAL_ADC_Init+0x300>)
 8001efa:	f7ff feff 	bl	8001cfc <LL_ADC_IsEnabled>
 8001efe:	4603      	mov	r3, r0
 8001f00:	431c      	orrs	r4, r3
 8001f02:	486f      	ldr	r0, [pc, #444]	; (80020c0 <HAL_ADC_Init+0x304>)
 8001f04:	f7ff fefa 	bl	8001cfc <LL_ADC_IsEnabled>
 8001f08:	4603      	mov	r3, r0
 8001f0a:	4323      	orrs	r3, r4
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	bf0c      	ite	eq
 8001f10:	2301      	moveq	r3, #1
 8001f12:	2300      	movne	r3, #0
 8001f14:	b2db      	uxtb	r3, r3
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d012      	beq.n	8001f40 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001f22:	d004      	beq.n	8001f2e <HAL_ADC_Init+0x172>
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	4a62      	ldr	r2, [pc, #392]	; (80020b4 <HAL_ADC_Init+0x2f8>)
 8001f2a:	4293      	cmp	r3, r2
 8001f2c:	d101      	bne.n	8001f32 <HAL_ADC_Init+0x176>
 8001f2e:	4a65      	ldr	r2, [pc, #404]	; (80020c4 <HAL_ADC_Init+0x308>)
 8001f30:	e000      	b.n	8001f34 <HAL_ADC_Init+0x178>
 8001f32:	4a65      	ldr	r2, [pc, #404]	; (80020c8 <HAL_ADC_Init+0x30c>)
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	685b      	ldr	r3, [r3, #4]
 8001f38:	4619      	mov	r1, r3
 8001f3a:	4610      	mov	r0, r2
 8001f3c:	f7ff fcd8 	bl	80018f0 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	7f5b      	ldrb	r3, [r3, #29]
 8001f44:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001f4a:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8001f50:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8001f56:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001f5e:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001f60:	4313      	orrs	r3, r2
 8001f62:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001f6a:	2b01      	cmp	r3, #1
 8001f6c:	d106      	bne.n	8001f7c <HAL_ADC_Init+0x1c0>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f72:	3b01      	subs	r3, #1
 8001f74:	045b      	lsls	r3, r3, #17
 8001f76:	69ba      	ldr	r2, [r7, #24]
 8001f78:	4313      	orrs	r3, r2
 8001f7a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d009      	beq.n	8001f98 <HAL_ADC_Init+0x1dc>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f88:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f90:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001f92:	69ba      	ldr	r2, [r7, #24]
 8001f94:	4313      	orrs	r3, r2
 8001f96:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	68da      	ldr	r2, [r3, #12]
 8001f9e:	4b4b      	ldr	r3, [pc, #300]	; (80020cc <HAL_ADC_Init+0x310>)
 8001fa0:	4013      	ands	r3, r2
 8001fa2:	687a      	ldr	r2, [r7, #4]
 8001fa4:	6812      	ldr	r2, [r2, #0]
 8001fa6:	69b9      	ldr	r1, [r7, #24]
 8001fa8:	430b      	orrs	r3, r1
 8001faa:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	691b      	ldr	r3, [r3, #16]
 8001fb2:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	430a      	orrs	r2, r1
 8001fc0:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	4618      	mov	r0, r3
 8001fc8:	f7ff fed2 	bl	8001d70 <LL_ADC_REG_IsConversionOngoing>
 8001fcc:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	4618      	mov	r0, r3
 8001fd4:	f7ff fedf 	bl	8001d96 <LL_ADC_INJ_IsConversionOngoing>
 8001fd8:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001fda:	693b      	ldr	r3, [r7, #16]
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d17f      	bne.n	80020e0 <HAL_ADC_Init+0x324>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d17c      	bne.n	80020e0 <HAL_ADC_Init+0x324>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	7f1b      	ldrb	r3, [r3, #28]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001fea:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001ff2:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001ff4:	4313      	orrs	r3, r2
 8001ff6:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	68db      	ldr	r3, [r3, #12]
 8001ffe:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002002:	f023 0302 	bic.w	r3, r3, #2
 8002006:	687a      	ldr	r2, [r7, #4]
 8002008:	6812      	ldr	r2, [r2, #0]
 800200a:	69b9      	ldr	r1, [r7, #24]
 800200c:	430b      	orrs	r3, r1
 800200e:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	691b      	ldr	r3, [r3, #16]
 8002014:	2b00      	cmp	r3, #0
 8002016:	d017      	beq.n	8002048 <HAL_ADC_Init+0x28c>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	691a      	ldr	r2, [r3, #16]
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8002026:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8002030:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002034:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002038:	687a      	ldr	r2, [r7, #4]
 800203a:	6911      	ldr	r1, [r2, #16]
 800203c:	687a      	ldr	r2, [r7, #4]
 800203e:	6812      	ldr	r2, [r2, #0]
 8002040:	430b      	orrs	r3, r1
 8002042:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 8002046:	e013      	b.n	8002070 <HAL_ADC_Init+0x2b4>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	691a      	ldr	r2, [r3, #16]
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002056:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8002060:	687a      	ldr	r2, [r7, #4]
 8002062:	6812      	ldr	r2, [r2, #0]
 8002064:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002068:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800206c:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002076:	2b01      	cmp	r3, #1
 8002078:	d12a      	bne.n	80020d0 <HAL_ADC_Init+0x314>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	691b      	ldr	r3, [r3, #16]
 8002080:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8002084:	f023 0304 	bic.w	r3, r3, #4
 8002088:	687a      	ldr	r2, [r7, #4]
 800208a:	6c51      	ldr	r1, [r2, #68]	; 0x44
 800208c:	687a      	ldr	r2, [r7, #4]
 800208e:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002090:	4311      	orrs	r1, r2
 8002092:	687a      	ldr	r2, [r7, #4]
 8002094:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8002096:	4311      	orrs	r1, r2
 8002098:	687a      	ldr	r2, [r7, #4]
 800209a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800209c:	430a      	orrs	r2, r1
 800209e:	431a      	orrs	r2, r3
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	f042 0201 	orr.w	r2, r2, #1
 80020a8:	611a      	str	r2, [r3, #16]
 80020aa:	e019      	b.n	80020e0 <HAL_ADC_Init+0x324>
 80020ac:	20000408 	.word	0x20000408
 80020b0:	053e2d63 	.word	0x053e2d63
 80020b4:	50000100 	.word	0x50000100
 80020b8:	50000400 	.word	0x50000400
 80020bc:	50000500 	.word	0x50000500
 80020c0:	50000600 	.word	0x50000600
 80020c4:	50000300 	.word	0x50000300
 80020c8:	50000700 	.word	0x50000700
 80020cc:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	691a      	ldr	r2, [r3, #16]
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	f022 0201 	bic.w	r2, r2, #1
 80020de:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	695b      	ldr	r3, [r3, #20]
 80020e4:	2b01      	cmp	r3, #1
 80020e6:	d10c      	bne.n	8002102 <HAL_ADC_Init+0x346>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020ee:	f023 010f 	bic.w	r1, r3, #15
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	6a1b      	ldr	r3, [r3, #32]
 80020f6:	1e5a      	subs	r2, r3, #1
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	430a      	orrs	r2, r1
 80020fe:	631a      	str	r2, [r3, #48]	; 0x30
 8002100:	e007      	b.n	8002112 <HAL_ADC_Init+0x356>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	f022 020f 	bic.w	r2, r2, #15
 8002110:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002116:	f023 0303 	bic.w	r3, r3, #3
 800211a:	f043 0201 	orr.w	r2, r3, #1
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	65da      	str	r2, [r3, #92]	; 0x5c
 8002122:	e007      	b.n	8002134 <HAL_ADC_Init+0x378>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002128:	f043 0210 	orr.w	r2, r3, #16
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002130:	2301      	movs	r3, #1
 8002132:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002134:	7ffb      	ldrb	r3, [r7, #31]
}
 8002136:	4618      	mov	r0, r3
 8002138:	3724      	adds	r7, #36	; 0x24
 800213a:	46bd      	mov	sp, r7
 800213c:	bd90      	pop	{r4, r7, pc}
 800213e:	bf00      	nop

08002140 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8002140:	b580      	push	{r7, lr}
 8002142:	b086      	sub	sp, #24
 8002144:	af00      	add	r7, sp, #0
 8002146:	60f8      	str	r0, [r7, #12]
 8002148:	60b9      	str	r1, [r7, #8]
 800214a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002154:	d004      	beq.n	8002160 <HAL_ADC_Start_DMA+0x20>
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	4a58      	ldr	r2, [pc, #352]	; (80022bc <HAL_ADC_Start_DMA+0x17c>)
 800215c:	4293      	cmp	r3, r2
 800215e:	d101      	bne.n	8002164 <HAL_ADC_Start_DMA+0x24>
 8002160:	4b57      	ldr	r3, [pc, #348]	; (80022c0 <HAL_ADC_Start_DMA+0x180>)
 8002162:	e000      	b.n	8002166 <HAL_ADC_Start_DMA+0x26>
 8002164:	4b57      	ldr	r3, [pc, #348]	; (80022c4 <HAL_ADC_Start_DMA+0x184>)
 8002166:	4618      	mov	r0, r3
 8002168:	f7ff fd36 	bl	8001bd8 <LL_ADC_GetMultimode>
 800216c:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	4618      	mov	r0, r3
 8002174:	f7ff fdfc 	bl	8001d70 <LL_ADC_REG_IsConversionOngoing>
 8002178:	4603      	mov	r3, r0
 800217a:	2b00      	cmp	r3, #0
 800217c:	f040 8096 	bne.w	80022ac <HAL_ADC_Start_DMA+0x16c>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8002186:	2b01      	cmp	r3, #1
 8002188:	d101      	bne.n	800218e <HAL_ADC_Start_DMA+0x4e>
 800218a:	2302      	movs	r3, #2
 800218c:	e091      	b.n	80022b2 <HAL_ADC_Start_DMA+0x172>
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	2201      	movs	r2, #1
 8002192:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002196:	693b      	ldr	r3, [r7, #16]
 8002198:	2b00      	cmp	r3, #0
 800219a:	d005      	beq.n	80021a8 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800219c:	693b      	ldr	r3, [r7, #16]
 800219e:	2b05      	cmp	r3, #5
 80021a0:	d002      	beq.n	80021a8 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80021a2:	693b      	ldr	r3, [r7, #16]
 80021a4:	2b09      	cmp	r3, #9
 80021a6:	d17a      	bne.n	800229e <HAL_ADC_Start_DMA+0x15e>
       )
#endif
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 80021a8:	68f8      	ldr	r0, [r7, #12]
 80021aa:	f000 ff59 	bl	8003060 <ADC_Enable>
 80021ae:	4603      	mov	r3, r0
 80021b0:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 80021b2:	7dfb      	ldrb	r3, [r7, #23]
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d16d      	bne.n	8002294 <HAL_ADC_Start_DMA+0x154>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021bc:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80021c0:	f023 0301 	bic.w	r3, r3, #1
 80021c4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	4a3a      	ldr	r2, [pc, #232]	; (80022bc <HAL_ADC_Start_DMA+0x17c>)
 80021d2:	4293      	cmp	r3, r2
 80021d4:	d009      	beq.n	80021ea <HAL_ADC_Start_DMA+0xaa>
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	4a3b      	ldr	r2, [pc, #236]	; (80022c8 <HAL_ADC_Start_DMA+0x188>)
 80021dc:	4293      	cmp	r3, r2
 80021de:	d002      	beq.n	80021e6 <HAL_ADC_Start_DMA+0xa6>
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	e003      	b.n	80021ee <HAL_ADC_Start_DMA+0xae>
 80021e6:	4b39      	ldr	r3, [pc, #228]	; (80022cc <HAL_ADC_Start_DMA+0x18c>)
 80021e8:	e001      	b.n	80021ee <HAL_ADC_Start_DMA+0xae>
 80021ea:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80021ee:	68fa      	ldr	r2, [r7, #12]
 80021f0:	6812      	ldr	r2, [r2, #0]
 80021f2:	4293      	cmp	r3, r2
 80021f4:	d002      	beq.n	80021fc <HAL_ADC_Start_DMA+0xbc>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80021f6:	693b      	ldr	r3, [r7, #16]
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d105      	bne.n	8002208 <HAL_ADC_Start_DMA+0xc8>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002200:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	65da      	str	r2, [r3, #92]	; 0x5c
        }
#endif

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800220c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002210:	2b00      	cmp	r3, #0
 8002212:	d006      	beq.n	8002222 <HAL_ADC_Start_DMA+0xe2>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002218:	f023 0206 	bic.w	r2, r3, #6
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	661a      	str	r2, [r3, #96]	; 0x60
 8002220:	e002      	b.n	8002228 <HAL_ADC_Start_DMA+0xe8>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	2200      	movs	r2, #0
 8002226:	661a      	str	r2, [r3, #96]	; 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800222c:	4a28      	ldr	r2, [pc, #160]	; (80022d0 <HAL_ADC_Start_DMA+0x190>)
 800222e:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002234:	4a27      	ldr	r2, [pc, #156]	; (80022d4 <HAL_ADC_Start_DMA+0x194>)
 8002236:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800223c:	4a26      	ldr	r2, [pc, #152]	; (80022d8 <HAL_ADC_Start_DMA+0x198>)
 800223e:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	221c      	movs	r2, #28
 8002246:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	2200      	movs	r2, #0
 800224c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	685a      	ldr	r2, [r3, #4]
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	f042 0210 	orr.w	r2, r2, #16
 800225e:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	68da      	ldr	r2, [r3, #12]
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	f042 0201 	orr.w	r2, r2, #1
 800226e:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	6d58      	ldr	r0, [r3, #84]	; 0x54
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	3340      	adds	r3, #64	; 0x40
 800227a:	4619      	mov	r1, r3
 800227c:	68ba      	ldr	r2, [r7, #8]
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	f001 fe9c 	bl	8003fbc <HAL_DMA_Start_IT>
 8002284:	4603      	mov	r3, r0
 8002286:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	4618      	mov	r0, r3
 800228e:	f7ff fd5b 	bl	8001d48 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8002292:	e00d      	b.n	80022b0 <HAL_ADC_Start_DMA+0x170>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	2200      	movs	r2, #0
 8002298:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
      if (tmp_hal_status == HAL_OK)
 800229c:	e008      	b.n	80022b0 <HAL_ADC_Start_DMA+0x170>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 800229e:	2301      	movs	r3, #1
 80022a0:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	2200      	movs	r2, #0
 80022a6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 80022aa:	e001      	b.n	80022b0 <HAL_ADC_Start_DMA+0x170>
    }
#endif
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80022ac:	2302      	movs	r3, #2
 80022ae:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80022b0:	7dfb      	ldrb	r3, [r7, #23]
}
 80022b2:	4618      	mov	r0, r3
 80022b4:	3718      	adds	r7, #24
 80022b6:	46bd      	mov	sp, r7
 80022b8:	bd80      	pop	{r7, pc}
 80022ba:	bf00      	nop
 80022bc:	50000100 	.word	0x50000100
 80022c0:	50000300 	.word	0x50000300
 80022c4:	50000700 	.word	0x50000700
 80022c8:	50000500 	.word	0x50000500
 80022cc:	50000400 	.word	0x50000400
 80022d0:	080031e3 	.word	0x080031e3
 80022d4:	080032bb 	.word	0x080032bb
 80022d8:	080032d7 	.word	0x080032d7

080022dc <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 80022dc:	b580      	push	{r7, lr}
 80022de:	b08a      	sub	sp, #40	; 0x28
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 80022e4:	2300      	movs	r3, #0
 80022e6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	685b      	ldr	r3, [r3, #4]
 80022f6:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002300:	d004      	beq.n	800230c <HAL_ADC_IRQHandler+0x30>
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	4a95      	ldr	r2, [pc, #596]	; (800255c <HAL_ADC_IRQHandler+0x280>)
 8002308:	4293      	cmp	r3, r2
 800230a:	d101      	bne.n	8002310 <HAL_ADC_IRQHandler+0x34>
 800230c:	4b94      	ldr	r3, [pc, #592]	; (8002560 <HAL_ADC_IRQHandler+0x284>)
 800230e:	e000      	b.n	8002312 <HAL_ADC_IRQHandler+0x36>
 8002310:	4b94      	ldr	r3, [pc, #592]	; (8002564 <HAL_ADC_IRQHandler+0x288>)
 8002312:	4618      	mov	r0, r3
 8002314:	f7ff fc60 	bl	8001bd8 <LL_ADC_GetMultimode>
 8002318:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 800231a:	69fb      	ldr	r3, [r7, #28]
 800231c:	f003 0302 	and.w	r3, r3, #2
 8002320:	2b00      	cmp	r3, #0
 8002322:	d017      	beq.n	8002354 <HAL_ADC_IRQHandler+0x78>
 8002324:	69bb      	ldr	r3, [r7, #24]
 8002326:	f003 0302 	and.w	r3, r3, #2
 800232a:	2b00      	cmp	r3, #0
 800232c:	d012      	beq.n	8002354 <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002332:	f003 0310 	and.w	r3, r3, #16
 8002336:	2b00      	cmp	r3, #0
 8002338:	d105      	bne.n	8002346 <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800233e:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	65da      	str	r2, [r3, #92]	; 0x5c

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8002346:	6878      	ldr	r0, [r7, #4]
 8002348:	f001 f8bc 	bl	80034c4 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	2202      	movs	r2, #2
 8002352:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8002354:	69fb      	ldr	r3, [r7, #28]
 8002356:	f003 0304 	and.w	r3, r3, #4
 800235a:	2b00      	cmp	r3, #0
 800235c:	d004      	beq.n	8002368 <HAL_ADC_IRQHandler+0x8c>
 800235e:	69bb      	ldr	r3, [r7, #24]
 8002360:	f003 0304 	and.w	r3, r3, #4
 8002364:	2b00      	cmp	r3, #0
 8002366:	d10b      	bne.n	8002380 <HAL_ADC_IRQHandler+0xa4>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8002368:	69fb      	ldr	r3, [r7, #28]
 800236a:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 800236e:	2b00      	cmp	r3, #0
 8002370:	f000 8094 	beq.w	800249c <HAL_ADC_IRQHandler+0x1c0>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8002374:	69bb      	ldr	r3, [r7, #24]
 8002376:	f003 0308 	and.w	r3, r3, #8
 800237a:	2b00      	cmp	r3, #0
 800237c:	f000 808e 	beq.w	800249c <HAL_ADC_IRQHandler+0x1c0>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002384:	f003 0310 	and.w	r3, r3, #16
 8002388:	2b00      	cmp	r3, #0
 800238a:	d105      	bne.n	8002398 <HAL_ADC_IRQHandler+0xbc>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002390:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	4618      	mov	r0, r3
 800239e:	f7ff fb79 	bl	8001a94 <LL_ADC_REG_IsTriggerSourceSWStart>
 80023a2:	4603      	mov	r3, r0
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d072      	beq.n	800248e <HAL_ADC_IRQHandler+0x1b2>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	4a6b      	ldr	r2, [pc, #428]	; (800255c <HAL_ADC_IRQHandler+0x280>)
 80023ae:	4293      	cmp	r3, r2
 80023b0:	d009      	beq.n	80023c6 <HAL_ADC_IRQHandler+0xea>
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	4a6c      	ldr	r2, [pc, #432]	; (8002568 <HAL_ADC_IRQHandler+0x28c>)
 80023b8:	4293      	cmp	r3, r2
 80023ba:	d002      	beq.n	80023c2 <HAL_ADC_IRQHandler+0xe6>
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	e003      	b.n	80023ca <HAL_ADC_IRQHandler+0xee>
 80023c2:	4b6a      	ldr	r3, [pc, #424]	; (800256c <HAL_ADC_IRQHandler+0x290>)
 80023c4:	e001      	b.n	80023ca <HAL_ADC_IRQHandler+0xee>
 80023c6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80023ca:	687a      	ldr	r2, [r7, #4]
 80023cc:	6812      	ldr	r2, [r2, #0]
 80023ce:	4293      	cmp	r3, r2
 80023d0:	d008      	beq.n	80023e4 <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80023d2:	697b      	ldr	r3, [r7, #20]
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d005      	beq.n	80023e4 <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80023d8:	697b      	ldr	r3, [r7, #20]
 80023da:	2b05      	cmp	r3, #5
 80023dc:	d002      	beq.n	80023e4 <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80023de:	697b      	ldr	r3, [r7, #20]
 80023e0:	2b09      	cmp	r3, #9
 80023e2:	d104      	bne.n	80023ee <HAL_ADC_IRQHandler+0x112>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	68db      	ldr	r3, [r3, #12]
 80023ea:	623b      	str	r3, [r7, #32]
 80023ec:	e014      	b.n	8002418 <HAL_ADC_IRQHandler+0x13c>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	4a5a      	ldr	r2, [pc, #360]	; (800255c <HAL_ADC_IRQHandler+0x280>)
 80023f4:	4293      	cmp	r3, r2
 80023f6:	d009      	beq.n	800240c <HAL_ADC_IRQHandler+0x130>
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	4a5a      	ldr	r2, [pc, #360]	; (8002568 <HAL_ADC_IRQHandler+0x28c>)
 80023fe:	4293      	cmp	r3, r2
 8002400:	d002      	beq.n	8002408 <HAL_ADC_IRQHandler+0x12c>
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	e003      	b.n	8002410 <HAL_ADC_IRQHandler+0x134>
 8002408:	4b58      	ldr	r3, [pc, #352]	; (800256c <HAL_ADC_IRQHandler+0x290>)
 800240a:	e001      	b.n	8002410 <HAL_ADC_IRQHandler+0x134>
 800240c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002410:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8002412:	693b      	ldr	r3, [r7, #16]
 8002414:	68db      	ldr	r3, [r3, #12]
 8002416:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8002418:	6a3b      	ldr	r3, [r7, #32]
 800241a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800241e:	2b00      	cmp	r3, #0
 8002420:	d135      	bne.n	800248e <HAL_ADC_IRQHandler+0x1b2>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	f003 0308 	and.w	r3, r3, #8
 800242c:	2b08      	cmp	r3, #8
 800242e:	d12e      	bne.n	800248e <HAL_ADC_IRQHandler+0x1b2>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	4618      	mov	r0, r3
 8002436:	f7ff fc9b 	bl	8001d70 <LL_ADC_REG_IsConversionOngoing>
 800243a:	4603      	mov	r3, r0
 800243c:	2b00      	cmp	r3, #0
 800243e:	d11a      	bne.n	8002476 <HAL_ADC_IRQHandler+0x19a>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	685a      	ldr	r2, [r3, #4]
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f022 020c 	bic.w	r2, r2, #12
 800244e:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002454:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	65da      	str	r2, [r3, #92]	; 0x5c

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002460:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002464:	2b00      	cmp	r3, #0
 8002466:	d112      	bne.n	800248e <HAL_ADC_IRQHandler+0x1b2>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800246c:	f043 0201 	orr.w	r2, r3, #1
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	65da      	str	r2, [r3, #92]	; 0x5c
 8002474:	e00b      	b.n	800248e <HAL_ADC_IRQHandler+0x1b2>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800247a:	f043 0210 	orr.w	r2, r3, #16
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	65da      	str	r2, [r3, #92]	; 0x5c

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002486:	f043 0201 	orr.w	r2, r3, #1
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	661a      	str	r2, [r3, #96]	; 0x60
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800248e:	6878      	ldr	r0, [r7, #4]
 8002490:	f000 f97e 	bl	8002790 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	220c      	movs	r2, #12
 800249a:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 800249c:	69fb      	ldr	r3, [r7, #28]
 800249e:	f003 0320 	and.w	r3, r3, #32
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d004      	beq.n	80024b0 <HAL_ADC_IRQHandler+0x1d4>
 80024a6:	69bb      	ldr	r3, [r7, #24]
 80024a8:	f003 0320 	and.w	r3, r3, #32
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d10b      	bne.n	80024c8 <HAL_ADC_IRQHandler+0x1ec>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 80024b0:	69fb      	ldr	r3, [r7, #28]
 80024b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	f000 80b2 	beq.w	8002620 <HAL_ADC_IRQHandler+0x344>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 80024bc:	69bb      	ldr	r3, [r7, #24]
 80024be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	f000 80ac 	beq.w	8002620 <HAL_ADC_IRQHandler+0x344>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024cc:	f003 0310 	and.w	r3, r3, #16
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d105      	bne.n	80024e0 <HAL_ADC_IRQHandler+0x204>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024d8:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	4618      	mov	r0, r3
 80024e6:	f7ff fb14 	bl	8001b12 <LL_ADC_INJ_IsTriggerSourceSWStart>
 80024ea:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	4618      	mov	r0, r3
 80024f2:	f7ff facf 	bl	8001a94 <LL_ADC_REG_IsTriggerSourceSWStart>
 80024f6:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	4a17      	ldr	r2, [pc, #92]	; (800255c <HAL_ADC_IRQHandler+0x280>)
 80024fe:	4293      	cmp	r3, r2
 8002500:	d009      	beq.n	8002516 <HAL_ADC_IRQHandler+0x23a>
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	4a18      	ldr	r2, [pc, #96]	; (8002568 <HAL_ADC_IRQHandler+0x28c>)
 8002508:	4293      	cmp	r3, r2
 800250a:	d002      	beq.n	8002512 <HAL_ADC_IRQHandler+0x236>
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	e003      	b.n	800251a <HAL_ADC_IRQHandler+0x23e>
 8002512:	4b16      	ldr	r3, [pc, #88]	; (800256c <HAL_ADC_IRQHandler+0x290>)
 8002514:	e001      	b.n	800251a <HAL_ADC_IRQHandler+0x23e>
 8002516:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800251a:	687a      	ldr	r2, [r7, #4]
 800251c:	6812      	ldr	r2, [r2, #0]
 800251e:	4293      	cmp	r3, r2
 8002520:	d008      	beq.n	8002534 <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002522:	697b      	ldr	r3, [r7, #20]
 8002524:	2b00      	cmp	r3, #0
 8002526:	d005      	beq.n	8002534 <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8002528:	697b      	ldr	r3, [r7, #20]
 800252a:	2b06      	cmp	r3, #6
 800252c:	d002      	beq.n	8002534 <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 800252e:	697b      	ldr	r3, [r7, #20]
 8002530:	2b07      	cmp	r3, #7
 8002532:	d104      	bne.n	800253e <HAL_ADC_IRQHandler+0x262>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	68db      	ldr	r3, [r3, #12]
 800253a:	623b      	str	r3, [r7, #32]
 800253c:	e01e      	b.n	800257c <HAL_ADC_IRQHandler+0x2a0>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	4a06      	ldr	r2, [pc, #24]	; (800255c <HAL_ADC_IRQHandler+0x280>)
 8002544:	4293      	cmp	r3, r2
 8002546:	d013      	beq.n	8002570 <HAL_ADC_IRQHandler+0x294>
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	4a06      	ldr	r2, [pc, #24]	; (8002568 <HAL_ADC_IRQHandler+0x28c>)
 800254e:	4293      	cmp	r3, r2
 8002550:	d002      	beq.n	8002558 <HAL_ADC_IRQHandler+0x27c>
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	e00d      	b.n	8002574 <HAL_ADC_IRQHandler+0x298>
 8002558:	4b04      	ldr	r3, [pc, #16]	; (800256c <HAL_ADC_IRQHandler+0x290>)
 800255a:	e00b      	b.n	8002574 <HAL_ADC_IRQHandler+0x298>
 800255c:	50000100 	.word	0x50000100
 8002560:	50000300 	.word	0x50000300
 8002564:	50000700 	.word	0x50000700
 8002568:	50000500 	.word	0x50000500
 800256c:	50000400 	.word	0x50000400
 8002570:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002574:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8002576:	693b      	ldr	r3, [r7, #16]
 8002578:	68db      	ldr	r3, [r3, #12]
 800257a:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	2b00      	cmp	r3, #0
 8002580:	d047      	beq.n	8002612 <HAL_ADC_IRQHandler+0x336>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8002582:	6a3b      	ldr	r3, [r7, #32]
 8002584:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002588:	2b00      	cmp	r3, #0
 800258a:	d007      	beq.n	800259c <HAL_ADC_IRQHandler+0x2c0>
 800258c:	68bb      	ldr	r3, [r7, #8]
 800258e:	2b00      	cmp	r3, #0
 8002590:	d03f      	beq.n	8002612 <HAL_ADC_IRQHandler+0x336>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8002592:	6a3b      	ldr	r3, [r7, #32]
 8002594:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8002598:	2b00      	cmp	r3, #0
 800259a:	d13a      	bne.n	8002612 <HAL_ADC_IRQHandler+0x336>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025a6:	2b40      	cmp	r3, #64	; 0x40
 80025a8:	d133      	bne.n	8002612 <HAL_ADC_IRQHandler+0x336>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 80025aa:	6a3b      	ldr	r3, [r7, #32]
 80025ac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d12e      	bne.n	8002612 <HAL_ADC_IRQHandler+0x336>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	4618      	mov	r0, r3
 80025ba:	f7ff fbec 	bl	8001d96 <LL_ADC_INJ_IsConversionOngoing>
 80025be:	4603      	mov	r3, r0
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d11a      	bne.n	80025fa <HAL_ADC_IRQHandler+0x31e>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	685a      	ldr	r2, [r3, #4]
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80025d2:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025d8:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	65da      	str	r2, [r3, #92]	; 0x5c

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d112      	bne.n	8002612 <HAL_ADC_IRQHandler+0x336>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025f0:	f043 0201 	orr.w	r2, r3, #1
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	65da      	str	r2, [r3, #92]	; 0x5c
 80025f8:	e00b      	b.n	8002612 <HAL_ADC_IRQHandler+0x336>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025fe:	f043 0210 	orr.w	r2, r3, #16
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	65da      	str	r2, [r3, #92]	; 0x5c

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800260a:	f043 0201 	orr.w	r2, r3, #1
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	661a      	str	r2, [r3, #96]	; 0x60
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002612:	6878      	ldr	r0, [r7, #4]
 8002614:	f000 ff2e 	bl	8003474 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	2260      	movs	r2, #96	; 0x60
 800261e:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8002620:	69fb      	ldr	r3, [r7, #28]
 8002622:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002626:	2b00      	cmp	r3, #0
 8002628:	d011      	beq.n	800264e <HAL_ADC_IRQHandler+0x372>
 800262a:	69bb      	ldr	r3, [r7, #24]
 800262c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002630:	2b00      	cmp	r3, #0
 8002632:	d00c      	beq.n	800264e <HAL_ADC_IRQHandler+0x372>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002638:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002640:	6878      	ldr	r0, [r7, #4]
 8002642:	f000 f8b9 	bl	80027b8 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	2280      	movs	r2, #128	; 0x80
 800264c:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 800264e:	69fb      	ldr	r3, [r7, #28]
 8002650:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002654:	2b00      	cmp	r3, #0
 8002656:	d012      	beq.n	800267e <HAL_ADC_IRQHandler+0x3a2>
 8002658:	69bb      	ldr	r3, [r7, #24]
 800265a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800265e:	2b00      	cmp	r3, #0
 8002660:	d00d      	beq.n	800267e <HAL_ADC_IRQHandler+0x3a2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002666:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 800266e:	6878      	ldr	r0, [r7, #4]
 8002670:	f000 ff14 	bl	800349c <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	f44f 7280 	mov.w	r2, #256	; 0x100
 800267c:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 800267e:	69fb      	ldr	r3, [r7, #28]
 8002680:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002684:	2b00      	cmp	r3, #0
 8002686:	d012      	beq.n	80026ae <HAL_ADC_IRQHandler+0x3d2>
 8002688:	69bb      	ldr	r3, [r7, #24]
 800268a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800268e:	2b00      	cmp	r3, #0
 8002690:	d00d      	beq.n	80026ae <HAL_ADC_IRQHandler+0x3d2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002696:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 800269e:	6878      	ldr	r0, [r7, #4]
 80026a0:	f000 ff06 	bl	80034b0 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80026ac:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 80026ae:	69fb      	ldr	r3, [r7, #28]
 80026b0:	f003 0310 	and.w	r3, r3, #16
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d043      	beq.n	8002740 <HAL_ADC_IRQHandler+0x464>
 80026b8:	69bb      	ldr	r3, [r7, #24]
 80026ba:	f003 0310 	and.w	r3, r3, #16
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d03e      	beq.n	8002740 <HAL_ADC_IRQHandler+0x464>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d102      	bne.n	80026d0 <HAL_ADC_IRQHandler+0x3f4>
    {
      overrun_error = 1UL;
 80026ca:	2301      	movs	r3, #1
 80026cc:	627b      	str	r3, [r7, #36]	; 0x24
 80026ce:	e021      	b.n	8002714 <HAL_ADC_IRQHandler+0x438>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 80026d0:	697b      	ldr	r3, [r7, #20]
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d015      	beq.n	8002702 <HAL_ADC_IRQHandler+0x426>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80026de:	d004      	beq.n	80026ea <HAL_ADC_IRQHandler+0x40e>
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	4a27      	ldr	r2, [pc, #156]	; (8002784 <HAL_ADC_IRQHandler+0x4a8>)
 80026e6:	4293      	cmp	r3, r2
 80026e8:	d101      	bne.n	80026ee <HAL_ADC_IRQHandler+0x412>
 80026ea:	4b27      	ldr	r3, [pc, #156]	; (8002788 <HAL_ADC_IRQHandler+0x4ac>)
 80026ec:	e000      	b.n	80026f0 <HAL_ADC_IRQHandler+0x414>
 80026ee:	4b27      	ldr	r3, [pc, #156]	; (800278c <HAL_ADC_IRQHandler+0x4b0>)
 80026f0:	4618      	mov	r0, r3
 80026f2:	f7ff fa7f 	bl	8001bf4 <LL_ADC_GetMultiDMATransfer>
 80026f6:	4603      	mov	r3, r0
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d00b      	beq.n	8002714 <HAL_ADC_IRQHandler+0x438>
        {
          overrun_error = 1UL;
 80026fc:	2301      	movs	r3, #1
 80026fe:	627b      	str	r3, [r7, #36]	; 0x24
 8002700:	e008      	b.n	8002714 <HAL_ADC_IRQHandler+0x438>
      }
      else
#endif
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	68db      	ldr	r3, [r3, #12]
 8002708:	f003 0301 	and.w	r3, r3, #1
 800270c:	2b00      	cmp	r3, #0
 800270e:	d001      	beq.n	8002714 <HAL_ADC_IRQHandler+0x438>
        {
          overrun_error = 1UL;
 8002710:	2301      	movs	r3, #1
 8002712:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8002714:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002716:	2b01      	cmp	r3, #1
 8002718:	d10e      	bne.n	8002738 <HAL_ADC_IRQHandler+0x45c>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800271e:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800272a:	f043 0202 	orr.w	r2, r3, #2
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	661a      	str	r2, [r3, #96]	; 0x60
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8002732:	6878      	ldr	r0, [r7, #4]
 8002734:	f000 f84a 	bl	80027cc <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	2210      	movs	r2, #16
 800273e:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8002740:	69fb      	ldr	r3, [r7, #28]
 8002742:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002746:	2b00      	cmp	r3, #0
 8002748:	d018      	beq.n	800277c <HAL_ADC_IRQHandler+0x4a0>
 800274a:	69bb      	ldr	r3, [r7, #24]
 800274c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002750:	2b00      	cmp	r3, #0
 8002752:	d013      	beq.n	800277c <HAL_ADC_IRQHandler+0x4a0>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002758:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002764:	f043 0208 	orr.w	r2, r3, #8
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	661a      	str	r2, [r3, #96]	; 0x60

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002774:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8002776:	6878      	ldr	r0, [r7, #4]
 8002778:	f000 fe86 	bl	8003488 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 800277c:	bf00      	nop
 800277e:	3728      	adds	r7, #40	; 0x28
 8002780:	46bd      	mov	sp, r7
 8002782:	bd80      	pop	{r7, pc}
 8002784:	50000100 	.word	0x50000100
 8002788:	50000300 	.word	0x50000300
 800278c:	50000700 	.word	0x50000700

08002790 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002790:	b480      	push	{r7}
 8002792:	b083      	sub	sp, #12
 8002794:	af00      	add	r7, sp, #0
 8002796:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8002798:	bf00      	nop
 800279a:	370c      	adds	r7, #12
 800279c:	46bd      	mov	sp, r7
 800279e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a2:	4770      	bx	lr

080027a4 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80027a4:	b480      	push	{r7}
 80027a6:	b083      	sub	sp, #12
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80027ac:	bf00      	nop
 80027ae:	370c      	adds	r7, #12
 80027b0:	46bd      	mov	sp, r7
 80027b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b6:	4770      	bx	lr

080027b8 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 80027b8:	b480      	push	{r7}
 80027ba:	b083      	sub	sp, #12
 80027bc:	af00      	add	r7, sp, #0
 80027be:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 80027c0:	bf00      	nop
 80027c2:	370c      	adds	r7, #12
 80027c4:	46bd      	mov	sp, r7
 80027c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ca:	4770      	bx	lr

080027cc <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80027cc:	b480      	push	{r7}
 80027ce:	b083      	sub	sp, #12
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80027d4:	bf00      	nop
 80027d6:	370c      	adds	r7, #12
 80027d8:	46bd      	mov	sp, r7
 80027da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027de:	4770      	bx	lr

080027e0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80027e0:	b580      	push	{r7, lr}
 80027e2:	b0b6      	sub	sp, #216	; 0xd8
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	6078      	str	r0, [r7, #4]
 80027e8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80027ea:	2300      	movs	r3, #0
 80027ec:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80027f0:	2300      	movs	r3, #0
 80027f2:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80027fa:	2b01      	cmp	r3, #1
 80027fc:	d102      	bne.n	8002804 <HAL_ADC_ConfigChannel+0x24>
 80027fe:	2302      	movs	r3, #2
 8002800:	f000 bc13 	b.w	800302a <HAL_ADC_ConfigChannel+0x84a>
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	2201      	movs	r2, #1
 8002808:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	4618      	mov	r0, r3
 8002812:	f7ff faad 	bl	8001d70 <LL_ADC_REG_IsConversionOngoing>
 8002816:	4603      	mov	r3, r0
 8002818:	2b00      	cmp	r3, #0
 800281a:	f040 83f3 	bne.w	8003004 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	6818      	ldr	r0, [r3, #0]
 8002822:	683b      	ldr	r3, [r7, #0]
 8002824:	6859      	ldr	r1, [r3, #4]
 8002826:	683b      	ldr	r3, [r7, #0]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	461a      	mov	r2, r3
 800282c:	f7ff f945 	bl	8001aba <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	4618      	mov	r0, r3
 8002836:	f7ff fa9b 	bl	8001d70 <LL_ADC_REG_IsConversionOngoing>
 800283a:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	4618      	mov	r0, r3
 8002844:	f7ff faa7 	bl	8001d96 <LL_ADC_INJ_IsConversionOngoing>
 8002848:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800284c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8002850:	2b00      	cmp	r3, #0
 8002852:	f040 81d9 	bne.w	8002c08 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002856:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800285a:	2b00      	cmp	r3, #0
 800285c:	f040 81d4 	bne.w	8002c08 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8002860:	683b      	ldr	r3, [r7, #0]
 8002862:	689b      	ldr	r3, [r3, #8]
 8002864:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002868:	d10f      	bne.n	800288a <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	6818      	ldr	r0, [r3, #0]
 800286e:	683b      	ldr	r3, [r7, #0]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	2200      	movs	r2, #0
 8002874:	4619      	mov	r1, r3
 8002876:	f7ff f95f 	bl	8001b38 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8002882:	4618      	mov	r0, r3
 8002884:	f7ff f8f3 	bl	8001a6e <LL_ADC_SetSamplingTimeCommonConfig>
 8002888:	e00e      	b.n	80028a8 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	6818      	ldr	r0, [r3, #0]
 800288e:	683b      	ldr	r3, [r7, #0]
 8002890:	6819      	ldr	r1, [r3, #0]
 8002892:	683b      	ldr	r3, [r7, #0]
 8002894:	689b      	ldr	r3, [r3, #8]
 8002896:	461a      	mov	r2, r3
 8002898:	f7ff f94e 	bl	8001b38 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	2100      	movs	r1, #0
 80028a2:	4618      	mov	r0, r3
 80028a4:	f7ff f8e3 	bl	8001a6e <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80028a8:	683b      	ldr	r3, [r7, #0]
 80028aa:	695a      	ldr	r2, [r3, #20]
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	68db      	ldr	r3, [r3, #12]
 80028b2:	08db      	lsrs	r3, r3, #3
 80028b4:	f003 0303 	and.w	r3, r3, #3
 80028b8:	005b      	lsls	r3, r3, #1
 80028ba:	fa02 f303 	lsl.w	r3, r2, r3
 80028be:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80028c2:	683b      	ldr	r3, [r7, #0]
 80028c4:	691b      	ldr	r3, [r3, #16]
 80028c6:	2b04      	cmp	r3, #4
 80028c8:	d022      	beq.n	8002910 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	6818      	ldr	r0, [r3, #0]
 80028ce:	683b      	ldr	r3, [r7, #0]
 80028d0:	6919      	ldr	r1, [r3, #16]
 80028d2:	683b      	ldr	r3, [r7, #0]
 80028d4:	681a      	ldr	r2, [r3, #0]
 80028d6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80028da:	f7ff f83d 	bl	8001958 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(sConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	6818      	ldr	r0, [r3, #0]
 80028e2:	683b      	ldr	r3, [r7, #0]
 80028e4:	6919      	ldr	r1, [r3, #16]
 80028e6:	683b      	ldr	r3, [r7, #0]
 80028e8:	699b      	ldr	r3, [r3, #24]
 80028ea:	461a      	mov	r2, r3
 80028ec:	f7ff f889 	bl	8001a02 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	6818      	ldr	r0, [r3, #0]
 80028f4:	683b      	ldr	r3, [r7, #0]
 80028f6:	6919      	ldr	r1, [r3, #16]
 80028f8:	683b      	ldr	r3, [r7, #0]
 80028fa:	7f1b      	ldrb	r3, [r3, #28]
 80028fc:	2b01      	cmp	r3, #1
 80028fe:	d102      	bne.n	8002906 <HAL_ADC_ConfigChannel+0x126>
 8002900:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002904:	e000      	b.n	8002908 <HAL_ADC_ConfigChannel+0x128>
 8002906:	2300      	movs	r3, #0
 8002908:	461a      	mov	r2, r3
 800290a:	f7ff f895 	bl	8001a38 <LL_ADC_SetOffsetSaturation>
 800290e:	e17b      	b.n	8002c08 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	2100      	movs	r1, #0
 8002916:	4618      	mov	r0, r3
 8002918:	f7ff f842 	bl	80019a0 <LL_ADC_GetOffsetChannel>
 800291c:	4603      	mov	r3, r0
 800291e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002922:	2b00      	cmp	r3, #0
 8002924:	d10a      	bne.n	800293c <HAL_ADC_ConfigChannel+0x15c>
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	2100      	movs	r1, #0
 800292c:	4618      	mov	r0, r3
 800292e:	f7ff f837 	bl	80019a0 <LL_ADC_GetOffsetChannel>
 8002932:	4603      	mov	r3, r0
 8002934:	0e9b      	lsrs	r3, r3, #26
 8002936:	f003 021f 	and.w	r2, r3, #31
 800293a:	e01e      	b.n	800297a <HAL_ADC_ConfigChannel+0x19a>
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	2100      	movs	r1, #0
 8002942:	4618      	mov	r0, r3
 8002944:	f7ff f82c 	bl	80019a0 <LL_ADC_GetOffsetChannel>
 8002948:	4603      	mov	r3, r0
 800294a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800294e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002952:	fa93 f3a3 	rbit	r3, r3
 8002956:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800295a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800295e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002962:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002966:	2b00      	cmp	r3, #0
 8002968:	d101      	bne.n	800296e <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 800296a:	2320      	movs	r3, #32
 800296c:	e004      	b.n	8002978 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 800296e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002972:	fab3 f383 	clz	r3, r3
 8002976:	b2db      	uxtb	r3, r3
 8002978:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800297a:	683b      	ldr	r3, [r7, #0]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002982:	2b00      	cmp	r3, #0
 8002984:	d105      	bne.n	8002992 <HAL_ADC_ConfigChannel+0x1b2>
 8002986:	683b      	ldr	r3, [r7, #0]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	0e9b      	lsrs	r3, r3, #26
 800298c:	f003 031f 	and.w	r3, r3, #31
 8002990:	e018      	b.n	80029c4 <HAL_ADC_ConfigChannel+0x1e4>
 8002992:	683b      	ldr	r3, [r7, #0]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800299a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800299e:	fa93 f3a3 	rbit	r3, r3
 80029a2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 80029a6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80029aa:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 80029ae:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d101      	bne.n	80029ba <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 80029b6:	2320      	movs	r3, #32
 80029b8:	e004      	b.n	80029c4 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 80029ba:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80029be:	fab3 f383 	clz	r3, r3
 80029c2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80029c4:	429a      	cmp	r2, r3
 80029c6:	d106      	bne.n	80029d6 <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	2200      	movs	r2, #0
 80029ce:	2100      	movs	r1, #0
 80029d0:	4618      	mov	r0, r3
 80029d2:	f7fe fffb 	bl	80019cc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	2101      	movs	r1, #1
 80029dc:	4618      	mov	r0, r3
 80029de:	f7fe ffdf 	bl	80019a0 <LL_ADC_GetOffsetChannel>
 80029e2:	4603      	mov	r3, r0
 80029e4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d10a      	bne.n	8002a02 <HAL_ADC_ConfigChannel+0x222>
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	2101      	movs	r1, #1
 80029f2:	4618      	mov	r0, r3
 80029f4:	f7fe ffd4 	bl	80019a0 <LL_ADC_GetOffsetChannel>
 80029f8:	4603      	mov	r3, r0
 80029fa:	0e9b      	lsrs	r3, r3, #26
 80029fc:	f003 021f 	and.w	r2, r3, #31
 8002a00:	e01e      	b.n	8002a40 <HAL_ADC_ConfigChannel+0x260>
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	2101      	movs	r1, #1
 8002a08:	4618      	mov	r0, r3
 8002a0a:	f7fe ffc9 	bl	80019a0 <LL_ADC_GetOffsetChannel>
 8002a0e:	4603      	mov	r3, r0
 8002a10:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a14:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002a18:	fa93 f3a3 	rbit	r3, r3
 8002a1c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8002a20:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002a24:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8002a28:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d101      	bne.n	8002a34 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8002a30:	2320      	movs	r3, #32
 8002a32:	e004      	b.n	8002a3e <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8002a34:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002a38:	fab3 f383 	clz	r3, r3
 8002a3c:	b2db      	uxtb	r3, r3
 8002a3e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002a40:	683b      	ldr	r3, [r7, #0]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d105      	bne.n	8002a58 <HAL_ADC_ConfigChannel+0x278>
 8002a4c:	683b      	ldr	r3, [r7, #0]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	0e9b      	lsrs	r3, r3, #26
 8002a52:	f003 031f 	and.w	r3, r3, #31
 8002a56:	e018      	b.n	8002a8a <HAL_ADC_ConfigChannel+0x2aa>
 8002a58:	683b      	ldr	r3, [r7, #0]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a60:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002a64:	fa93 f3a3 	rbit	r3, r3
 8002a68:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8002a6c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002a70:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8002a74:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d101      	bne.n	8002a80 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8002a7c:	2320      	movs	r3, #32
 8002a7e:	e004      	b.n	8002a8a <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 8002a80:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002a84:	fab3 f383 	clz	r3, r3
 8002a88:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002a8a:	429a      	cmp	r2, r3
 8002a8c:	d106      	bne.n	8002a9c <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	2200      	movs	r2, #0
 8002a94:	2101      	movs	r1, #1
 8002a96:	4618      	mov	r0, r3
 8002a98:	f7fe ff98 	bl	80019cc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	2102      	movs	r1, #2
 8002aa2:	4618      	mov	r0, r3
 8002aa4:	f7fe ff7c 	bl	80019a0 <LL_ADC_GetOffsetChannel>
 8002aa8:	4603      	mov	r3, r0
 8002aaa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d10a      	bne.n	8002ac8 <HAL_ADC_ConfigChannel+0x2e8>
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	2102      	movs	r1, #2
 8002ab8:	4618      	mov	r0, r3
 8002aba:	f7fe ff71 	bl	80019a0 <LL_ADC_GetOffsetChannel>
 8002abe:	4603      	mov	r3, r0
 8002ac0:	0e9b      	lsrs	r3, r3, #26
 8002ac2:	f003 021f 	and.w	r2, r3, #31
 8002ac6:	e01e      	b.n	8002b06 <HAL_ADC_ConfigChannel+0x326>
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	2102      	movs	r1, #2
 8002ace:	4618      	mov	r0, r3
 8002ad0:	f7fe ff66 	bl	80019a0 <LL_ADC_GetOffsetChannel>
 8002ad4:	4603      	mov	r3, r0
 8002ad6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ada:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002ade:	fa93 f3a3 	rbit	r3, r3
 8002ae2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8002ae6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002aea:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8002aee:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d101      	bne.n	8002afa <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 8002af6:	2320      	movs	r3, #32
 8002af8:	e004      	b.n	8002b04 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 8002afa:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002afe:	fab3 f383 	clz	r3, r3
 8002b02:	b2db      	uxtb	r3, r3
 8002b04:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002b06:	683b      	ldr	r3, [r7, #0]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d105      	bne.n	8002b1e <HAL_ADC_ConfigChannel+0x33e>
 8002b12:	683b      	ldr	r3, [r7, #0]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	0e9b      	lsrs	r3, r3, #26
 8002b18:	f003 031f 	and.w	r3, r3, #31
 8002b1c:	e016      	b.n	8002b4c <HAL_ADC_ConfigChannel+0x36c>
 8002b1e:	683b      	ldr	r3, [r7, #0]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b26:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002b2a:	fa93 f3a3 	rbit	r3, r3
 8002b2e:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8002b30:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002b32:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8002b36:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d101      	bne.n	8002b42 <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 8002b3e:	2320      	movs	r3, #32
 8002b40:	e004      	b.n	8002b4c <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 8002b42:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002b46:	fab3 f383 	clz	r3, r3
 8002b4a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002b4c:	429a      	cmp	r2, r3
 8002b4e:	d106      	bne.n	8002b5e <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	2200      	movs	r2, #0
 8002b56:	2102      	movs	r1, #2
 8002b58:	4618      	mov	r0, r3
 8002b5a:	f7fe ff37 	bl	80019cc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	2103      	movs	r1, #3
 8002b64:	4618      	mov	r0, r3
 8002b66:	f7fe ff1b 	bl	80019a0 <LL_ADC_GetOffsetChannel>
 8002b6a:	4603      	mov	r3, r0
 8002b6c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d10a      	bne.n	8002b8a <HAL_ADC_ConfigChannel+0x3aa>
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	2103      	movs	r1, #3
 8002b7a:	4618      	mov	r0, r3
 8002b7c:	f7fe ff10 	bl	80019a0 <LL_ADC_GetOffsetChannel>
 8002b80:	4603      	mov	r3, r0
 8002b82:	0e9b      	lsrs	r3, r3, #26
 8002b84:	f003 021f 	and.w	r2, r3, #31
 8002b88:	e017      	b.n	8002bba <HAL_ADC_ConfigChannel+0x3da>
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	2103      	movs	r1, #3
 8002b90:	4618      	mov	r0, r3
 8002b92:	f7fe ff05 	bl	80019a0 <LL_ADC_GetOffsetChannel>
 8002b96:	4603      	mov	r3, r0
 8002b98:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b9a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002b9c:	fa93 f3a3 	rbit	r3, r3
 8002ba0:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8002ba2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002ba4:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8002ba6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d101      	bne.n	8002bb0 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8002bac:	2320      	movs	r3, #32
 8002bae:	e003      	b.n	8002bb8 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8002bb0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002bb2:	fab3 f383 	clz	r3, r3
 8002bb6:	b2db      	uxtb	r3, r3
 8002bb8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002bba:	683b      	ldr	r3, [r7, #0]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d105      	bne.n	8002bd2 <HAL_ADC_ConfigChannel+0x3f2>
 8002bc6:	683b      	ldr	r3, [r7, #0]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	0e9b      	lsrs	r3, r3, #26
 8002bcc:	f003 031f 	and.w	r3, r3, #31
 8002bd0:	e011      	b.n	8002bf6 <HAL_ADC_ConfigChannel+0x416>
 8002bd2:	683b      	ldr	r3, [r7, #0]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bd8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002bda:	fa93 f3a3 	rbit	r3, r3
 8002bde:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8002be0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002be2:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8002be4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d101      	bne.n	8002bee <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 8002bea:	2320      	movs	r3, #32
 8002bec:	e003      	b.n	8002bf6 <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 8002bee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002bf0:	fab3 f383 	clz	r3, r3
 8002bf4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002bf6:	429a      	cmp	r2, r3
 8002bf8:	d106      	bne.n	8002c08 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	2200      	movs	r2, #0
 8002c00:	2103      	movs	r1, #3
 8002c02:	4618      	mov	r0, r3
 8002c04:	f7fe fee2 	bl	80019cc <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	4618      	mov	r0, r3
 8002c0e:	f7ff f875 	bl	8001cfc <LL_ADC_IsEnabled>
 8002c12:	4603      	mov	r3, r0
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	f040 813d 	bne.w	8002e94 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	6818      	ldr	r0, [r3, #0]
 8002c1e:	683b      	ldr	r3, [r7, #0]
 8002c20:	6819      	ldr	r1, [r3, #0]
 8002c22:	683b      	ldr	r3, [r7, #0]
 8002c24:	68db      	ldr	r3, [r3, #12]
 8002c26:	461a      	mov	r2, r3
 8002c28:	f7fe ffb2 	bl	8001b90 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002c2c:	683b      	ldr	r3, [r7, #0]
 8002c2e:	68db      	ldr	r3, [r3, #12]
 8002c30:	4aa2      	ldr	r2, [pc, #648]	; (8002ebc <HAL_ADC_ConfigChannel+0x6dc>)
 8002c32:	4293      	cmp	r3, r2
 8002c34:	f040 812e 	bne.w	8002e94 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002c3c:	683b      	ldr	r3, [r7, #0]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d10b      	bne.n	8002c60 <HAL_ADC_ConfigChannel+0x480>
 8002c48:	683b      	ldr	r3, [r7, #0]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	0e9b      	lsrs	r3, r3, #26
 8002c4e:	3301      	adds	r3, #1
 8002c50:	f003 031f 	and.w	r3, r3, #31
 8002c54:	2b09      	cmp	r3, #9
 8002c56:	bf94      	ite	ls
 8002c58:	2301      	movls	r3, #1
 8002c5a:	2300      	movhi	r3, #0
 8002c5c:	b2db      	uxtb	r3, r3
 8002c5e:	e019      	b.n	8002c94 <HAL_ADC_ConfigChannel+0x4b4>
 8002c60:	683b      	ldr	r3, [r7, #0]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c66:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002c68:	fa93 f3a3 	rbit	r3, r3
 8002c6c:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8002c6e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002c70:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8002c72:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d101      	bne.n	8002c7c <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8002c78:	2320      	movs	r3, #32
 8002c7a:	e003      	b.n	8002c84 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8002c7c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002c7e:	fab3 f383 	clz	r3, r3
 8002c82:	b2db      	uxtb	r3, r3
 8002c84:	3301      	adds	r3, #1
 8002c86:	f003 031f 	and.w	r3, r3, #31
 8002c8a:	2b09      	cmp	r3, #9
 8002c8c:	bf94      	ite	ls
 8002c8e:	2301      	movls	r3, #1
 8002c90:	2300      	movhi	r3, #0
 8002c92:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d079      	beq.n	8002d8c <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002c98:	683b      	ldr	r3, [r7, #0]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d107      	bne.n	8002cb4 <HAL_ADC_ConfigChannel+0x4d4>
 8002ca4:	683b      	ldr	r3, [r7, #0]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	0e9b      	lsrs	r3, r3, #26
 8002caa:	3301      	adds	r3, #1
 8002cac:	069b      	lsls	r3, r3, #26
 8002cae:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002cb2:	e015      	b.n	8002ce0 <HAL_ADC_ConfigChannel+0x500>
 8002cb4:	683b      	ldr	r3, [r7, #0]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002cbc:	fa93 f3a3 	rbit	r3, r3
 8002cc0:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002cc2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002cc4:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8002cc6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d101      	bne.n	8002cd0 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8002ccc:	2320      	movs	r3, #32
 8002cce:	e003      	b.n	8002cd8 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 8002cd0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002cd2:	fab3 f383 	clz	r3, r3
 8002cd6:	b2db      	uxtb	r3, r3
 8002cd8:	3301      	adds	r3, #1
 8002cda:	069b      	lsls	r3, r3, #26
 8002cdc:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002ce0:	683b      	ldr	r3, [r7, #0]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d109      	bne.n	8002d00 <HAL_ADC_ConfigChannel+0x520>
 8002cec:	683b      	ldr	r3, [r7, #0]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	0e9b      	lsrs	r3, r3, #26
 8002cf2:	3301      	adds	r3, #1
 8002cf4:	f003 031f 	and.w	r3, r3, #31
 8002cf8:	2101      	movs	r1, #1
 8002cfa:	fa01 f303 	lsl.w	r3, r1, r3
 8002cfe:	e017      	b.n	8002d30 <HAL_ADC_ConfigChannel+0x550>
 8002d00:	683b      	ldr	r3, [r7, #0]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d06:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002d08:	fa93 f3a3 	rbit	r3, r3
 8002d0c:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8002d0e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002d10:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8002d12:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d101      	bne.n	8002d1c <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8002d18:	2320      	movs	r3, #32
 8002d1a:	e003      	b.n	8002d24 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 8002d1c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002d1e:	fab3 f383 	clz	r3, r3
 8002d22:	b2db      	uxtb	r3, r3
 8002d24:	3301      	adds	r3, #1
 8002d26:	f003 031f 	and.w	r3, r3, #31
 8002d2a:	2101      	movs	r1, #1
 8002d2c:	fa01 f303 	lsl.w	r3, r1, r3
 8002d30:	ea42 0103 	orr.w	r1, r2, r3
 8002d34:	683b      	ldr	r3, [r7, #0]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d10a      	bne.n	8002d56 <HAL_ADC_ConfigChannel+0x576>
 8002d40:	683b      	ldr	r3, [r7, #0]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	0e9b      	lsrs	r3, r3, #26
 8002d46:	3301      	adds	r3, #1
 8002d48:	f003 021f 	and.w	r2, r3, #31
 8002d4c:	4613      	mov	r3, r2
 8002d4e:	005b      	lsls	r3, r3, #1
 8002d50:	4413      	add	r3, r2
 8002d52:	051b      	lsls	r3, r3, #20
 8002d54:	e018      	b.n	8002d88 <HAL_ADC_ConfigChannel+0x5a8>
 8002d56:	683b      	ldr	r3, [r7, #0]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d5e:	fa93 f3a3 	rbit	r3, r3
 8002d62:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002d64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d66:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8002d68:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d101      	bne.n	8002d72 <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 8002d6e:	2320      	movs	r3, #32
 8002d70:	e003      	b.n	8002d7a <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 8002d72:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002d74:	fab3 f383 	clz	r3, r3
 8002d78:	b2db      	uxtb	r3, r3
 8002d7a:	3301      	adds	r3, #1
 8002d7c:	f003 021f 	and.w	r2, r3, #31
 8002d80:	4613      	mov	r3, r2
 8002d82:	005b      	lsls	r3, r3, #1
 8002d84:	4413      	add	r3, r2
 8002d86:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002d88:	430b      	orrs	r3, r1
 8002d8a:	e07e      	b.n	8002e8a <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002d8c:	683b      	ldr	r3, [r7, #0]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d107      	bne.n	8002da8 <HAL_ADC_ConfigChannel+0x5c8>
 8002d98:	683b      	ldr	r3, [r7, #0]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	0e9b      	lsrs	r3, r3, #26
 8002d9e:	3301      	adds	r3, #1
 8002da0:	069b      	lsls	r3, r3, #26
 8002da2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002da6:	e015      	b.n	8002dd4 <HAL_ADC_ConfigChannel+0x5f4>
 8002da8:	683b      	ldr	r3, [r7, #0]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002db0:	fa93 f3a3 	rbit	r3, r3
 8002db4:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8002db6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002db8:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8002dba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d101      	bne.n	8002dc4 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 8002dc0:	2320      	movs	r3, #32
 8002dc2:	e003      	b.n	8002dcc <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8002dc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dc6:	fab3 f383 	clz	r3, r3
 8002dca:	b2db      	uxtb	r3, r3
 8002dcc:	3301      	adds	r3, #1
 8002dce:	069b      	lsls	r3, r3, #26
 8002dd0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002dd4:	683b      	ldr	r3, [r7, #0]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d109      	bne.n	8002df4 <HAL_ADC_ConfigChannel+0x614>
 8002de0:	683b      	ldr	r3, [r7, #0]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	0e9b      	lsrs	r3, r3, #26
 8002de6:	3301      	adds	r3, #1
 8002de8:	f003 031f 	and.w	r3, r3, #31
 8002dec:	2101      	movs	r1, #1
 8002dee:	fa01 f303 	lsl.w	r3, r1, r3
 8002df2:	e017      	b.n	8002e24 <HAL_ADC_ConfigChannel+0x644>
 8002df4:	683b      	ldr	r3, [r7, #0]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dfa:	6a3b      	ldr	r3, [r7, #32]
 8002dfc:	fa93 f3a3 	rbit	r3, r3
 8002e00:	61fb      	str	r3, [r7, #28]
  return result;
 8002e02:	69fb      	ldr	r3, [r7, #28]
 8002e04:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8002e06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d101      	bne.n	8002e10 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 8002e0c:	2320      	movs	r3, #32
 8002e0e:	e003      	b.n	8002e18 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8002e10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e12:	fab3 f383 	clz	r3, r3
 8002e16:	b2db      	uxtb	r3, r3
 8002e18:	3301      	adds	r3, #1
 8002e1a:	f003 031f 	and.w	r3, r3, #31
 8002e1e:	2101      	movs	r1, #1
 8002e20:	fa01 f303 	lsl.w	r3, r1, r3
 8002e24:	ea42 0103 	orr.w	r1, r2, r3
 8002e28:	683b      	ldr	r3, [r7, #0]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d10d      	bne.n	8002e50 <HAL_ADC_ConfigChannel+0x670>
 8002e34:	683b      	ldr	r3, [r7, #0]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	0e9b      	lsrs	r3, r3, #26
 8002e3a:	3301      	adds	r3, #1
 8002e3c:	f003 021f 	and.w	r2, r3, #31
 8002e40:	4613      	mov	r3, r2
 8002e42:	005b      	lsls	r3, r3, #1
 8002e44:	4413      	add	r3, r2
 8002e46:	3b1e      	subs	r3, #30
 8002e48:	051b      	lsls	r3, r3, #20
 8002e4a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002e4e:	e01b      	b.n	8002e88 <HAL_ADC_ConfigChannel+0x6a8>
 8002e50:	683b      	ldr	r3, [r7, #0]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e56:	697b      	ldr	r3, [r7, #20]
 8002e58:	fa93 f3a3 	rbit	r3, r3
 8002e5c:	613b      	str	r3, [r7, #16]
  return result;
 8002e5e:	693b      	ldr	r3, [r7, #16]
 8002e60:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002e62:	69bb      	ldr	r3, [r7, #24]
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d101      	bne.n	8002e6c <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 8002e68:	2320      	movs	r3, #32
 8002e6a:	e003      	b.n	8002e74 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 8002e6c:	69bb      	ldr	r3, [r7, #24]
 8002e6e:	fab3 f383 	clz	r3, r3
 8002e72:	b2db      	uxtb	r3, r3
 8002e74:	3301      	adds	r3, #1
 8002e76:	f003 021f 	and.w	r2, r3, #31
 8002e7a:	4613      	mov	r3, r2
 8002e7c:	005b      	lsls	r3, r3, #1
 8002e7e:	4413      	add	r3, r2
 8002e80:	3b1e      	subs	r3, #30
 8002e82:	051b      	lsls	r3, r3, #20
 8002e84:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002e88:	430b      	orrs	r3, r1
 8002e8a:	683a      	ldr	r2, [r7, #0]
 8002e8c:	6892      	ldr	r2, [r2, #8]
 8002e8e:	4619      	mov	r1, r3
 8002e90:	f7fe fe52 	bl	8001b38 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002e94:	683b      	ldr	r3, [r7, #0]
 8002e96:	681a      	ldr	r2, [r3, #0]
 8002e98:	4b09      	ldr	r3, [pc, #36]	; (8002ec0 <HAL_ADC_ConfigChannel+0x6e0>)
 8002e9a:	4013      	ands	r3, r2
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	f000 80be 	beq.w	800301e <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002eaa:	d004      	beq.n	8002eb6 <HAL_ADC_ConfigChannel+0x6d6>
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	4a04      	ldr	r2, [pc, #16]	; (8002ec4 <HAL_ADC_ConfigChannel+0x6e4>)
 8002eb2:	4293      	cmp	r3, r2
 8002eb4:	d10a      	bne.n	8002ecc <HAL_ADC_ConfigChannel+0x6ec>
 8002eb6:	4b04      	ldr	r3, [pc, #16]	; (8002ec8 <HAL_ADC_ConfigChannel+0x6e8>)
 8002eb8:	e009      	b.n	8002ece <HAL_ADC_ConfigChannel+0x6ee>
 8002eba:	bf00      	nop
 8002ebc:	407f0000 	.word	0x407f0000
 8002ec0:	80080000 	.word	0x80080000
 8002ec4:	50000100 	.word	0x50000100
 8002ec8:	50000300 	.word	0x50000300
 8002ecc:	4b59      	ldr	r3, [pc, #356]	; (8003034 <HAL_ADC_ConfigChannel+0x854>)
 8002ece:	4618      	mov	r0, r3
 8002ed0:	f7fe fd34 	bl	800193c <LL_ADC_GetCommonPathInternalCh>
 8002ed4:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8002ed8:	683b      	ldr	r3, [r7, #0]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	4a56      	ldr	r2, [pc, #344]	; (8003038 <HAL_ADC_ConfigChannel+0x858>)
 8002ede:	4293      	cmp	r3, r2
 8002ee0:	d004      	beq.n	8002eec <HAL_ADC_ConfigChannel+0x70c>
 8002ee2:	683b      	ldr	r3, [r7, #0]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	4a55      	ldr	r2, [pc, #340]	; (800303c <HAL_ADC_ConfigChannel+0x85c>)
 8002ee8:	4293      	cmp	r3, r2
 8002eea:	d13a      	bne.n	8002f62 <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002eec:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002ef0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d134      	bne.n	8002f62 <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002f00:	d005      	beq.n	8002f0e <HAL_ADC_ConfigChannel+0x72e>
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	4a4e      	ldr	r2, [pc, #312]	; (8003040 <HAL_ADC_ConfigChannel+0x860>)
 8002f08:	4293      	cmp	r3, r2
 8002f0a:	f040 8085 	bne.w	8003018 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002f16:	d004      	beq.n	8002f22 <HAL_ADC_ConfigChannel+0x742>
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	4a49      	ldr	r2, [pc, #292]	; (8003044 <HAL_ADC_ConfigChannel+0x864>)
 8002f1e:	4293      	cmp	r3, r2
 8002f20:	d101      	bne.n	8002f26 <HAL_ADC_ConfigChannel+0x746>
 8002f22:	4a49      	ldr	r2, [pc, #292]	; (8003048 <HAL_ADC_ConfigChannel+0x868>)
 8002f24:	e000      	b.n	8002f28 <HAL_ADC_ConfigChannel+0x748>
 8002f26:	4a43      	ldr	r2, [pc, #268]	; (8003034 <HAL_ADC_ConfigChannel+0x854>)
 8002f28:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002f2c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002f30:	4619      	mov	r1, r3
 8002f32:	4610      	mov	r0, r2
 8002f34:	f7fe fcef 	bl	8001916 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002f38:	4b44      	ldr	r3, [pc, #272]	; (800304c <HAL_ADC_ConfigChannel+0x86c>)
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	099b      	lsrs	r3, r3, #6
 8002f3e:	4a44      	ldr	r2, [pc, #272]	; (8003050 <HAL_ADC_ConfigChannel+0x870>)
 8002f40:	fba2 2303 	umull	r2, r3, r2, r3
 8002f44:	099b      	lsrs	r3, r3, #6
 8002f46:	1c5a      	adds	r2, r3, #1
 8002f48:	4613      	mov	r3, r2
 8002f4a:	005b      	lsls	r3, r3, #1
 8002f4c:	4413      	add	r3, r2
 8002f4e:	009b      	lsls	r3, r3, #2
 8002f50:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002f52:	e002      	b.n	8002f5a <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	3b01      	subs	r3, #1
 8002f58:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d1f9      	bne.n	8002f54 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002f60:	e05a      	b.n	8003018 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002f62:	683b      	ldr	r3, [r7, #0]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	4a3b      	ldr	r2, [pc, #236]	; (8003054 <HAL_ADC_ConfigChannel+0x874>)
 8002f68:	4293      	cmp	r3, r2
 8002f6a:	d125      	bne.n	8002fb8 <HAL_ADC_ConfigChannel+0x7d8>
 8002f6c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002f70:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d11f      	bne.n	8002fb8 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	4a31      	ldr	r2, [pc, #196]	; (8003044 <HAL_ADC_ConfigChannel+0x864>)
 8002f7e:	4293      	cmp	r3, r2
 8002f80:	d104      	bne.n	8002f8c <HAL_ADC_ConfigChannel+0x7ac>
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	4a34      	ldr	r2, [pc, #208]	; (8003058 <HAL_ADC_ConfigChannel+0x878>)
 8002f88:	4293      	cmp	r3, r2
 8002f8a:	d047      	beq.n	800301c <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002f94:	d004      	beq.n	8002fa0 <HAL_ADC_ConfigChannel+0x7c0>
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	4a2a      	ldr	r2, [pc, #168]	; (8003044 <HAL_ADC_ConfigChannel+0x864>)
 8002f9c:	4293      	cmp	r3, r2
 8002f9e:	d101      	bne.n	8002fa4 <HAL_ADC_ConfigChannel+0x7c4>
 8002fa0:	4a29      	ldr	r2, [pc, #164]	; (8003048 <HAL_ADC_ConfigChannel+0x868>)
 8002fa2:	e000      	b.n	8002fa6 <HAL_ADC_ConfigChannel+0x7c6>
 8002fa4:	4a23      	ldr	r2, [pc, #140]	; (8003034 <HAL_ADC_ConfigChannel+0x854>)
 8002fa6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002faa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002fae:	4619      	mov	r1, r3
 8002fb0:	4610      	mov	r0, r2
 8002fb2:	f7fe fcb0 	bl	8001916 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002fb6:	e031      	b.n	800301c <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8002fb8:	683b      	ldr	r3, [r7, #0]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	4a27      	ldr	r2, [pc, #156]	; (800305c <HAL_ADC_ConfigChannel+0x87c>)
 8002fbe:	4293      	cmp	r3, r2
 8002fc0:	d12d      	bne.n	800301e <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002fc2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002fc6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d127      	bne.n	800301e <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	4a1c      	ldr	r2, [pc, #112]	; (8003044 <HAL_ADC_ConfigChannel+0x864>)
 8002fd4:	4293      	cmp	r3, r2
 8002fd6:	d022      	beq.n	800301e <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002fe0:	d004      	beq.n	8002fec <HAL_ADC_ConfigChannel+0x80c>
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	4a17      	ldr	r2, [pc, #92]	; (8003044 <HAL_ADC_ConfigChannel+0x864>)
 8002fe8:	4293      	cmp	r3, r2
 8002fea:	d101      	bne.n	8002ff0 <HAL_ADC_ConfigChannel+0x810>
 8002fec:	4a16      	ldr	r2, [pc, #88]	; (8003048 <HAL_ADC_ConfigChannel+0x868>)
 8002fee:	e000      	b.n	8002ff2 <HAL_ADC_ConfigChannel+0x812>
 8002ff0:	4a10      	ldr	r2, [pc, #64]	; (8003034 <HAL_ADC_ConfigChannel+0x854>)
 8002ff2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002ff6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002ffa:	4619      	mov	r1, r3
 8002ffc:	4610      	mov	r0, r2
 8002ffe:	f7fe fc8a 	bl	8001916 <LL_ADC_SetCommonPathInternalCh>
 8003002:	e00c      	b.n	800301e <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003008:	f043 0220 	orr.w	r2, r3, #32
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8003010:	2301      	movs	r3, #1
 8003012:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8003016:	e002      	b.n	800301e <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003018:	bf00      	nop
 800301a:	e000      	b.n	800301e <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800301c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	2200      	movs	r2, #0
 8003022:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8003026:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 800302a:	4618      	mov	r0, r3
 800302c:	37d8      	adds	r7, #216	; 0xd8
 800302e:	46bd      	mov	sp, r7
 8003030:	bd80      	pop	{r7, pc}
 8003032:	bf00      	nop
 8003034:	50000700 	.word	0x50000700
 8003038:	c3210000 	.word	0xc3210000
 800303c:	90c00010 	.word	0x90c00010
 8003040:	50000600 	.word	0x50000600
 8003044:	50000100 	.word	0x50000100
 8003048:	50000300 	.word	0x50000300
 800304c:	20000408 	.word	0x20000408
 8003050:	053e2d63 	.word	0x053e2d63
 8003054:	c7520000 	.word	0xc7520000
 8003058:	50000500 	.word	0x50000500
 800305c:	cb840000 	.word	0xcb840000

08003060 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003060:	b580      	push	{r7, lr}
 8003062:	b084      	sub	sp, #16
 8003064:	af00      	add	r7, sp, #0
 8003066:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	4618      	mov	r0, r3
 800306e:	f7fe fe45 	bl	8001cfc <LL_ADC_IsEnabled>
 8003072:	4603      	mov	r3, r0
 8003074:	2b00      	cmp	r3, #0
 8003076:	d14d      	bne.n	8003114 <ADC_Enable+0xb4>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	689a      	ldr	r2, [r3, #8]
 800307e:	4b28      	ldr	r3, [pc, #160]	; (8003120 <ADC_Enable+0xc0>)
 8003080:	4013      	ands	r3, r2
 8003082:	2b00      	cmp	r3, #0
 8003084:	d00d      	beq.n	80030a2 <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800308a:	f043 0210 	orr.w	r2, r3, #16
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003096:	f043 0201 	orr.w	r2, r3, #1
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 800309e:	2301      	movs	r3, #1
 80030a0:	e039      	b.n	8003116 <ADC_Enable+0xb6>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	4618      	mov	r0, r3
 80030a8:	f7fe fe00 	bl	8001cac <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80030ac:	f7fe fbf2 	bl	8001894 <HAL_GetTick>
 80030b0:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80030b2:	e028      	b.n	8003106 <ADC_Enable+0xa6>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	4618      	mov	r0, r3
 80030ba:	f7fe fe1f 	bl	8001cfc <LL_ADC_IsEnabled>
 80030be:	4603      	mov	r3, r0
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d104      	bne.n	80030ce <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	4618      	mov	r0, r3
 80030ca:	f7fe fdef 	bl	8001cac <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80030ce:	f7fe fbe1 	bl	8001894 <HAL_GetTick>
 80030d2:	4602      	mov	r2, r0
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	1ad3      	subs	r3, r2, r3
 80030d8:	2b02      	cmp	r3, #2
 80030da:	d914      	bls.n	8003106 <ADC_Enable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f003 0301 	and.w	r3, r3, #1
 80030e6:	2b01      	cmp	r3, #1
 80030e8:	d00d      	beq.n	8003106 <ADC_Enable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030ee:	f043 0210 	orr.w	r2, r3, #16
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80030fa:	f043 0201 	orr.w	r2, r3, #1
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 8003102:	2301      	movs	r3, #1
 8003104:	e007      	b.n	8003116 <ADC_Enable+0xb6>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	f003 0301 	and.w	r3, r3, #1
 8003110:	2b01      	cmp	r3, #1
 8003112:	d1cf      	bne.n	80030b4 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003114:	2300      	movs	r3, #0
}
 8003116:	4618      	mov	r0, r3
 8003118:	3710      	adds	r7, #16
 800311a:	46bd      	mov	sp, r7
 800311c:	bd80      	pop	{r7, pc}
 800311e:	bf00      	nop
 8003120:	8000003f 	.word	0x8000003f

08003124 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8003124:	b580      	push	{r7, lr}
 8003126:	b084      	sub	sp, #16
 8003128:	af00      	add	r7, sp, #0
 800312a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	4618      	mov	r0, r3
 8003132:	f7fe fdf6 	bl	8001d22 <LL_ADC_IsDisableOngoing>
 8003136:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	4618      	mov	r0, r3
 800313e:	f7fe fddd 	bl	8001cfc <LL_ADC_IsEnabled>
 8003142:	4603      	mov	r3, r0
 8003144:	2b00      	cmp	r3, #0
 8003146:	d047      	beq.n	80031d8 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	2b00      	cmp	r3, #0
 800314c:	d144      	bne.n	80031d8 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	689b      	ldr	r3, [r3, #8]
 8003154:	f003 030d 	and.w	r3, r3, #13
 8003158:	2b01      	cmp	r3, #1
 800315a:	d10c      	bne.n	8003176 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	4618      	mov	r0, r3
 8003162:	f7fe fdb7 	bl	8001cd4 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	2203      	movs	r2, #3
 800316c:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800316e:	f7fe fb91 	bl	8001894 <HAL_GetTick>
 8003172:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003174:	e029      	b.n	80031ca <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800317a:	f043 0210 	orr.w	r2, r3, #16
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	65da      	str	r2, [r3, #92]	; 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003186:	f043 0201 	orr.w	r2, r3, #1
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_ERROR;
 800318e:	2301      	movs	r3, #1
 8003190:	e023      	b.n	80031da <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003192:	f7fe fb7f 	bl	8001894 <HAL_GetTick>
 8003196:	4602      	mov	r2, r0
 8003198:	68bb      	ldr	r3, [r7, #8]
 800319a:	1ad3      	subs	r3, r2, r3
 800319c:	2b02      	cmp	r3, #2
 800319e:	d914      	bls.n	80031ca <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	689b      	ldr	r3, [r3, #8]
 80031a6:	f003 0301 	and.w	r3, r3, #1
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d00d      	beq.n	80031ca <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031b2:	f043 0210 	orr.w	r2, r3, #16
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80031be:	f043 0201 	orr.w	r2, r3, #1
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 80031c6:	2301      	movs	r3, #1
 80031c8:	e007      	b.n	80031da <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	689b      	ldr	r3, [r3, #8]
 80031d0:	f003 0301 	and.w	r3, r3, #1
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d1dc      	bne.n	8003192 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80031d8:	2300      	movs	r3, #0
}
 80031da:	4618      	mov	r0, r3
 80031dc:	3710      	adds	r7, #16
 80031de:	46bd      	mov	sp, r7
 80031e0:	bd80      	pop	{r7, pc}

080031e2 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80031e2:	b580      	push	{r7, lr}
 80031e4:	b084      	sub	sp, #16
 80031e6:	af00      	add	r7, sp, #0
 80031e8:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031ee:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031f4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d14b      	bne.n	8003294 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003200:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	f003 0308 	and.w	r3, r3, #8
 8003212:	2b00      	cmp	r3, #0
 8003214:	d021      	beq.n	800325a <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	4618      	mov	r0, r3
 800321c:	f7fe fc3a 	bl	8001a94 <LL_ADC_REG_IsTriggerSourceSWStart>
 8003220:	4603      	mov	r3, r0
 8003222:	2b00      	cmp	r3, #0
 8003224:	d032      	beq.n	800328c <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	68db      	ldr	r3, [r3, #12]
 800322c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003230:	2b00      	cmp	r3, #0
 8003232:	d12b      	bne.n	800328c <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003238:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	65da      	str	r2, [r3, #92]	; 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003244:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003248:	2b00      	cmp	r3, #0
 800324a:	d11f      	bne.n	800328c <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003250:	f043 0201 	orr.w	r2, r3, #1
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	65da      	str	r2, [r3, #92]	; 0x5c
 8003258:	e018      	b.n	800328c <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	68db      	ldr	r3, [r3, #12]
 8003260:	f003 0302 	and.w	r3, r3, #2
 8003264:	2b00      	cmp	r3, #0
 8003266:	d111      	bne.n	800328c <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800326c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	65da      	str	r2, [r3, #92]	; 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003278:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800327c:	2b00      	cmp	r3, #0
 800327e:	d105      	bne.n	800328c <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003284:	f043 0201 	orr.w	r2, r3, #1
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800328c:	68f8      	ldr	r0, [r7, #12]
 800328e:	f7ff fa7f 	bl	8002790 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8003292:	e00e      	b.n	80032b2 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003298:	f003 0310 	and.w	r3, r3, #16
 800329c:	2b00      	cmp	r3, #0
 800329e:	d003      	beq.n	80032a8 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 80032a0:	68f8      	ldr	r0, [r7, #12]
 80032a2:	f7ff fa93 	bl	80027cc <HAL_ADC_ErrorCallback>
}
 80032a6:	e004      	b.n	80032b2 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032ae:	6878      	ldr	r0, [r7, #4]
 80032b0:	4798      	blx	r3
}
 80032b2:	bf00      	nop
 80032b4:	3710      	adds	r7, #16
 80032b6:	46bd      	mov	sp, r7
 80032b8:	bd80      	pop	{r7, pc}

080032ba <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80032ba:	b580      	push	{r7, lr}
 80032bc:	b084      	sub	sp, #16
 80032be:	af00      	add	r7, sp, #0
 80032c0:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032c6:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80032c8:	68f8      	ldr	r0, [r7, #12]
 80032ca:	f7ff fa6b 	bl	80027a4 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80032ce:	bf00      	nop
 80032d0:	3710      	adds	r7, #16
 80032d2:	46bd      	mov	sp, r7
 80032d4:	bd80      	pop	{r7, pc}

080032d6 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80032d6:	b580      	push	{r7, lr}
 80032d8:	b084      	sub	sp, #16
 80032da:	af00      	add	r7, sp, #0
 80032dc:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032e2:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032e8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80032f4:	f043 0204 	orr.w	r2, r3, #4
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	661a      	str	r2, [r3, #96]	; 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80032fc:	68f8      	ldr	r0, [r7, #12]
 80032fe:	f7ff fa65 	bl	80027cc <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003302:	bf00      	nop
 8003304:	3710      	adds	r7, #16
 8003306:	46bd      	mov	sp, r7
 8003308:	bd80      	pop	{r7, pc}

0800330a <LL_ADC_IsEnabled>:
{
 800330a:	b480      	push	{r7}
 800330c:	b083      	sub	sp, #12
 800330e:	af00      	add	r7, sp, #0
 8003310:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	689b      	ldr	r3, [r3, #8]
 8003316:	f003 0301 	and.w	r3, r3, #1
 800331a:	2b01      	cmp	r3, #1
 800331c:	d101      	bne.n	8003322 <LL_ADC_IsEnabled+0x18>
 800331e:	2301      	movs	r3, #1
 8003320:	e000      	b.n	8003324 <LL_ADC_IsEnabled+0x1a>
 8003322:	2300      	movs	r3, #0
}
 8003324:	4618      	mov	r0, r3
 8003326:	370c      	adds	r7, #12
 8003328:	46bd      	mov	sp, r7
 800332a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800332e:	4770      	bx	lr

08003330 <LL_ADC_StartCalibration>:
{
 8003330:	b480      	push	{r7}
 8003332:	b083      	sub	sp, #12
 8003334:	af00      	add	r7, sp, #0
 8003336:	6078      	str	r0, [r7, #4]
 8003338:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	689b      	ldr	r3, [r3, #8]
 800333e:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8003342:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003346:	683a      	ldr	r2, [r7, #0]
 8003348:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800334c:	4313      	orrs	r3, r2
 800334e:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	609a      	str	r2, [r3, #8]
}
 8003356:	bf00      	nop
 8003358:	370c      	adds	r7, #12
 800335a:	46bd      	mov	sp, r7
 800335c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003360:	4770      	bx	lr

08003362 <LL_ADC_IsCalibrationOnGoing>:
{
 8003362:	b480      	push	{r7}
 8003364:	b083      	sub	sp, #12
 8003366:	af00      	add	r7, sp, #0
 8003368:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	689b      	ldr	r3, [r3, #8]
 800336e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003372:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003376:	d101      	bne.n	800337c <LL_ADC_IsCalibrationOnGoing+0x1a>
 8003378:	2301      	movs	r3, #1
 800337a:	e000      	b.n	800337e <LL_ADC_IsCalibrationOnGoing+0x1c>
 800337c:	2300      	movs	r3, #0
}
 800337e:	4618      	mov	r0, r3
 8003380:	370c      	adds	r7, #12
 8003382:	46bd      	mov	sp, r7
 8003384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003388:	4770      	bx	lr

0800338a <LL_ADC_REG_IsConversionOngoing>:
{
 800338a:	b480      	push	{r7}
 800338c:	b083      	sub	sp, #12
 800338e:	af00      	add	r7, sp, #0
 8003390:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	689b      	ldr	r3, [r3, #8]
 8003396:	f003 0304 	and.w	r3, r3, #4
 800339a:	2b04      	cmp	r3, #4
 800339c:	d101      	bne.n	80033a2 <LL_ADC_REG_IsConversionOngoing+0x18>
 800339e:	2301      	movs	r3, #1
 80033a0:	e000      	b.n	80033a4 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80033a2:	2300      	movs	r3, #0
}
 80033a4:	4618      	mov	r0, r3
 80033a6:	370c      	adds	r7, #12
 80033a8:	46bd      	mov	sp, r7
 80033aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ae:	4770      	bx	lr

080033b0 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 80033b0:	b580      	push	{r7, lr}
 80033b2:	b084      	sub	sp, #16
 80033b4:	af00      	add	r7, sp, #0
 80033b6:	6078      	str	r0, [r7, #4]
 80033b8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 80033ba:	2300      	movs	r3, #0
 80033bc:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80033c4:	2b01      	cmp	r3, #1
 80033c6:	d101      	bne.n	80033cc <HAL_ADCEx_Calibration_Start+0x1c>
 80033c8:	2302      	movs	r3, #2
 80033ca:	e04d      	b.n	8003468 <HAL_ADCEx_Calibration_Start+0xb8>
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	2201      	movs	r2, #1
 80033d0:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 80033d4:	6878      	ldr	r0, [r7, #4]
 80033d6:	f7ff fea5 	bl	8003124 <ADC_Disable>
 80033da:	4603      	mov	r3, r0
 80033dc:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 80033de:	7bfb      	ldrb	r3, [r7, #15]
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d136      	bne.n	8003452 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033e8:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80033ec:	f023 0302 	bic.w	r3, r3, #2
 80033f0:	f043 0202 	orr.w	r2, r3, #2
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	65da      	str	r2, [r3, #92]	; 0x5c
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	6839      	ldr	r1, [r7, #0]
 80033fe:	4618      	mov	r0, r3
 8003400:	f7ff ff96 	bl	8003330 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003404:	e014      	b.n	8003430 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8003406:	68bb      	ldr	r3, [r7, #8]
 8003408:	3301      	adds	r3, #1
 800340a:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 800340c:	68bb      	ldr	r3, [r7, #8]
 800340e:	4a18      	ldr	r2, [pc, #96]	; (8003470 <HAL_ADCEx_Calibration_Start+0xc0>)
 8003410:	4293      	cmp	r3, r2
 8003412:	d90d      	bls.n	8003430 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003418:	f023 0312 	bic.w	r3, r3, #18
 800341c:	f043 0210 	orr.w	r2, r3, #16
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	65da      	str	r2, [r3, #92]	; 0x5c
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	2200      	movs	r2, #0
 8003428:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        return HAL_ERROR;
 800342c:	2301      	movs	r3, #1
 800342e:	e01b      	b.n	8003468 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	4618      	mov	r0, r3
 8003436:	f7ff ff94 	bl	8003362 <LL_ADC_IsCalibrationOnGoing>
 800343a:	4603      	mov	r3, r0
 800343c:	2b00      	cmp	r3, #0
 800343e:	d1e2      	bne.n	8003406 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003444:	f023 0303 	bic.w	r3, r3, #3
 8003448:	f043 0201 	orr.w	r2, r3, #1
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	65da      	str	r2, [r3, #92]	; 0x5c
 8003450:	e005      	b.n	800345e <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003456:	f043 0210 	orr.w	r2, r3, #16
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	2200      	movs	r2, #0
 8003462:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8003466:	7bfb      	ldrb	r3, [r7, #15]
}
 8003468:	4618      	mov	r0, r3
 800346a:	3710      	adds	r7, #16
 800346c:	46bd      	mov	sp, r7
 800346e:	bd80      	pop	{r7, pc}
 8003470:	0004de01 	.word	0x0004de01

08003474 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003474:	b480      	push	{r7}
 8003476:	b083      	sub	sp, #12
 8003478:	af00      	add	r7, sp, #0
 800347a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 800347c:	bf00      	nop
 800347e:	370c      	adds	r7, #12
 8003480:	46bd      	mov	sp, r7
 8003482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003486:	4770      	bx	lr

08003488 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8003488:	b480      	push	{r7}
 800348a:	b083      	sub	sp, #12
 800348c:	af00      	add	r7, sp, #0
 800348e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8003490:	bf00      	nop
 8003492:	370c      	adds	r7, #12
 8003494:	46bd      	mov	sp, r7
 8003496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800349a:	4770      	bx	lr

0800349c <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 800349c:	b480      	push	{r7}
 800349e:	b083      	sub	sp, #12
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 80034a4:	bf00      	nop
 80034a6:	370c      	adds	r7, #12
 80034a8:	46bd      	mov	sp, r7
 80034aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ae:	4770      	bx	lr

080034b0 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 80034b0:	b480      	push	{r7}
 80034b2:	b083      	sub	sp, #12
 80034b4:	af00      	add	r7, sp, #0
 80034b6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 80034b8:	bf00      	nop
 80034ba:	370c      	adds	r7, #12
 80034bc:	46bd      	mov	sp, r7
 80034be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c2:	4770      	bx	lr

080034c4 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 80034c4:	b480      	push	{r7}
 80034c6:	b083      	sub	sp, #12
 80034c8:	af00      	add	r7, sp, #0
 80034ca:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 80034cc:	bf00      	nop
 80034ce:	370c      	adds	r7, #12
 80034d0:	46bd      	mov	sp, r7
 80034d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d6:	4770      	bx	lr

080034d8 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 80034d8:	b590      	push	{r4, r7, lr}
 80034da:	b0a1      	sub	sp, #132	; 0x84
 80034dc:	af00      	add	r7, sp, #0
 80034de:	6078      	str	r0, [r7, #4]
 80034e0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80034e2:	2300      	movs	r3, #0
 80034e4:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80034ee:	2b01      	cmp	r3, #1
 80034f0:	d101      	bne.n	80034f6 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80034f2:	2302      	movs	r3, #2
 80034f4:	e0e7      	b.n	80036c6 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	2201      	movs	r2, #1
 80034fa:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 80034fe:	2300      	movs	r3, #0
 8003500:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 8003502:	2300      	movs	r3, #0
 8003504:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800350e:	d102      	bne.n	8003516 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8003510:	4b6f      	ldr	r3, [pc, #444]	; (80036d0 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003512:	60bb      	str	r3, [r7, #8]
 8003514:	e009      	b.n	800352a <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	4a6e      	ldr	r2, [pc, #440]	; (80036d4 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 800351c:	4293      	cmp	r3, r2
 800351e:	d102      	bne.n	8003526 <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 8003520:	4b6d      	ldr	r3, [pc, #436]	; (80036d8 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8003522:	60bb      	str	r3, [r7, #8]
 8003524:	e001      	b.n	800352a <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8003526:	2300      	movs	r3, #0
 8003528:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 800352a:	68bb      	ldr	r3, [r7, #8]
 800352c:	2b00      	cmp	r3, #0
 800352e:	d10b      	bne.n	8003548 <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003534:	f043 0220 	orr.w	r2, r3, #32
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	2200      	movs	r2, #0
 8003540:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 8003544:	2301      	movs	r3, #1
 8003546:	e0be      	b.n	80036c6 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8003548:	68bb      	ldr	r3, [r7, #8]
 800354a:	4618      	mov	r0, r3
 800354c:	f7ff ff1d 	bl	800338a <LL_ADC_REG_IsConversionOngoing>
 8003550:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	4618      	mov	r0, r3
 8003558:	f7ff ff17 	bl	800338a <LL_ADC_REG_IsConversionOngoing>
 800355c:	4603      	mov	r3, r0
 800355e:	2b00      	cmp	r3, #0
 8003560:	f040 80a0 	bne.w	80036a4 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8003564:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003566:	2b00      	cmp	r3, #0
 8003568:	f040 809c 	bne.w	80036a4 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003574:	d004      	beq.n	8003580 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	4a55      	ldr	r2, [pc, #340]	; (80036d0 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800357c:	4293      	cmp	r3, r2
 800357e:	d101      	bne.n	8003584 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8003580:	4b56      	ldr	r3, [pc, #344]	; (80036dc <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 8003582:	e000      	b.n	8003586 <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8003584:	4b56      	ldr	r3, [pc, #344]	; (80036e0 <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 8003586:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003588:	683b      	ldr	r3, [r7, #0]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	2b00      	cmp	r3, #0
 800358e:	d04b      	beq.n	8003628 <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8003590:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003592:	689b      	ldr	r3, [r3, #8]
 8003594:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003598:	683b      	ldr	r3, [r7, #0]
 800359a:	6859      	ldr	r1, [r3, #4]
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80035a2:	035b      	lsls	r3, r3, #13
 80035a4:	430b      	orrs	r3, r1
 80035a6:	431a      	orrs	r2, r3
 80035a8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80035aa:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80035b4:	d004      	beq.n	80035c0 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	4a45      	ldr	r2, [pc, #276]	; (80036d0 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80035bc:	4293      	cmp	r3, r2
 80035be:	d10f      	bne.n	80035e0 <HAL_ADCEx_MultiModeConfigChannel+0x108>
 80035c0:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80035c4:	f7ff fea1 	bl	800330a <LL_ADC_IsEnabled>
 80035c8:	4604      	mov	r4, r0
 80035ca:	4841      	ldr	r0, [pc, #260]	; (80036d0 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80035cc:	f7ff fe9d 	bl	800330a <LL_ADC_IsEnabled>
 80035d0:	4603      	mov	r3, r0
 80035d2:	4323      	orrs	r3, r4
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	bf0c      	ite	eq
 80035d8:	2301      	moveq	r3, #1
 80035da:	2300      	movne	r3, #0
 80035dc:	b2db      	uxtb	r3, r3
 80035de:	e012      	b.n	8003606 <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 80035e0:	483c      	ldr	r0, [pc, #240]	; (80036d4 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 80035e2:	f7ff fe92 	bl	800330a <LL_ADC_IsEnabled>
 80035e6:	4604      	mov	r4, r0
 80035e8:	483b      	ldr	r0, [pc, #236]	; (80036d8 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 80035ea:	f7ff fe8e 	bl	800330a <LL_ADC_IsEnabled>
 80035ee:	4603      	mov	r3, r0
 80035f0:	431c      	orrs	r4, r3
 80035f2:	483c      	ldr	r0, [pc, #240]	; (80036e4 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 80035f4:	f7ff fe89 	bl	800330a <LL_ADC_IsEnabled>
 80035f8:	4603      	mov	r3, r0
 80035fa:	4323      	orrs	r3, r4
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	bf0c      	ite	eq
 8003600:	2301      	moveq	r3, #1
 8003602:	2300      	movne	r3, #0
 8003604:	b2db      	uxtb	r3, r3
 8003606:	2b00      	cmp	r3, #0
 8003608:	d056      	beq.n	80036b8 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 800360a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800360c:	689b      	ldr	r3, [r3, #8]
 800360e:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8003612:	f023 030f 	bic.w	r3, r3, #15
 8003616:	683a      	ldr	r2, [r7, #0]
 8003618:	6811      	ldr	r1, [r2, #0]
 800361a:	683a      	ldr	r2, [r7, #0]
 800361c:	6892      	ldr	r2, [r2, #8]
 800361e:	430a      	orrs	r2, r1
 8003620:	431a      	orrs	r2, r3
 8003622:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003624:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003626:	e047      	b.n	80036b8 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8003628:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800362a:	689b      	ldr	r3, [r3, #8]
 800362c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003630:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003632:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800363c:	d004      	beq.n	8003648 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	4a23      	ldr	r2, [pc, #140]	; (80036d0 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003644:	4293      	cmp	r3, r2
 8003646:	d10f      	bne.n	8003668 <HAL_ADCEx_MultiModeConfigChannel+0x190>
 8003648:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 800364c:	f7ff fe5d 	bl	800330a <LL_ADC_IsEnabled>
 8003650:	4604      	mov	r4, r0
 8003652:	481f      	ldr	r0, [pc, #124]	; (80036d0 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003654:	f7ff fe59 	bl	800330a <LL_ADC_IsEnabled>
 8003658:	4603      	mov	r3, r0
 800365a:	4323      	orrs	r3, r4
 800365c:	2b00      	cmp	r3, #0
 800365e:	bf0c      	ite	eq
 8003660:	2301      	moveq	r3, #1
 8003662:	2300      	movne	r3, #0
 8003664:	b2db      	uxtb	r3, r3
 8003666:	e012      	b.n	800368e <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 8003668:	481a      	ldr	r0, [pc, #104]	; (80036d4 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 800366a:	f7ff fe4e 	bl	800330a <LL_ADC_IsEnabled>
 800366e:	4604      	mov	r4, r0
 8003670:	4819      	ldr	r0, [pc, #100]	; (80036d8 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8003672:	f7ff fe4a 	bl	800330a <LL_ADC_IsEnabled>
 8003676:	4603      	mov	r3, r0
 8003678:	431c      	orrs	r4, r3
 800367a:	481a      	ldr	r0, [pc, #104]	; (80036e4 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 800367c:	f7ff fe45 	bl	800330a <LL_ADC_IsEnabled>
 8003680:	4603      	mov	r3, r0
 8003682:	4323      	orrs	r3, r4
 8003684:	2b00      	cmp	r3, #0
 8003686:	bf0c      	ite	eq
 8003688:	2301      	moveq	r3, #1
 800368a:	2300      	movne	r3, #0
 800368c:	b2db      	uxtb	r3, r3
 800368e:	2b00      	cmp	r3, #0
 8003690:	d012      	beq.n	80036b8 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8003692:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003694:	689b      	ldr	r3, [r3, #8]
 8003696:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800369a:	f023 030f 	bic.w	r3, r3, #15
 800369e:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80036a0:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80036a2:	e009      	b.n	80036b8 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036a8:	f043 0220 	orr.w	r2, r3, #32
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80036b0:	2301      	movs	r3, #1
 80036b2:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 80036b6:	e000      	b.n	80036ba <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80036b8:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	2200      	movs	r2, #0
 80036be:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 80036c2:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 80036c6:	4618      	mov	r0, r3
 80036c8:	3784      	adds	r7, #132	; 0x84
 80036ca:	46bd      	mov	sp, r7
 80036cc:	bd90      	pop	{r4, r7, pc}
 80036ce:	bf00      	nop
 80036d0:	50000100 	.word	0x50000100
 80036d4:	50000400 	.word	0x50000400
 80036d8:	50000500 	.word	0x50000500
 80036dc:	50000300 	.word	0x50000300
 80036e0:	50000700 	.word	0x50000700
 80036e4:	50000600 	.word	0x50000600

080036e8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80036e8:	b480      	push	{r7}
 80036ea:	b085      	sub	sp, #20
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	f003 0307 	and.w	r3, r3, #7
 80036f6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80036f8:	4b0c      	ldr	r3, [pc, #48]	; (800372c <__NVIC_SetPriorityGrouping+0x44>)
 80036fa:	68db      	ldr	r3, [r3, #12]
 80036fc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80036fe:	68ba      	ldr	r2, [r7, #8]
 8003700:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003704:	4013      	ands	r3, r2
 8003706:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800370c:	68bb      	ldr	r3, [r7, #8]
 800370e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003710:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003714:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003718:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800371a:	4a04      	ldr	r2, [pc, #16]	; (800372c <__NVIC_SetPriorityGrouping+0x44>)
 800371c:	68bb      	ldr	r3, [r7, #8]
 800371e:	60d3      	str	r3, [r2, #12]
}
 8003720:	bf00      	nop
 8003722:	3714      	adds	r7, #20
 8003724:	46bd      	mov	sp, r7
 8003726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800372a:	4770      	bx	lr
 800372c:	e000ed00 	.word	0xe000ed00

08003730 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003730:	b480      	push	{r7}
 8003732:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003734:	4b04      	ldr	r3, [pc, #16]	; (8003748 <__NVIC_GetPriorityGrouping+0x18>)
 8003736:	68db      	ldr	r3, [r3, #12]
 8003738:	0a1b      	lsrs	r3, r3, #8
 800373a:	f003 0307 	and.w	r3, r3, #7
}
 800373e:	4618      	mov	r0, r3
 8003740:	46bd      	mov	sp, r7
 8003742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003746:	4770      	bx	lr
 8003748:	e000ed00 	.word	0xe000ed00

0800374c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800374c:	b480      	push	{r7}
 800374e:	b083      	sub	sp, #12
 8003750:	af00      	add	r7, sp, #0
 8003752:	4603      	mov	r3, r0
 8003754:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003756:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800375a:	2b00      	cmp	r3, #0
 800375c:	db0b      	blt.n	8003776 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800375e:	79fb      	ldrb	r3, [r7, #7]
 8003760:	f003 021f 	and.w	r2, r3, #31
 8003764:	4907      	ldr	r1, [pc, #28]	; (8003784 <__NVIC_EnableIRQ+0x38>)
 8003766:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800376a:	095b      	lsrs	r3, r3, #5
 800376c:	2001      	movs	r0, #1
 800376e:	fa00 f202 	lsl.w	r2, r0, r2
 8003772:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003776:	bf00      	nop
 8003778:	370c      	adds	r7, #12
 800377a:	46bd      	mov	sp, r7
 800377c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003780:	4770      	bx	lr
 8003782:	bf00      	nop
 8003784:	e000e100 	.word	0xe000e100

08003788 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003788:	b480      	push	{r7}
 800378a:	b083      	sub	sp, #12
 800378c:	af00      	add	r7, sp, #0
 800378e:	4603      	mov	r3, r0
 8003790:	6039      	str	r1, [r7, #0]
 8003792:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003794:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003798:	2b00      	cmp	r3, #0
 800379a:	db0a      	blt.n	80037b2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800379c:	683b      	ldr	r3, [r7, #0]
 800379e:	b2da      	uxtb	r2, r3
 80037a0:	490c      	ldr	r1, [pc, #48]	; (80037d4 <__NVIC_SetPriority+0x4c>)
 80037a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037a6:	0112      	lsls	r2, r2, #4
 80037a8:	b2d2      	uxtb	r2, r2
 80037aa:	440b      	add	r3, r1
 80037ac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80037b0:	e00a      	b.n	80037c8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80037b2:	683b      	ldr	r3, [r7, #0]
 80037b4:	b2da      	uxtb	r2, r3
 80037b6:	4908      	ldr	r1, [pc, #32]	; (80037d8 <__NVIC_SetPriority+0x50>)
 80037b8:	79fb      	ldrb	r3, [r7, #7]
 80037ba:	f003 030f 	and.w	r3, r3, #15
 80037be:	3b04      	subs	r3, #4
 80037c0:	0112      	lsls	r2, r2, #4
 80037c2:	b2d2      	uxtb	r2, r2
 80037c4:	440b      	add	r3, r1
 80037c6:	761a      	strb	r2, [r3, #24]
}
 80037c8:	bf00      	nop
 80037ca:	370c      	adds	r7, #12
 80037cc:	46bd      	mov	sp, r7
 80037ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d2:	4770      	bx	lr
 80037d4:	e000e100 	.word	0xe000e100
 80037d8:	e000ed00 	.word	0xe000ed00

080037dc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80037dc:	b480      	push	{r7}
 80037de:	b089      	sub	sp, #36	; 0x24
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	60f8      	str	r0, [r7, #12]
 80037e4:	60b9      	str	r1, [r7, #8]
 80037e6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	f003 0307 	and.w	r3, r3, #7
 80037ee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80037f0:	69fb      	ldr	r3, [r7, #28]
 80037f2:	f1c3 0307 	rsb	r3, r3, #7
 80037f6:	2b04      	cmp	r3, #4
 80037f8:	bf28      	it	cs
 80037fa:	2304      	movcs	r3, #4
 80037fc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80037fe:	69fb      	ldr	r3, [r7, #28]
 8003800:	3304      	adds	r3, #4
 8003802:	2b06      	cmp	r3, #6
 8003804:	d902      	bls.n	800380c <NVIC_EncodePriority+0x30>
 8003806:	69fb      	ldr	r3, [r7, #28]
 8003808:	3b03      	subs	r3, #3
 800380a:	e000      	b.n	800380e <NVIC_EncodePriority+0x32>
 800380c:	2300      	movs	r3, #0
 800380e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003810:	f04f 32ff 	mov.w	r2, #4294967295
 8003814:	69bb      	ldr	r3, [r7, #24]
 8003816:	fa02 f303 	lsl.w	r3, r2, r3
 800381a:	43da      	mvns	r2, r3
 800381c:	68bb      	ldr	r3, [r7, #8]
 800381e:	401a      	ands	r2, r3
 8003820:	697b      	ldr	r3, [r7, #20]
 8003822:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003824:	f04f 31ff 	mov.w	r1, #4294967295
 8003828:	697b      	ldr	r3, [r7, #20]
 800382a:	fa01 f303 	lsl.w	r3, r1, r3
 800382e:	43d9      	mvns	r1, r3
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003834:	4313      	orrs	r3, r2
         );
}
 8003836:	4618      	mov	r0, r3
 8003838:	3724      	adds	r7, #36	; 0x24
 800383a:	46bd      	mov	sp, r7
 800383c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003840:	4770      	bx	lr
	...

08003844 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003844:	b580      	push	{r7, lr}
 8003846:	b082      	sub	sp, #8
 8003848:	af00      	add	r7, sp, #0
 800384a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	3b01      	subs	r3, #1
 8003850:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003854:	d301      	bcc.n	800385a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003856:	2301      	movs	r3, #1
 8003858:	e00f      	b.n	800387a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800385a:	4a0a      	ldr	r2, [pc, #40]	; (8003884 <SysTick_Config+0x40>)
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	3b01      	subs	r3, #1
 8003860:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003862:	210f      	movs	r1, #15
 8003864:	f04f 30ff 	mov.w	r0, #4294967295
 8003868:	f7ff ff8e 	bl	8003788 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800386c:	4b05      	ldr	r3, [pc, #20]	; (8003884 <SysTick_Config+0x40>)
 800386e:	2200      	movs	r2, #0
 8003870:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003872:	4b04      	ldr	r3, [pc, #16]	; (8003884 <SysTick_Config+0x40>)
 8003874:	2207      	movs	r2, #7
 8003876:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003878:	2300      	movs	r3, #0
}
 800387a:	4618      	mov	r0, r3
 800387c:	3708      	adds	r7, #8
 800387e:	46bd      	mov	sp, r7
 8003880:	bd80      	pop	{r7, pc}
 8003882:	bf00      	nop
 8003884:	e000e010 	.word	0xe000e010

08003888 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003888:	b580      	push	{r7, lr}
 800388a:	b082      	sub	sp, #8
 800388c:	af00      	add	r7, sp, #0
 800388e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003890:	6878      	ldr	r0, [r7, #4]
 8003892:	f7ff ff29 	bl	80036e8 <__NVIC_SetPriorityGrouping>
}
 8003896:	bf00      	nop
 8003898:	3708      	adds	r7, #8
 800389a:	46bd      	mov	sp, r7
 800389c:	bd80      	pop	{r7, pc}

0800389e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800389e:	b580      	push	{r7, lr}
 80038a0:	b086      	sub	sp, #24
 80038a2:	af00      	add	r7, sp, #0
 80038a4:	4603      	mov	r3, r0
 80038a6:	60b9      	str	r1, [r7, #8]
 80038a8:	607a      	str	r2, [r7, #4]
 80038aa:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80038ac:	f7ff ff40 	bl	8003730 <__NVIC_GetPriorityGrouping>
 80038b0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80038b2:	687a      	ldr	r2, [r7, #4]
 80038b4:	68b9      	ldr	r1, [r7, #8]
 80038b6:	6978      	ldr	r0, [r7, #20]
 80038b8:	f7ff ff90 	bl	80037dc <NVIC_EncodePriority>
 80038bc:	4602      	mov	r2, r0
 80038be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80038c2:	4611      	mov	r1, r2
 80038c4:	4618      	mov	r0, r3
 80038c6:	f7ff ff5f 	bl	8003788 <__NVIC_SetPriority>
}
 80038ca:	bf00      	nop
 80038cc:	3718      	adds	r7, #24
 80038ce:	46bd      	mov	sp, r7
 80038d0:	bd80      	pop	{r7, pc}

080038d2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80038d2:	b580      	push	{r7, lr}
 80038d4:	b082      	sub	sp, #8
 80038d6:	af00      	add	r7, sp, #0
 80038d8:	4603      	mov	r3, r0
 80038da:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80038dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038e0:	4618      	mov	r0, r3
 80038e2:	f7ff ff33 	bl	800374c <__NVIC_EnableIRQ>
}
 80038e6:	bf00      	nop
 80038e8:	3708      	adds	r7, #8
 80038ea:	46bd      	mov	sp, r7
 80038ec:	bd80      	pop	{r7, pc}

080038ee <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80038ee:	b580      	push	{r7, lr}
 80038f0:	b082      	sub	sp, #8
 80038f2:	af00      	add	r7, sp, #0
 80038f4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80038f6:	6878      	ldr	r0, [r7, #4]
 80038f8:	f7ff ffa4 	bl	8003844 <SysTick_Config>
 80038fc:	4603      	mov	r3, r0
}
 80038fe:	4618      	mov	r0, r3
 8003900:	3708      	adds	r7, #8
 8003902:	46bd      	mov	sp, r7
 8003904:	bd80      	pop	{r7, pc}

08003906 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8003906:	b580      	push	{r7, lr}
 8003908:	b082      	sub	sp, #8
 800390a:	af00      	add	r7, sp, #0
 800390c:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	2b00      	cmp	r3, #0
 8003912:	d101      	bne.n	8003918 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8003914:	2301      	movs	r3, #1
 8003916:	e014      	b.n	8003942 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	791b      	ldrb	r3, [r3, #4]
 800391c:	b2db      	uxtb	r3, r3
 800391e:	2b00      	cmp	r3, #0
 8003920:	d105      	bne.n	800392e <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	2200      	movs	r2, #0
 8003926:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8003928:	6878      	ldr	r0, [r7, #4]
 800392a:	f7fd fd3f 	bl	80013ac <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	2202      	movs	r2, #2
 8003932:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	2200      	movs	r2, #0
 8003938:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	2201      	movs	r2, #1
 800393e:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8003940:	2300      	movs	r3, #0
}
 8003942:	4618      	mov	r0, r3
 8003944:	3708      	adds	r7, #8
 8003946:	46bd      	mov	sp, r7
 8003948:	bd80      	pop	{r7, pc}

0800394a <HAL_DAC_Start>:
  *         (1) On this STM32 series, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 800394a:	b580      	push	{r7, lr}
 800394c:	b082      	sub	sp, #8
 800394e:	af00      	add	r7, sp, #0
 8003950:	6078      	str	r0, [r7, #4]
 8003952:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	795b      	ldrb	r3, [r3, #5]
 8003958:	2b01      	cmp	r3, #1
 800395a:	d101      	bne.n	8003960 <HAL_DAC_Start+0x16>
 800395c:	2302      	movs	r3, #2
 800395e:	e043      	b.n	80039e8 <HAL_DAC_Start+0x9e>
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	2201      	movs	r2, #1
 8003964:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	2202      	movs	r2, #2
 800396a:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	6819      	ldr	r1, [r3, #0]
 8003972:	683b      	ldr	r3, [r7, #0]
 8003974:	f003 0310 	and.w	r3, r3, #16
 8003978:	2201      	movs	r2, #1
 800397a:	409a      	lsls	r2, r3
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	430a      	orrs	r2, r1
 8003982:	601a      	str	r2, [r3, #0]
  /* Ensure minimum wait before using peripheral after enabling it */
  HAL_Delay(1);
 8003984:	2001      	movs	r0, #1
 8003986:	f7fd ff91 	bl	80018ac <HAL_Delay>

  if (Channel == DAC_CHANNEL_1)
 800398a:	683b      	ldr	r3, [r7, #0]
 800398c:	2b00      	cmp	r3, #0
 800398e:	d10f      	bne.n	80039b0 <HAL_DAC_Start+0x66>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800399a:	2b02      	cmp	r3, #2
 800399c:	d11d      	bne.n	80039da <HAL_DAC_Start+0x90>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	685a      	ldr	r2, [r3, #4]
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	f042 0201 	orr.w	r2, r2, #1
 80039ac:	605a      	str	r2, [r3, #4]
 80039ae:	e014      	b.n	80039da <HAL_DAC_Start+0x90>
  }

  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 80039ba:	683b      	ldr	r3, [r7, #0]
 80039bc:	f003 0310 	and.w	r3, r3, #16
 80039c0:	2102      	movs	r1, #2
 80039c2:	fa01 f303 	lsl.w	r3, r1, r3
 80039c6:	429a      	cmp	r2, r3
 80039c8:	d107      	bne.n	80039da <HAL_DAC_Start+0x90>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	685a      	ldr	r2, [r3, #4]
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	f042 0202 	orr.w	r2, r2, #2
 80039d8:	605a      	str	r2, [r3, #4]
    }
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	2201      	movs	r2, #1
 80039de:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	2200      	movs	r2, #0
 80039e4:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80039e6:	2300      	movs	r3, #0
}
 80039e8:	4618      	mov	r0, r3
 80039ea:	3708      	adds	r7, #8
 80039ec:	46bd      	mov	sp, r7
 80039ee:	bd80      	pop	{r7, pc}

080039f0 <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 80039f0:	b580      	push	{r7, lr}
 80039f2:	b082      	sub	sp, #8
 80039f4:	af00      	add	r7, sp, #0
 80039f6:	6078      	str	r0, [r7, #4]
  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR1))
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003a02:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003a06:	d120      	bne.n	8003a4a <HAL_DAC_IRQHandler+0x5a>
  {
    /* Check underrun flag of DAC channel 1 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a0e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003a12:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003a16:	d118      	bne.n	8003a4a <HAL_DAC_IRQHandler+0x5a>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	2204      	movs	r2, #4
 8003a1c:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	691b      	ldr	r3, [r3, #16]
 8003a22:	f043 0201 	orr.w	r2, r3, #1
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003a32:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel1 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	681a      	ldr	r2, [r3, #0]
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003a42:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 8003a44:	6878      	ldr	r0, [r7, #4]
 8003a46:	f000 f855 	bl	8003af4 <HAL_DAC_DMAUnderrunCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }


  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR2))
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003a54:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003a58:	d120      	bne.n	8003a9c <HAL_DAC_IRQHandler+0xac>
  {
    /* Check underrun flag of DAC channel 2 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR2))
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a60:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003a64:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003a68:	d118      	bne.n	8003a9c <HAL_DAC_IRQHandler+0xac>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	2204      	movs	r2, #4
 8003a6e:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	691b      	ldr	r3, [r3, #16]
 8003a74:	f043 0202 	orr.w	r2, r3, #2
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8003a84:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel2 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	681a      	ldr	r2, [r3, #0]
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8003a94:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 8003a96:	6878      	ldr	r0, [r7, #4]
 8003a98:	f000 f9de 	bl	8003e58 <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }

}
 8003a9c:	bf00      	nop
 8003a9e:	3708      	adds	r7, #8
 8003aa0:	46bd      	mov	sp, r7
 8003aa2:	bd80      	pop	{r7, pc}

08003aa4 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8003aa4:	b480      	push	{r7}
 8003aa6:	b087      	sub	sp, #28
 8003aa8:	af00      	add	r7, sp, #0
 8003aaa:	60f8      	str	r0, [r7, #12]
 8003aac:	60b9      	str	r1, [r7, #8]
 8003aae:	607a      	str	r2, [r7, #4]
 8003ab0:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 8003ab2:	2300      	movs	r3, #0
 8003ab4:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  /* In case DMA Double data mode is activated, DATA range is almost full uin32_t one: no check */
  if ((hdac->Instance->MCR & (DAC_MCR_DMADOUBLE1 << (Channel & 0x10UL))) == 0UL)
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
  {
    assert_param(IS_DAC_DATA(Data));
  }

  tmp = (uint32_t)hdac->Instance;
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 8003ac2:	68bb      	ldr	r3, [r7, #8]
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d105      	bne.n	8003ad4 <HAL_DAC_SetValue+0x30>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8003ac8:	697a      	ldr	r2, [r7, #20]
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	4413      	add	r3, r2
 8003ace:	3308      	adds	r3, #8
 8003ad0:	617b      	str	r3, [r7, #20]
 8003ad2:	e004      	b.n	8003ade <HAL_DAC_SetValue+0x3a>
  }

  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8003ad4:	697a      	ldr	r2, [r7, #20]
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	4413      	add	r3, r2
 8003ada:	3314      	adds	r3, #20
 8003adc:	617b      	str	r3, [r7, #20]
  }


  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8003ade:	697b      	ldr	r3, [r7, #20]
 8003ae0:	461a      	mov	r2, r3
 8003ae2:	683b      	ldr	r3, [r7, #0]
 8003ae4:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8003ae6:	2300      	movs	r3, #0
}
 8003ae8:	4618      	mov	r0, r3
 8003aea:	371c      	adds	r7, #28
 8003aec:	46bd      	mov	sp, r7
 8003aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af2:	4770      	bx	lr

08003af4 <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8003af4:	b480      	push	{r7}
 8003af6:	b083      	sub	sp, #12
 8003af8:	af00      	add	r7, sp, #0
 8003afa:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 8003afc:	bf00      	nop
 8003afe:	370c      	adds	r7, #12
 8003b00:	46bd      	mov	sp, r7
 8003b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b06:	4770      	bx	lr

08003b08 <HAL_DAC_ConfigChannel>:
  *         (1) On this STM32 series, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8003b08:	b580      	push	{r7, lr}
 8003b0a:	b08a      	sub	sp, #40	; 0x28
 8003b0c:	af00      	add	r7, sp, #0
 8003b0e:	60f8      	str	r0, [r7, #12]
 8003b10:	60b9      	str	r1, [r7, #8]
 8003b12:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_DMADoubleDataMode));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_SignedFormat));

  /* Process locked */
  __HAL_LOCK(hdac);
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	795b      	ldrb	r3, [r3, #5]
 8003b18:	2b01      	cmp	r3, #1
 8003b1a:	d101      	bne.n	8003b20 <HAL_DAC_ConfigChannel+0x18>
 8003b1c:	2302      	movs	r3, #2
 8003b1e:	e192      	b.n	8003e46 <HAL_DAC_ConfigChannel+0x33e>
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	2201      	movs	r2, #1
 8003b24:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	2202      	movs	r2, #2
 8003b2a:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8003b2c:	68bb      	ldr	r3, [r7, #8]
 8003b2e:	689b      	ldr	r3, [r3, #8]
 8003b30:	2b04      	cmp	r3, #4
 8003b32:	d174      	bne.n	8003c1e <HAL_DAC_ConfigChannel+0x116>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8003b34:	f7fd feae 	bl	8001894 <HAL_GetTick>
 8003b38:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d134      	bne.n	8003baa <HAL_DAC_ConfigChannel+0xa2>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8003b40:	e011      	b.n	8003b66 <HAL_DAC_ConfigChannel+0x5e>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8003b42:	f7fd fea7 	bl	8001894 <HAL_GetTick>
 8003b46:	4602      	mov	r2, r0
 8003b48:	69fb      	ldr	r3, [r7, #28]
 8003b4a:	1ad3      	subs	r3, r2, r3
 8003b4c:	2b01      	cmp	r3, #1
 8003b4e:	d90a      	bls.n	8003b66 <HAL_DAC_ConfigChannel+0x5e>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	691b      	ldr	r3, [r3, #16]
 8003b54:	f043 0208 	orr.w	r2, r3, #8
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	2203      	movs	r2, #3
 8003b60:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8003b62:	2303      	movs	r3, #3
 8003b64:	e16f      	b.n	8003e46 <HAL_DAC_ConfigChannel+0x33e>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b6c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d1e6      	bne.n	8003b42 <HAL_DAC_ConfigChannel+0x3a>
        }
      }
      HAL_Delay(1);
 8003b74:	2001      	movs	r0, #1
 8003b76:	f7fd fe99 	bl	80018ac <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	68ba      	ldr	r2, [r7, #8]
 8003b80:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003b82:	641a      	str	r2, [r3, #64]	; 0x40
 8003b84:	e01e      	b.n	8003bc4 <HAL_DAC_ConfigChannel+0xbc>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8003b86:	f7fd fe85 	bl	8001894 <HAL_GetTick>
 8003b8a:	4602      	mov	r2, r0
 8003b8c:	69fb      	ldr	r3, [r7, #28]
 8003b8e:	1ad3      	subs	r3, r2, r3
 8003b90:	2b01      	cmp	r3, #1
 8003b92:	d90a      	bls.n	8003baa <HAL_DAC_ConfigChannel+0xa2>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	691b      	ldr	r3, [r3, #16]
 8003b98:	f043 0208 	orr.w	r2, r3, #8
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	2203      	movs	r2, #3
 8003ba4:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8003ba6:	2303      	movs	r3, #3
 8003ba8:	e14d      	b.n	8003e46 <HAL_DAC_ConfigChannel+0x33e>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	dbe8      	blt.n	8003b86 <HAL_DAC_ConfigChannel+0x7e>
        }
      }
      HAL_Delay(1U);
 8003bb4:	2001      	movs	r0, #1
 8003bb6:	f7fd fe79 	bl	80018ac <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	68ba      	ldr	r2, [r7, #8]
 8003bc0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003bc2:	645a      	str	r2, [r3, #68]	; 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	f003 0310 	and.w	r3, r3, #16
 8003bd0:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8003bd4:	fa01 f303 	lsl.w	r3, r1, r3
 8003bd8:	43db      	mvns	r3, r3
 8003bda:	ea02 0103 	and.w	r1, r2, r3
 8003bde:	68bb      	ldr	r3, [r7, #8]
 8003be0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	f003 0310 	and.w	r3, r3, #16
 8003be8:	409a      	lsls	r2, r3
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	430a      	orrs	r2, r1
 8003bf0:	649a      	str	r2, [r3, #72]	; 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	f003 0310 	and.w	r3, r3, #16
 8003bfe:	21ff      	movs	r1, #255	; 0xff
 8003c00:	fa01 f303 	lsl.w	r3, r1, r3
 8003c04:	43db      	mvns	r3, r3
 8003c06:	ea02 0103 	and.w	r1, r2, r3
 8003c0a:	68bb      	ldr	r3, [r7, #8]
 8003c0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	f003 0310 	and.w	r3, r3, #16
 8003c14:	409a      	lsls	r2, r3
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	430a      	orrs	r2, r1
 8003c1c:	64da      	str	r2, [r3, #76]	; 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8003c1e:	68bb      	ldr	r3, [r7, #8]
 8003c20:	69db      	ldr	r3, [r3, #28]
 8003c22:	2b01      	cmp	r3, #1
 8003c24:	d11d      	bne.n	8003c62 <HAL_DAC_ConfigChannel+0x15a>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c2c:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	f003 0310 	and.w	r3, r3, #16
 8003c34:	221f      	movs	r2, #31
 8003c36:	fa02 f303 	lsl.w	r3, r2, r3
 8003c3a:	43db      	mvns	r3, r3
 8003c3c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c3e:	4013      	ands	r3, r2
 8003c40:	627b      	str	r3, [r7, #36]	; 0x24
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8003c42:	68bb      	ldr	r3, [r7, #8]
 8003c44:	6a1b      	ldr	r3, [r3, #32]
 8003c46:	61bb      	str	r3, [r7, #24]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	f003 0310 	and.w	r3, r3, #16
 8003c4e:	69ba      	ldr	r2, [r7, #24]
 8003c50:	fa02 f303 	lsl.w	r3, r2, r3
 8003c54:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c56:	4313      	orrs	r3, r2
 8003c58:	627b      	str	r3, [r7, #36]	; 0x24
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c60:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c68:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	f003 0310 	and.w	r3, r3, #16
 8003c70:	2207      	movs	r2, #7
 8003c72:	fa02 f303 	lsl.w	r3, r2, r3
 8003c76:	43db      	mvns	r3, r3
 8003c78:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c7a:	4013      	ands	r3, r2
 8003c7c:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8003c7e:	68bb      	ldr	r3, [r7, #8]
 8003c80:	699b      	ldr	r3, [r3, #24]
 8003c82:	2b01      	cmp	r3, #1
 8003c84:	d102      	bne.n	8003c8c <HAL_DAC_ConfigChannel+0x184>
  {
    connectOnChip = 0x00000000UL;
 8003c86:	2300      	movs	r3, #0
 8003c88:	623b      	str	r3, [r7, #32]
 8003c8a:	e00f      	b.n	8003cac <HAL_DAC_ConfigChannel+0x1a4>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 8003c8c:	68bb      	ldr	r3, [r7, #8]
 8003c8e:	699b      	ldr	r3, [r3, #24]
 8003c90:	2b02      	cmp	r3, #2
 8003c92:	d102      	bne.n	8003c9a <HAL_DAC_ConfigChannel+0x192>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 8003c94:	2301      	movs	r3, #1
 8003c96:	623b      	str	r3, [r7, #32]
 8003c98:	e008      	b.n	8003cac <HAL_DAC_ConfigChannel+0x1a4>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8003c9a:	68bb      	ldr	r3, [r7, #8]
 8003c9c:	695b      	ldr	r3, [r3, #20]
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d102      	bne.n	8003ca8 <HAL_DAC_ConfigChannel+0x1a0>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 8003ca2:	2301      	movs	r3, #1
 8003ca4:	623b      	str	r3, [r7, #32]
 8003ca6:	e001      	b.n	8003cac <HAL_DAC_ConfigChannel+0x1a4>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 8003ca8:	2300      	movs	r3, #0
 8003caa:	623b      	str	r3, [r7, #32]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8003cac:	68bb      	ldr	r3, [r7, #8]
 8003cae:	689a      	ldr	r2, [r3, #8]
 8003cb0:	68bb      	ldr	r3, [r7, #8]
 8003cb2:	695b      	ldr	r3, [r3, #20]
 8003cb4:	4313      	orrs	r3, r2
 8003cb6:	6a3a      	ldr	r2, [r7, #32]
 8003cb8:	4313      	orrs	r3, r2
 8003cba:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_DMADOUBLEx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	f003 0310 	and.w	r3, r3, #16
 8003cc2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003cc6:	fa02 f303 	lsl.w	r3, r2, r3
 8003cca:	43db      	mvns	r3, r3
 8003ccc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003cce:	4013      	ands	r3, r2
 8003cd0:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: DMA double data mode */
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 8003cd2:	68bb      	ldr	r3, [r7, #8]
 8003cd4:	791b      	ldrb	r3, [r3, #4]
 8003cd6:	2b01      	cmp	r3, #1
 8003cd8:	d102      	bne.n	8003ce0 <HAL_DAC_ConfigChannel+0x1d8>
 8003cda:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003cde:	e000      	b.n	8003ce2 <HAL_DAC_ConfigChannel+0x1da>
 8003ce0:	2300      	movs	r3, #0
 8003ce2:	69ba      	ldr	r2, [r7, #24]
 8003ce4:	4313      	orrs	r3, r2
 8003ce6:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_SINFORMATx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	f003 0310 	and.w	r3, r3, #16
 8003cee:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003cf2:	fa02 f303 	lsl.w	r3, r2, r3
 8003cf6:	43db      	mvns	r3, r3
 8003cf8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003cfa:	4013      	ands	r3, r2
 8003cfc:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: Signed format */
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 8003cfe:	68bb      	ldr	r3, [r7, #8]
 8003d00:	795b      	ldrb	r3, [r3, #5]
 8003d02:	2b01      	cmp	r3, #1
 8003d04:	d102      	bne.n	8003d0c <HAL_DAC_ConfigChannel+0x204>
 8003d06:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003d0a:	e000      	b.n	8003d0e <HAL_DAC_ConfigChannel+0x206>
 8003d0c:	2300      	movs	r3, #0
 8003d0e:	69ba      	ldr	r2, [r7, #24]
 8003d10:	4313      	orrs	r3, r2
 8003d12:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_HFSEL bits */
  tmpreg1 &= ~(DAC_MCR_HFSEL);
 8003d14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d16:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8003d1a:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for both DAC channels: high frequency mode */
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 8003d1c:	68bb      	ldr	r3, [r7, #8]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	2b02      	cmp	r3, #2
 8003d22:	d114      	bne.n	8003d4e <HAL_DAC_ConfigChannel+0x246>
  {
    hclkfreq = HAL_RCC_GetHCLKFreq();
 8003d24:	f001 fad8 	bl	80052d8 <HAL_RCC_GetHCLKFreq>
 8003d28:	6178      	str	r0, [r7, #20]
    if (hclkfreq > HFSEL_ENABLE_THRESHOLD_160MHZ)
 8003d2a:	697b      	ldr	r3, [r7, #20]
 8003d2c:	4a48      	ldr	r2, [pc, #288]	; (8003e50 <HAL_DAC_ConfigChannel+0x348>)
 8003d2e:	4293      	cmp	r3, r2
 8003d30:	d904      	bls.n	8003d3c <HAL_DAC_ConfigChannel+0x234>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_160MHZ;
 8003d32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d34:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003d38:	627b      	str	r3, [r7, #36]	; 0x24
 8003d3a:	e00f      	b.n	8003d5c <HAL_DAC_ConfigChannel+0x254>
    }
    else if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 8003d3c:	697b      	ldr	r3, [r7, #20]
 8003d3e:	4a45      	ldr	r2, [pc, #276]	; (8003e54 <HAL_DAC_ConfigChannel+0x34c>)
 8003d40:	4293      	cmp	r3, r2
 8003d42:	d90a      	bls.n	8003d5a <HAL_DAC_ConfigChannel+0x252>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 8003d44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d46:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003d4a:	627b      	str	r3, [r7, #36]	; 0x24
 8003d4c:	e006      	b.n	8003d5c <HAL_DAC_ConfigChannel+0x254>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
    }
  }
  else
  {
    tmpreg1 |= sConfig->DAC_HighFrequency;
 8003d4e:	68bb      	ldr	r3, [r7, #8]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d54:	4313      	orrs	r3, r2
 8003d56:	627b      	str	r3, [r7, #36]	; 0x24
 8003d58:	e000      	b.n	8003d5c <HAL_DAC_ConfigChannel+0x254>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
 8003d5a:	bf00      	nop
  }
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	f003 0310 	and.w	r3, r3, #16
 8003d62:	69ba      	ldr	r2, [r7, #24]
 8003d64:	fa02 f303 	lsl.w	r3, r2, r3
 8003d68:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d6a:	4313      	orrs	r3, r2
 8003d6c:	627b      	str	r3, [r7, #36]	; 0x24
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d74:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	6819      	ldr	r1, [r3, #0]
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	f003 0310 	and.w	r3, r3, #16
 8003d82:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003d86:	fa02 f303 	lsl.w	r3, r2, r3
 8003d8a:	43da      	mvns	r2, r3
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	400a      	ands	r2, r1
 8003d92:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	f003 0310 	and.w	r3, r3, #16
 8003da2:	f640 72fe 	movw	r2, #4094	; 0xffe
 8003da6:	fa02 f303 	lsl.w	r3, r2, r3
 8003daa:	43db      	mvns	r3, r3
 8003dac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003dae:	4013      	ands	r3, r2
 8003db0:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8003db2:	68bb      	ldr	r3, [r7, #8]
 8003db4:	68db      	ldr	r3, [r3, #12]
 8003db6:	61bb      	str	r3, [r7, #24]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	f003 0310 	and.w	r3, r3, #16
 8003dbe:	69ba      	ldr	r2, [r7, #24]
 8003dc0:	fa02 f303 	lsl.w	r3, r2, r3
 8003dc4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003dc6:	4313      	orrs	r3, r2
 8003dc8:	627b      	str	r3, [r7, #36]	; 0x24
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003dd0:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	6819      	ldr	r1, [r3, #0]
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	f003 0310 	and.w	r3, r3, #16
 8003dde:	22c0      	movs	r2, #192	; 0xc0
 8003de0:	fa02 f303 	lsl.w	r3, r2, r3
 8003de4:	43da      	mvns	r2, r3
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	400a      	ands	r2, r1
 8003dec:	601a      	str	r2, [r3, #0]

  /* Set STRSTTRIGSELx and STINCTRIGSELx bits according to DAC_Trigger & DAC_Trigger2 values */
  tmpreg2 = ((sConfig->DAC_Trigger & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STRSTTRIGSEL1_Pos;
 8003dee:	68bb      	ldr	r3, [r7, #8]
 8003df0:	68db      	ldr	r3, [r3, #12]
 8003df2:	089b      	lsrs	r3, r3, #2
 8003df4:	f003 030f 	and.w	r3, r3, #15
 8003df8:	61bb      	str	r3, [r7, #24]
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 8003dfa:	68bb      	ldr	r3, [r7, #8]
 8003dfc:	691b      	ldr	r3, [r3, #16]
 8003dfe:	089b      	lsrs	r3, r3, #2
 8003e00:	021b      	lsls	r3, r3, #8
 8003e02:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8003e06:	69ba      	ldr	r2, [r7, #24]
 8003e08:	4313      	orrs	r3, r2
 8003e0a:	61bb      	str	r3, [r7, #24]
  /* Modify STMODR register value depending on DAC_Channel */
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1) << (Channel & 0x10UL), tmpreg2 << (Channel & 0x10UL));
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	f003 0310 	and.w	r3, r3, #16
 8003e18:	f640 710f 	movw	r1, #3855	; 0xf0f
 8003e1c:	fa01 f303 	lsl.w	r3, r1, r3
 8003e20:	43db      	mvns	r3, r3
 8003e22:	ea02 0103 	and.w	r1, r2, r3
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	f003 0310 	and.w	r3, r3, #16
 8003e2c:	69ba      	ldr	r2, [r7, #24]
 8003e2e:	409a      	lsls	r2, r3
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	430a      	orrs	r2, r1
 8003e36:	661a      	str	r2, [r3, #96]	; 0x60
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	2201      	movs	r2, #1
 8003e3c:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	2200      	movs	r2, #0
 8003e42:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8003e44:	2300      	movs	r3, #0
}
 8003e46:	4618      	mov	r0, r3
 8003e48:	3728      	adds	r7, #40	; 0x28
 8003e4a:	46bd      	mov	sp, r7
 8003e4c:	bd80      	pop	{r7, pc}
 8003e4e:	bf00      	nop
 8003e50:	09896800 	.word	0x09896800
 8003e54:	04c4b400 	.word	0x04c4b400

08003e58 <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8003e58:	b480      	push	{r7}
 8003e5a:	b083      	sub	sp, #12
 8003e5c:	af00      	add	r7, sp, #0
 8003e5e:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 8003e60:	bf00      	nop
 8003e62:	370c      	adds	r7, #12
 8003e64:	46bd      	mov	sp, r7
 8003e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e6a:	4770      	bx	lr

08003e6c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003e6c:	b580      	push	{r7, lr}
 8003e6e:	b084      	sub	sp, #16
 8003e70:	af00      	add	r7, sp, #0
 8003e72:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d101      	bne.n	8003e7e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8003e7a:	2301      	movs	r3, #1
 8003e7c:	e08d      	b.n	8003f9a <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	461a      	mov	r2, r3
 8003e84:	4b47      	ldr	r3, [pc, #284]	; (8003fa4 <HAL_DMA_Init+0x138>)
 8003e86:	429a      	cmp	r2, r3
 8003e88:	d80f      	bhi.n	8003eaa <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	461a      	mov	r2, r3
 8003e90:	4b45      	ldr	r3, [pc, #276]	; (8003fa8 <HAL_DMA_Init+0x13c>)
 8003e92:	4413      	add	r3, r2
 8003e94:	4a45      	ldr	r2, [pc, #276]	; (8003fac <HAL_DMA_Init+0x140>)
 8003e96:	fba2 2303 	umull	r2, r3, r2, r3
 8003e9a:	091b      	lsrs	r3, r3, #4
 8003e9c:	009a      	lsls	r2, r3, #2
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	4a42      	ldr	r2, [pc, #264]	; (8003fb0 <HAL_DMA_Init+0x144>)
 8003ea6:	641a      	str	r2, [r3, #64]	; 0x40
 8003ea8:	e00e      	b.n	8003ec8 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	461a      	mov	r2, r3
 8003eb0:	4b40      	ldr	r3, [pc, #256]	; (8003fb4 <HAL_DMA_Init+0x148>)
 8003eb2:	4413      	add	r3, r2
 8003eb4:	4a3d      	ldr	r2, [pc, #244]	; (8003fac <HAL_DMA_Init+0x140>)
 8003eb6:	fba2 2303 	umull	r2, r3, r2, r3
 8003eba:	091b      	lsrs	r3, r3, #4
 8003ebc:	009a      	lsls	r2, r3, #2
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	4a3c      	ldr	r2, [pc, #240]	; (8003fb8 <HAL_DMA_Init+0x14c>)
 8003ec6:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	2202      	movs	r2, #2
 8003ecc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8003ede:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ee2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8003eec:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	691b      	ldr	r3, [r3, #16]
 8003ef2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003ef8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	699b      	ldr	r3, [r3, #24]
 8003efe:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003f04:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	6a1b      	ldr	r3, [r3, #32]
 8003f0a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003f0c:	68fa      	ldr	r2, [r7, #12]
 8003f0e:	4313      	orrs	r3, r2
 8003f10:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	68fa      	ldr	r2, [r7, #12]
 8003f18:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003f1a:	6878      	ldr	r0, [r7, #4]
 8003f1c:	f000 fa76 	bl	800440c <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	689b      	ldr	r3, [r3, #8]
 8003f24:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003f28:	d102      	bne.n	8003f30 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	2200      	movs	r2, #0
 8003f2e:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	685a      	ldr	r2, [r3, #4]
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003f38:	b2d2      	uxtb	r2, r2
 8003f3a:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f40:	687a      	ldr	r2, [r7, #4]
 8003f42:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003f44:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	685b      	ldr	r3, [r3, #4]
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d010      	beq.n	8003f70 <HAL_DMA_Init+0x104>
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	685b      	ldr	r3, [r3, #4]
 8003f52:	2b04      	cmp	r3, #4
 8003f54:	d80c      	bhi.n	8003f70 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003f56:	6878      	ldr	r0, [r7, #4]
 8003f58:	f000 fa96 	bl	8004488 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f60:	2200      	movs	r2, #0
 8003f62:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f68:	687a      	ldr	r2, [r7, #4]
 8003f6a:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003f6c:	605a      	str	r2, [r3, #4]
 8003f6e:	e008      	b.n	8003f82 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	2200      	movs	r2, #0
 8003f74:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	2200      	movs	r2, #0
 8003f7a:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	2200      	movs	r2, #0
 8003f80:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	2200      	movs	r2, #0
 8003f86:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	2201      	movs	r2, #1
 8003f8c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	2200      	movs	r2, #0
 8003f94:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003f98:	2300      	movs	r3, #0
}
 8003f9a:	4618      	mov	r0, r3
 8003f9c:	3710      	adds	r7, #16
 8003f9e:	46bd      	mov	sp, r7
 8003fa0:	bd80      	pop	{r7, pc}
 8003fa2:	bf00      	nop
 8003fa4:	40020407 	.word	0x40020407
 8003fa8:	bffdfff8 	.word	0xbffdfff8
 8003fac:	cccccccd 	.word	0xcccccccd
 8003fb0:	40020000 	.word	0x40020000
 8003fb4:	bffdfbf8 	.word	0xbffdfbf8
 8003fb8:	40020400 	.word	0x40020400

08003fbc <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8003fbc:	b580      	push	{r7, lr}
 8003fbe:	b086      	sub	sp, #24
 8003fc0:	af00      	add	r7, sp, #0
 8003fc2:	60f8      	str	r0, [r7, #12]
 8003fc4:	60b9      	str	r1, [r7, #8]
 8003fc6:	607a      	str	r2, [r7, #4]
 8003fc8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003fca:	2300      	movs	r3, #0
 8003fcc:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003fd4:	2b01      	cmp	r3, #1
 8003fd6:	d101      	bne.n	8003fdc <HAL_DMA_Start_IT+0x20>
 8003fd8:	2302      	movs	r3, #2
 8003fda:	e066      	b.n	80040aa <HAL_DMA_Start_IT+0xee>
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	2201      	movs	r2, #1
 8003fe0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003fea:	b2db      	uxtb	r3, r3
 8003fec:	2b01      	cmp	r3, #1
 8003fee:	d155      	bne.n	800409c <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	2202      	movs	r2, #2
 8003ff4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	2200      	movs	r2, #0
 8003ffc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	681a      	ldr	r2, [r3, #0]
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	f022 0201 	bic.w	r2, r2, #1
 800400c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800400e:	683b      	ldr	r3, [r7, #0]
 8004010:	687a      	ldr	r2, [r7, #4]
 8004012:	68b9      	ldr	r1, [r7, #8]
 8004014:	68f8      	ldr	r0, [r7, #12]
 8004016:	f000 f9bb 	bl	8004390 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800401e:	2b00      	cmp	r3, #0
 8004020:	d008      	beq.n	8004034 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	681a      	ldr	r2, [r3, #0]
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	f042 020e 	orr.w	r2, r2, #14
 8004030:	601a      	str	r2, [r3, #0]
 8004032:	e00f      	b.n	8004054 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	681a      	ldr	r2, [r3, #0]
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	f022 0204 	bic.w	r2, r2, #4
 8004042:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	681a      	ldr	r2, [r3, #0]
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	f042 020a 	orr.w	r2, r2, #10
 8004052:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800405e:	2b00      	cmp	r3, #0
 8004060:	d007      	beq.n	8004072 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004066:	681a      	ldr	r2, [r3, #0]
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800406c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004070:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004076:	2b00      	cmp	r3, #0
 8004078:	d007      	beq.n	800408a <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800407e:	681a      	ldr	r2, [r3, #0]
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004084:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004088:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	681a      	ldr	r2, [r3, #0]
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	f042 0201 	orr.w	r2, r2, #1
 8004098:	601a      	str	r2, [r3, #0]
 800409a:	e005      	b.n	80040a8 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	2200      	movs	r2, #0
 80040a0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80040a4:	2302      	movs	r3, #2
 80040a6:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80040a8:	7dfb      	ldrb	r3, [r7, #23]
}
 80040aa:	4618      	mov	r0, r3
 80040ac:	3718      	adds	r7, #24
 80040ae:	46bd      	mov	sp, r7
 80040b0:	bd80      	pop	{r7, pc}

080040b2 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80040b2:	b480      	push	{r7}
 80040b4:	b085      	sub	sp, #20
 80040b6:	af00      	add	r7, sp, #0
 80040b8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80040ba:	2300      	movs	r3, #0
 80040bc:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80040c4:	b2db      	uxtb	r3, r3
 80040c6:	2b02      	cmp	r3, #2
 80040c8:	d005      	beq.n	80040d6 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	2204      	movs	r2, #4
 80040ce:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80040d0:	2301      	movs	r3, #1
 80040d2:	73fb      	strb	r3, [r7, #15]
 80040d4:	e037      	b.n	8004146 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	681a      	ldr	r2, [r3, #0]
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	f022 020e 	bic.w	r2, r2, #14
 80040e4:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80040ea:	681a      	ldr	r2, [r3, #0]
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80040f0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80040f4:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	681a      	ldr	r2, [r3, #0]
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	f022 0201 	bic.w	r2, r2, #1
 8004104:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800410a:	f003 021f 	and.w	r2, r3, #31
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004112:	2101      	movs	r1, #1
 8004114:	fa01 f202 	lsl.w	r2, r1, r2
 8004118:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800411e:	687a      	ldr	r2, [r7, #4]
 8004120:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004122:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004128:	2b00      	cmp	r3, #0
 800412a:	d00c      	beq.n	8004146 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004130:	681a      	ldr	r2, [r3, #0]
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004136:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800413a:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004140:	687a      	ldr	r2, [r7, #4]
 8004142:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8004144:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	2201      	movs	r2, #1
 800414a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	2200      	movs	r2, #0
 8004152:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 8004156:	7bfb      	ldrb	r3, [r7, #15]
}
 8004158:	4618      	mov	r0, r3
 800415a:	3714      	adds	r7, #20
 800415c:	46bd      	mov	sp, r7
 800415e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004162:	4770      	bx	lr

08004164 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004164:	b580      	push	{r7, lr}
 8004166:	b084      	sub	sp, #16
 8004168:	af00      	add	r7, sp, #0
 800416a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800416c:	2300      	movs	r3, #0
 800416e:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004176:	b2db      	uxtb	r3, r3
 8004178:	2b02      	cmp	r3, #2
 800417a:	d00d      	beq.n	8004198 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	2204      	movs	r2, #4
 8004180:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	2201      	movs	r2, #1
 8004186:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	2200      	movs	r2, #0
 800418e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 8004192:	2301      	movs	r3, #1
 8004194:	73fb      	strb	r3, [r7, #15]
 8004196:	e047      	b.n	8004228 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	681a      	ldr	r2, [r3, #0]
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	f022 020e 	bic.w	r2, r2, #14
 80041a6:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	681a      	ldr	r2, [r3, #0]
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	f022 0201 	bic.w	r2, r2, #1
 80041b6:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80041bc:	681a      	ldr	r2, [r3, #0]
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80041c2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80041c6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041cc:	f003 021f 	and.w	r2, r3, #31
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041d4:	2101      	movs	r1, #1
 80041d6:	fa01 f202 	lsl.w	r2, r1, r2
 80041da:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80041e0:	687a      	ldr	r2, [r7, #4]
 80041e2:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80041e4:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d00c      	beq.n	8004208 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041f2:	681a      	ldr	r2, [r3, #0]
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041f8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80041fc:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004202:	687a      	ldr	r2, [r7, #4]
 8004204:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8004206:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	2201      	movs	r2, #1
 800420c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	2200      	movs	r2, #0
 8004214:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800421c:	2b00      	cmp	r3, #0
 800421e:	d003      	beq.n	8004228 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004224:	6878      	ldr	r0, [r7, #4]
 8004226:	4798      	blx	r3
    }
  }
  return status;
 8004228:	7bfb      	ldrb	r3, [r7, #15]
}
 800422a:	4618      	mov	r0, r3
 800422c:	3710      	adds	r7, #16
 800422e:	46bd      	mov	sp, r7
 8004230:	bd80      	pop	{r7, pc}

08004232 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004232:	b580      	push	{r7, lr}
 8004234:	b084      	sub	sp, #16
 8004236:	af00      	add	r7, sp, #0
 8004238:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800424e:	f003 031f 	and.w	r3, r3, #31
 8004252:	2204      	movs	r2, #4
 8004254:	409a      	lsls	r2, r3
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	4013      	ands	r3, r2
 800425a:	2b00      	cmp	r3, #0
 800425c:	d026      	beq.n	80042ac <HAL_DMA_IRQHandler+0x7a>
 800425e:	68bb      	ldr	r3, [r7, #8]
 8004260:	f003 0304 	and.w	r3, r3, #4
 8004264:	2b00      	cmp	r3, #0
 8004266:	d021      	beq.n	80042ac <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	f003 0320 	and.w	r3, r3, #32
 8004272:	2b00      	cmp	r3, #0
 8004274:	d107      	bne.n	8004286 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	681a      	ldr	r2, [r3, #0]
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	f022 0204 	bic.w	r2, r2, #4
 8004284:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800428a:	f003 021f 	and.w	r2, r3, #31
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004292:	2104      	movs	r1, #4
 8004294:	fa01 f202 	lsl.w	r2, r1, r2
 8004298:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d071      	beq.n	8004386 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042a6:	6878      	ldr	r0, [r7, #4]
 80042a8:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80042aa:	e06c      	b.n	8004386 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042b0:	f003 031f 	and.w	r3, r3, #31
 80042b4:	2202      	movs	r2, #2
 80042b6:	409a      	lsls	r2, r3
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	4013      	ands	r3, r2
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d02e      	beq.n	800431e <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 80042c0:	68bb      	ldr	r3, [r7, #8]
 80042c2:	f003 0302 	and.w	r3, r3, #2
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d029      	beq.n	800431e <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	f003 0320 	and.w	r3, r3, #32
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d10b      	bne.n	80042f0 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	681a      	ldr	r2, [r3, #0]
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	f022 020a 	bic.w	r2, r2, #10
 80042e6:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	2201      	movs	r2, #1
 80042ec:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042f4:	f003 021f 	and.w	r2, r3, #31
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042fc:	2102      	movs	r1, #2
 80042fe:	fa01 f202 	lsl.w	r2, r1, r2
 8004302:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	2200      	movs	r2, #0
 8004308:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004310:	2b00      	cmp	r3, #0
 8004312:	d038      	beq.n	8004386 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004318:	6878      	ldr	r0, [r7, #4]
 800431a:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 800431c:	e033      	b.n	8004386 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004322:	f003 031f 	and.w	r3, r3, #31
 8004326:	2208      	movs	r2, #8
 8004328:	409a      	lsls	r2, r3
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	4013      	ands	r3, r2
 800432e:	2b00      	cmp	r3, #0
 8004330:	d02a      	beq.n	8004388 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8004332:	68bb      	ldr	r3, [r7, #8]
 8004334:	f003 0308 	and.w	r3, r3, #8
 8004338:	2b00      	cmp	r3, #0
 800433a:	d025      	beq.n	8004388 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	681a      	ldr	r2, [r3, #0]
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	f022 020e 	bic.w	r2, r2, #14
 800434a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004350:	f003 021f 	and.w	r2, r3, #31
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004358:	2101      	movs	r1, #1
 800435a:	fa01 f202 	lsl.w	r2, r1, r2
 800435e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	2201      	movs	r2, #1
 8004364:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	2201      	movs	r2, #1
 800436a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	2200      	movs	r2, #0
 8004372:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800437a:	2b00      	cmp	r3, #0
 800437c:	d004      	beq.n	8004388 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004382:	6878      	ldr	r0, [r7, #4]
 8004384:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8004386:	bf00      	nop
 8004388:	bf00      	nop
}
 800438a:	3710      	adds	r7, #16
 800438c:	46bd      	mov	sp, r7
 800438e:	bd80      	pop	{r7, pc}

08004390 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004390:	b480      	push	{r7}
 8004392:	b085      	sub	sp, #20
 8004394:	af00      	add	r7, sp, #0
 8004396:	60f8      	str	r0, [r7, #12]
 8004398:	60b9      	str	r1, [r7, #8]
 800439a:	607a      	str	r2, [r7, #4]
 800439c:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80043a2:	68fa      	ldr	r2, [r7, #12]
 80043a4:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80043a6:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d004      	beq.n	80043ba <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043b4:	68fa      	ldr	r2, [r7, #12]
 80043b6:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80043b8:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043be:	f003 021f 	and.w	r2, r3, #31
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043c6:	2101      	movs	r1, #1
 80043c8:	fa01 f202 	lsl.w	r2, r1, r2
 80043cc:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	683a      	ldr	r2, [r7, #0]
 80043d4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	689b      	ldr	r3, [r3, #8]
 80043da:	2b10      	cmp	r3, #16
 80043dc:	d108      	bne.n	80043f0 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	687a      	ldr	r2, [r7, #4]
 80043e4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	68ba      	ldr	r2, [r7, #8]
 80043ec:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80043ee:	e007      	b.n	8004400 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	68ba      	ldr	r2, [r7, #8]
 80043f6:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	687a      	ldr	r2, [r7, #4]
 80043fe:	60da      	str	r2, [r3, #12]
}
 8004400:	bf00      	nop
 8004402:	3714      	adds	r7, #20
 8004404:	46bd      	mov	sp, r7
 8004406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800440a:	4770      	bx	lr

0800440c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800440c:	b480      	push	{r7}
 800440e:	b087      	sub	sp, #28
 8004410:	af00      	add	r7, sp, #0
 8004412:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	461a      	mov	r2, r3
 800441a:	4b16      	ldr	r3, [pc, #88]	; (8004474 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 800441c:	429a      	cmp	r2, r3
 800441e:	d802      	bhi.n	8004426 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8004420:	4b15      	ldr	r3, [pc, #84]	; (8004478 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8004422:	617b      	str	r3, [r7, #20]
 8004424:	e001      	b.n	800442a <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 8004426:	4b15      	ldr	r3, [pc, #84]	; (800447c <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8004428:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 800442a:	697b      	ldr	r3, [r7, #20]
 800442c:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	b2db      	uxtb	r3, r3
 8004434:	3b08      	subs	r3, #8
 8004436:	4a12      	ldr	r2, [pc, #72]	; (8004480 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8004438:	fba2 2303 	umull	r2, r3, r2, r3
 800443c:	091b      	lsrs	r3, r3, #4
 800443e:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004444:	089b      	lsrs	r3, r3, #2
 8004446:	009a      	lsls	r2, r3, #2
 8004448:	693b      	ldr	r3, [r7, #16]
 800444a:	4413      	add	r3, r2
 800444c:	461a      	mov	r2, r3
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	4a0b      	ldr	r2, [pc, #44]	; (8004484 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8004456:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	f003 031f 	and.w	r3, r3, #31
 800445e:	2201      	movs	r2, #1
 8004460:	409a      	lsls	r2, r3
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	651a      	str	r2, [r3, #80]	; 0x50
}
 8004466:	bf00      	nop
 8004468:	371c      	adds	r7, #28
 800446a:	46bd      	mov	sp, r7
 800446c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004470:	4770      	bx	lr
 8004472:	bf00      	nop
 8004474:	40020407 	.word	0x40020407
 8004478:	40020800 	.word	0x40020800
 800447c:	40020820 	.word	0x40020820
 8004480:	cccccccd 	.word	0xcccccccd
 8004484:	40020880 	.word	0x40020880

08004488 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004488:	b480      	push	{r7}
 800448a:	b085      	sub	sp, #20
 800448c:	af00      	add	r7, sp, #0
 800448e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	685b      	ldr	r3, [r3, #4]
 8004494:	b2db      	uxtb	r3, r3
 8004496:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004498:	68fa      	ldr	r2, [r7, #12]
 800449a:	4b0b      	ldr	r3, [pc, #44]	; (80044c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 800449c:	4413      	add	r3, r2
 800449e:	009b      	lsls	r3, r3, #2
 80044a0:	461a      	mov	r2, r3
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	4a08      	ldr	r2, [pc, #32]	; (80044cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80044aa:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	3b01      	subs	r3, #1
 80044b0:	f003 031f 	and.w	r3, r3, #31
 80044b4:	2201      	movs	r2, #1
 80044b6:	409a      	lsls	r2, r3
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	65da      	str	r2, [r3, #92]	; 0x5c
}
 80044bc:	bf00      	nop
 80044be:	3714      	adds	r7, #20
 80044c0:	46bd      	mov	sp, r7
 80044c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c6:	4770      	bx	lr
 80044c8:	1000823f 	.word	0x1000823f
 80044cc:	40020940 	.word	0x40020940

080044d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80044d0:	b480      	push	{r7}
 80044d2:	b087      	sub	sp, #28
 80044d4:	af00      	add	r7, sp, #0
 80044d6:	6078      	str	r0, [r7, #4]
 80044d8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80044da:	2300      	movs	r3, #0
 80044dc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80044de:	e15a      	b.n	8004796 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80044e0:	683b      	ldr	r3, [r7, #0]
 80044e2:	681a      	ldr	r2, [r3, #0]
 80044e4:	2101      	movs	r1, #1
 80044e6:	697b      	ldr	r3, [r7, #20]
 80044e8:	fa01 f303 	lsl.w	r3, r1, r3
 80044ec:	4013      	ands	r3, r2
 80044ee:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	f000 814c 	beq.w	8004790 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80044f8:	683b      	ldr	r3, [r7, #0]
 80044fa:	685b      	ldr	r3, [r3, #4]
 80044fc:	2b01      	cmp	r3, #1
 80044fe:	d00b      	beq.n	8004518 <HAL_GPIO_Init+0x48>
 8004500:	683b      	ldr	r3, [r7, #0]
 8004502:	685b      	ldr	r3, [r3, #4]
 8004504:	2b02      	cmp	r3, #2
 8004506:	d007      	beq.n	8004518 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004508:	683b      	ldr	r3, [r7, #0]
 800450a:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800450c:	2b11      	cmp	r3, #17
 800450e:	d003      	beq.n	8004518 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004510:	683b      	ldr	r3, [r7, #0]
 8004512:	685b      	ldr	r3, [r3, #4]
 8004514:	2b12      	cmp	r3, #18
 8004516:	d130      	bne.n	800457a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	689b      	ldr	r3, [r3, #8]
 800451c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800451e:	697b      	ldr	r3, [r7, #20]
 8004520:	005b      	lsls	r3, r3, #1
 8004522:	2203      	movs	r2, #3
 8004524:	fa02 f303 	lsl.w	r3, r2, r3
 8004528:	43db      	mvns	r3, r3
 800452a:	693a      	ldr	r2, [r7, #16]
 800452c:	4013      	ands	r3, r2
 800452e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004530:	683b      	ldr	r3, [r7, #0]
 8004532:	68da      	ldr	r2, [r3, #12]
 8004534:	697b      	ldr	r3, [r7, #20]
 8004536:	005b      	lsls	r3, r3, #1
 8004538:	fa02 f303 	lsl.w	r3, r2, r3
 800453c:	693a      	ldr	r2, [r7, #16]
 800453e:	4313      	orrs	r3, r2
 8004540:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	693a      	ldr	r2, [r7, #16]
 8004546:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	685b      	ldr	r3, [r3, #4]
 800454c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800454e:	2201      	movs	r2, #1
 8004550:	697b      	ldr	r3, [r7, #20]
 8004552:	fa02 f303 	lsl.w	r3, r2, r3
 8004556:	43db      	mvns	r3, r3
 8004558:	693a      	ldr	r2, [r7, #16]
 800455a:	4013      	ands	r3, r2
 800455c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800455e:	683b      	ldr	r3, [r7, #0]
 8004560:	685b      	ldr	r3, [r3, #4]
 8004562:	091b      	lsrs	r3, r3, #4
 8004564:	f003 0201 	and.w	r2, r3, #1
 8004568:	697b      	ldr	r3, [r7, #20]
 800456a:	fa02 f303 	lsl.w	r3, r2, r3
 800456e:	693a      	ldr	r2, [r7, #16]
 8004570:	4313      	orrs	r3, r2
 8004572:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	693a      	ldr	r2, [r7, #16]
 8004578:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	68db      	ldr	r3, [r3, #12]
 800457e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004580:	697b      	ldr	r3, [r7, #20]
 8004582:	005b      	lsls	r3, r3, #1
 8004584:	2203      	movs	r2, #3
 8004586:	fa02 f303 	lsl.w	r3, r2, r3
 800458a:	43db      	mvns	r3, r3
 800458c:	693a      	ldr	r2, [r7, #16]
 800458e:	4013      	ands	r3, r2
 8004590:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004592:	683b      	ldr	r3, [r7, #0]
 8004594:	689a      	ldr	r2, [r3, #8]
 8004596:	697b      	ldr	r3, [r7, #20]
 8004598:	005b      	lsls	r3, r3, #1
 800459a:	fa02 f303 	lsl.w	r3, r2, r3
 800459e:	693a      	ldr	r2, [r7, #16]
 80045a0:	4313      	orrs	r3, r2
 80045a2:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	693a      	ldr	r2, [r7, #16]
 80045a8:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80045aa:	683b      	ldr	r3, [r7, #0]
 80045ac:	685b      	ldr	r3, [r3, #4]
 80045ae:	2b02      	cmp	r3, #2
 80045b0:	d003      	beq.n	80045ba <HAL_GPIO_Init+0xea>
 80045b2:	683b      	ldr	r3, [r7, #0]
 80045b4:	685b      	ldr	r3, [r3, #4]
 80045b6:	2b12      	cmp	r3, #18
 80045b8:	d123      	bne.n	8004602 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80045ba:	697b      	ldr	r3, [r7, #20]
 80045bc:	08da      	lsrs	r2, r3, #3
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	3208      	adds	r2, #8
 80045c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80045c6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80045c8:	697b      	ldr	r3, [r7, #20]
 80045ca:	f003 0307 	and.w	r3, r3, #7
 80045ce:	009b      	lsls	r3, r3, #2
 80045d0:	220f      	movs	r2, #15
 80045d2:	fa02 f303 	lsl.w	r3, r2, r3
 80045d6:	43db      	mvns	r3, r3
 80045d8:	693a      	ldr	r2, [r7, #16]
 80045da:	4013      	ands	r3, r2
 80045dc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80045de:	683b      	ldr	r3, [r7, #0]
 80045e0:	691a      	ldr	r2, [r3, #16]
 80045e2:	697b      	ldr	r3, [r7, #20]
 80045e4:	f003 0307 	and.w	r3, r3, #7
 80045e8:	009b      	lsls	r3, r3, #2
 80045ea:	fa02 f303 	lsl.w	r3, r2, r3
 80045ee:	693a      	ldr	r2, [r7, #16]
 80045f0:	4313      	orrs	r3, r2
 80045f2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80045f4:	697b      	ldr	r3, [r7, #20]
 80045f6:	08da      	lsrs	r2, r3, #3
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	3208      	adds	r2, #8
 80045fc:	6939      	ldr	r1, [r7, #16]
 80045fe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004608:	697b      	ldr	r3, [r7, #20]
 800460a:	005b      	lsls	r3, r3, #1
 800460c:	2203      	movs	r2, #3
 800460e:	fa02 f303 	lsl.w	r3, r2, r3
 8004612:	43db      	mvns	r3, r3
 8004614:	693a      	ldr	r2, [r7, #16]
 8004616:	4013      	ands	r3, r2
 8004618:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800461a:	683b      	ldr	r3, [r7, #0]
 800461c:	685b      	ldr	r3, [r3, #4]
 800461e:	f003 0203 	and.w	r2, r3, #3
 8004622:	697b      	ldr	r3, [r7, #20]
 8004624:	005b      	lsls	r3, r3, #1
 8004626:	fa02 f303 	lsl.w	r3, r2, r3
 800462a:	693a      	ldr	r2, [r7, #16]
 800462c:	4313      	orrs	r3, r2
 800462e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	693a      	ldr	r2, [r7, #16]
 8004634:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004636:	683b      	ldr	r3, [r7, #0]
 8004638:	685b      	ldr	r3, [r3, #4]
 800463a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800463e:	2b00      	cmp	r3, #0
 8004640:	f000 80a6 	beq.w	8004790 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004644:	4b5b      	ldr	r3, [pc, #364]	; (80047b4 <HAL_GPIO_Init+0x2e4>)
 8004646:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004648:	4a5a      	ldr	r2, [pc, #360]	; (80047b4 <HAL_GPIO_Init+0x2e4>)
 800464a:	f043 0301 	orr.w	r3, r3, #1
 800464e:	6613      	str	r3, [r2, #96]	; 0x60
 8004650:	4b58      	ldr	r3, [pc, #352]	; (80047b4 <HAL_GPIO_Init+0x2e4>)
 8004652:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004654:	f003 0301 	and.w	r3, r3, #1
 8004658:	60bb      	str	r3, [r7, #8]
 800465a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 800465c:	4a56      	ldr	r2, [pc, #344]	; (80047b8 <HAL_GPIO_Init+0x2e8>)
 800465e:	697b      	ldr	r3, [r7, #20]
 8004660:	089b      	lsrs	r3, r3, #2
 8004662:	3302      	adds	r3, #2
 8004664:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004668:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800466a:	697b      	ldr	r3, [r7, #20]
 800466c:	f003 0303 	and.w	r3, r3, #3
 8004670:	009b      	lsls	r3, r3, #2
 8004672:	220f      	movs	r2, #15
 8004674:	fa02 f303 	lsl.w	r3, r2, r3
 8004678:	43db      	mvns	r3, r3
 800467a:	693a      	ldr	r2, [r7, #16]
 800467c:	4013      	ands	r3, r2
 800467e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8004686:	d01f      	beq.n	80046c8 <HAL_GPIO_Init+0x1f8>
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	4a4c      	ldr	r2, [pc, #304]	; (80047bc <HAL_GPIO_Init+0x2ec>)
 800468c:	4293      	cmp	r3, r2
 800468e:	d019      	beq.n	80046c4 <HAL_GPIO_Init+0x1f4>
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	4a4b      	ldr	r2, [pc, #300]	; (80047c0 <HAL_GPIO_Init+0x2f0>)
 8004694:	4293      	cmp	r3, r2
 8004696:	d013      	beq.n	80046c0 <HAL_GPIO_Init+0x1f0>
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	4a4a      	ldr	r2, [pc, #296]	; (80047c4 <HAL_GPIO_Init+0x2f4>)
 800469c:	4293      	cmp	r3, r2
 800469e:	d00d      	beq.n	80046bc <HAL_GPIO_Init+0x1ec>
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	4a49      	ldr	r2, [pc, #292]	; (80047c8 <HAL_GPIO_Init+0x2f8>)
 80046a4:	4293      	cmp	r3, r2
 80046a6:	d007      	beq.n	80046b8 <HAL_GPIO_Init+0x1e8>
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	4a48      	ldr	r2, [pc, #288]	; (80047cc <HAL_GPIO_Init+0x2fc>)
 80046ac:	4293      	cmp	r3, r2
 80046ae:	d101      	bne.n	80046b4 <HAL_GPIO_Init+0x1e4>
 80046b0:	2305      	movs	r3, #5
 80046b2:	e00a      	b.n	80046ca <HAL_GPIO_Init+0x1fa>
 80046b4:	2306      	movs	r3, #6
 80046b6:	e008      	b.n	80046ca <HAL_GPIO_Init+0x1fa>
 80046b8:	2304      	movs	r3, #4
 80046ba:	e006      	b.n	80046ca <HAL_GPIO_Init+0x1fa>
 80046bc:	2303      	movs	r3, #3
 80046be:	e004      	b.n	80046ca <HAL_GPIO_Init+0x1fa>
 80046c0:	2302      	movs	r3, #2
 80046c2:	e002      	b.n	80046ca <HAL_GPIO_Init+0x1fa>
 80046c4:	2301      	movs	r3, #1
 80046c6:	e000      	b.n	80046ca <HAL_GPIO_Init+0x1fa>
 80046c8:	2300      	movs	r3, #0
 80046ca:	697a      	ldr	r2, [r7, #20]
 80046cc:	f002 0203 	and.w	r2, r2, #3
 80046d0:	0092      	lsls	r2, r2, #2
 80046d2:	4093      	lsls	r3, r2
 80046d4:	693a      	ldr	r2, [r7, #16]
 80046d6:	4313      	orrs	r3, r2
 80046d8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80046da:	4937      	ldr	r1, [pc, #220]	; (80047b8 <HAL_GPIO_Init+0x2e8>)
 80046dc:	697b      	ldr	r3, [r7, #20]
 80046de:	089b      	lsrs	r3, r3, #2
 80046e0:	3302      	adds	r3, #2
 80046e2:	693a      	ldr	r2, [r7, #16]
 80046e4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80046e8:	4b39      	ldr	r3, [pc, #228]	; (80047d0 <HAL_GPIO_Init+0x300>)
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	43db      	mvns	r3, r3
 80046f2:	693a      	ldr	r2, [r7, #16]
 80046f4:	4013      	ands	r3, r2
 80046f6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80046f8:	683b      	ldr	r3, [r7, #0]
 80046fa:	685b      	ldr	r3, [r3, #4]
 80046fc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004700:	2b00      	cmp	r3, #0
 8004702:	d003      	beq.n	800470c <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8004704:	693a      	ldr	r2, [r7, #16]
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	4313      	orrs	r3, r2
 800470a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800470c:	4a30      	ldr	r2, [pc, #192]	; (80047d0 <HAL_GPIO_Init+0x300>)
 800470e:	693b      	ldr	r3, [r7, #16]
 8004710:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8004712:	4b2f      	ldr	r3, [pc, #188]	; (80047d0 <HAL_GPIO_Init+0x300>)
 8004714:	685b      	ldr	r3, [r3, #4]
 8004716:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	43db      	mvns	r3, r3
 800471c:	693a      	ldr	r2, [r7, #16]
 800471e:	4013      	ands	r3, r2
 8004720:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004722:	683b      	ldr	r3, [r7, #0]
 8004724:	685b      	ldr	r3, [r3, #4]
 8004726:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800472a:	2b00      	cmp	r3, #0
 800472c:	d003      	beq.n	8004736 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800472e:	693a      	ldr	r2, [r7, #16]
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	4313      	orrs	r3, r2
 8004734:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004736:	4a26      	ldr	r2, [pc, #152]	; (80047d0 <HAL_GPIO_Init+0x300>)
 8004738:	693b      	ldr	r3, [r7, #16]
 800473a:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800473c:	4b24      	ldr	r3, [pc, #144]	; (80047d0 <HAL_GPIO_Init+0x300>)
 800473e:	689b      	ldr	r3, [r3, #8]
 8004740:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	43db      	mvns	r3, r3
 8004746:	693a      	ldr	r2, [r7, #16]
 8004748:	4013      	ands	r3, r2
 800474a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800474c:	683b      	ldr	r3, [r7, #0]
 800474e:	685b      	ldr	r3, [r3, #4]
 8004750:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004754:	2b00      	cmp	r3, #0
 8004756:	d003      	beq.n	8004760 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8004758:	693a      	ldr	r2, [r7, #16]
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	4313      	orrs	r3, r2
 800475e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004760:	4a1b      	ldr	r2, [pc, #108]	; (80047d0 <HAL_GPIO_Init+0x300>)
 8004762:	693b      	ldr	r3, [r7, #16]
 8004764:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8004766:	4b1a      	ldr	r3, [pc, #104]	; (80047d0 <HAL_GPIO_Init+0x300>)
 8004768:	68db      	ldr	r3, [r3, #12]
 800476a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	43db      	mvns	r3, r3
 8004770:	693a      	ldr	r2, [r7, #16]
 8004772:	4013      	ands	r3, r2
 8004774:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004776:	683b      	ldr	r3, [r7, #0]
 8004778:	685b      	ldr	r3, [r3, #4]
 800477a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800477e:	2b00      	cmp	r3, #0
 8004780:	d003      	beq.n	800478a <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8004782:	693a      	ldr	r2, [r7, #16]
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	4313      	orrs	r3, r2
 8004788:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800478a:	4a11      	ldr	r2, [pc, #68]	; (80047d0 <HAL_GPIO_Init+0x300>)
 800478c:	693b      	ldr	r3, [r7, #16]
 800478e:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8004790:	697b      	ldr	r3, [r7, #20]
 8004792:	3301      	adds	r3, #1
 8004794:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8004796:	683b      	ldr	r3, [r7, #0]
 8004798:	681a      	ldr	r2, [r3, #0]
 800479a:	697b      	ldr	r3, [r7, #20]
 800479c:	fa22 f303 	lsr.w	r3, r2, r3
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	f47f ae9d 	bne.w	80044e0 <HAL_GPIO_Init+0x10>
  }
}
 80047a6:	bf00      	nop
 80047a8:	bf00      	nop
 80047aa:	371c      	adds	r7, #28
 80047ac:	46bd      	mov	sp, r7
 80047ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b2:	4770      	bx	lr
 80047b4:	40021000 	.word	0x40021000
 80047b8:	40010000 	.word	0x40010000
 80047bc:	48000400 	.word	0x48000400
 80047c0:	48000800 	.word	0x48000800
 80047c4:	48000c00 	.word	0x48000c00
 80047c8:	48001000 	.word	0x48001000
 80047cc:	48001400 	.word	0x48001400
 80047d0:	40010400 	.word	0x40010400

080047d4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80047d4:	b480      	push	{r7}
 80047d6:	b083      	sub	sp, #12
 80047d8:	af00      	add	r7, sp, #0
 80047da:	6078      	str	r0, [r7, #4]
 80047dc:	460b      	mov	r3, r1
 80047de:	807b      	strh	r3, [r7, #2]
 80047e0:	4613      	mov	r3, r2
 80047e2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80047e4:	787b      	ldrb	r3, [r7, #1]
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d003      	beq.n	80047f2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80047ea:	887a      	ldrh	r2, [r7, #2]
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80047f0:	e002      	b.n	80047f8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80047f2:	887a      	ldrh	r2, [r7, #2]
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80047f8:	bf00      	nop
 80047fa:	370c      	adds	r7, #12
 80047fc:	46bd      	mov	sp, r7
 80047fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004802:	4770      	bx	lr

08004804 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004804:	b480      	push	{r7}
 8004806:	b085      	sub	sp, #20
 8004808:	af00      	add	r7, sp, #0
 800480a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	2b00      	cmp	r3, #0
 8004810:	d141      	bne.n	8004896 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004812:	4b4b      	ldr	r3, [pc, #300]	; (8004940 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800481a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800481e:	d131      	bne.n	8004884 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004820:	4b47      	ldr	r3, [pc, #284]	; (8004940 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004822:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004826:	4a46      	ldr	r2, [pc, #280]	; (8004940 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004828:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800482c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004830:	4b43      	ldr	r3, [pc, #268]	; (8004940 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004838:	4a41      	ldr	r2, [pc, #260]	; (8004940 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800483a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800483e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004840:	4b40      	ldr	r3, [pc, #256]	; (8004944 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	2232      	movs	r2, #50	; 0x32
 8004846:	fb02 f303 	mul.w	r3, r2, r3
 800484a:	4a3f      	ldr	r2, [pc, #252]	; (8004948 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800484c:	fba2 2303 	umull	r2, r3, r2, r3
 8004850:	0c9b      	lsrs	r3, r3, #18
 8004852:	3301      	adds	r3, #1
 8004854:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004856:	e002      	b.n	800485e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	3b01      	subs	r3, #1
 800485c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800485e:	4b38      	ldr	r3, [pc, #224]	; (8004940 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004860:	695b      	ldr	r3, [r3, #20]
 8004862:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004866:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800486a:	d102      	bne.n	8004872 <HAL_PWREx_ControlVoltageScaling+0x6e>
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	2b00      	cmp	r3, #0
 8004870:	d1f2      	bne.n	8004858 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004872:	4b33      	ldr	r3, [pc, #204]	; (8004940 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004874:	695b      	ldr	r3, [r3, #20]
 8004876:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800487a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800487e:	d158      	bne.n	8004932 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004880:	2303      	movs	r3, #3
 8004882:	e057      	b.n	8004934 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004884:	4b2e      	ldr	r3, [pc, #184]	; (8004940 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004886:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800488a:	4a2d      	ldr	r2, [pc, #180]	; (8004940 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800488c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004890:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8004894:	e04d      	b.n	8004932 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800489c:	d141      	bne.n	8004922 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800489e:	4b28      	ldr	r3, [pc, #160]	; (8004940 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80048a6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80048aa:	d131      	bne.n	8004910 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80048ac:	4b24      	ldr	r3, [pc, #144]	; (8004940 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80048ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80048b2:	4a23      	ldr	r2, [pc, #140]	; (8004940 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80048b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80048b8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80048bc:	4b20      	ldr	r3, [pc, #128]	; (8004940 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80048c4:	4a1e      	ldr	r2, [pc, #120]	; (8004940 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80048c6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80048ca:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80048cc:	4b1d      	ldr	r3, [pc, #116]	; (8004944 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	2232      	movs	r2, #50	; 0x32
 80048d2:	fb02 f303 	mul.w	r3, r2, r3
 80048d6:	4a1c      	ldr	r2, [pc, #112]	; (8004948 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80048d8:	fba2 2303 	umull	r2, r3, r2, r3
 80048dc:	0c9b      	lsrs	r3, r3, #18
 80048de:	3301      	adds	r3, #1
 80048e0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80048e2:	e002      	b.n	80048ea <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	3b01      	subs	r3, #1
 80048e8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80048ea:	4b15      	ldr	r3, [pc, #84]	; (8004940 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80048ec:	695b      	ldr	r3, [r3, #20]
 80048ee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80048f2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80048f6:	d102      	bne.n	80048fe <HAL_PWREx_ControlVoltageScaling+0xfa>
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d1f2      	bne.n	80048e4 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80048fe:	4b10      	ldr	r3, [pc, #64]	; (8004940 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004900:	695b      	ldr	r3, [r3, #20]
 8004902:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004906:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800490a:	d112      	bne.n	8004932 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800490c:	2303      	movs	r3, #3
 800490e:	e011      	b.n	8004934 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004910:	4b0b      	ldr	r3, [pc, #44]	; (8004940 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004912:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004916:	4a0a      	ldr	r2, [pc, #40]	; (8004940 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004918:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800491c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8004920:	e007      	b.n	8004932 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004922:	4b07      	ldr	r3, [pc, #28]	; (8004940 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800492a:	4a05      	ldr	r2, [pc, #20]	; (8004940 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800492c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004930:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8004932:	2300      	movs	r3, #0
}
 8004934:	4618      	mov	r0, r3
 8004936:	3714      	adds	r7, #20
 8004938:	46bd      	mov	sp, r7
 800493a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800493e:	4770      	bx	lr
 8004940:	40007000 	.word	0x40007000
 8004944:	20000408 	.word	0x20000408
 8004948:	431bde83 	.word	0x431bde83

0800494c <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 800494c:	b480      	push	{r7}
 800494e:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8004950:	4b05      	ldr	r3, [pc, #20]	; (8004968 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8004952:	689b      	ldr	r3, [r3, #8]
 8004954:	4a04      	ldr	r2, [pc, #16]	; (8004968 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8004956:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800495a:	6093      	str	r3, [r2, #8]
}
 800495c:	bf00      	nop
 800495e:	46bd      	mov	sp, r7
 8004960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004964:	4770      	bx	lr
 8004966:	bf00      	nop
 8004968:	40007000 	.word	0x40007000

0800496c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800496c:	b580      	push	{r7, lr}
 800496e:	b088      	sub	sp, #32
 8004970:	af00      	add	r7, sp, #0
 8004972:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	2b00      	cmp	r3, #0
 8004978:	d101      	bne.n	800497e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800497a:	2301      	movs	r3, #1
 800497c:	e308      	b.n	8004f90 <HAL_RCC_OscConfig+0x624>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	f003 0301 	and.w	r3, r3, #1
 8004986:	2b00      	cmp	r3, #0
 8004988:	d075      	beq.n	8004a76 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800498a:	4ba3      	ldr	r3, [pc, #652]	; (8004c18 <HAL_RCC_OscConfig+0x2ac>)
 800498c:	689b      	ldr	r3, [r3, #8]
 800498e:	f003 030c 	and.w	r3, r3, #12
 8004992:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004994:	4ba0      	ldr	r3, [pc, #640]	; (8004c18 <HAL_RCC_OscConfig+0x2ac>)
 8004996:	68db      	ldr	r3, [r3, #12]
 8004998:	f003 0303 	and.w	r3, r3, #3
 800499c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800499e:	69bb      	ldr	r3, [r7, #24]
 80049a0:	2b0c      	cmp	r3, #12
 80049a2:	d102      	bne.n	80049aa <HAL_RCC_OscConfig+0x3e>
 80049a4:	697b      	ldr	r3, [r7, #20]
 80049a6:	2b03      	cmp	r3, #3
 80049a8:	d002      	beq.n	80049b0 <HAL_RCC_OscConfig+0x44>
 80049aa:	69bb      	ldr	r3, [r7, #24]
 80049ac:	2b08      	cmp	r3, #8
 80049ae:	d10b      	bne.n	80049c8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80049b0:	4b99      	ldr	r3, [pc, #612]	; (8004c18 <HAL_RCC_OscConfig+0x2ac>)
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d05b      	beq.n	8004a74 <HAL_RCC_OscConfig+0x108>
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	685b      	ldr	r3, [r3, #4]
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d157      	bne.n	8004a74 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80049c4:	2301      	movs	r3, #1
 80049c6:	e2e3      	b.n	8004f90 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	685b      	ldr	r3, [r3, #4]
 80049cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80049d0:	d106      	bne.n	80049e0 <HAL_RCC_OscConfig+0x74>
 80049d2:	4b91      	ldr	r3, [pc, #580]	; (8004c18 <HAL_RCC_OscConfig+0x2ac>)
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	4a90      	ldr	r2, [pc, #576]	; (8004c18 <HAL_RCC_OscConfig+0x2ac>)
 80049d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80049dc:	6013      	str	r3, [r2, #0]
 80049de:	e01d      	b.n	8004a1c <HAL_RCC_OscConfig+0xb0>
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	685b      	ldr	r3, [r3, #4]
 80049e4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80049e8:	d10c      	bne.n	8004a04 <HAL_RCC_OscConfig+0x98>
 80049ea:	4b8b      	ldr	r3, [pc, #556]	; (8004c18 <HAL_RCC_OscConfig+0x2ac>)
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	4a8a      	ldr	r2, [pc, #552]	; (8004c18 <HAL_RCC_OscConfig+0x2ac>)
 80049f0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80049f4:	6013      	str	r3, [r2, #0]
 80049f6:	4b88      	ldr	r3, [pc, #544]	; (8004c18 <HAL_RCC_OscConfig+0x2ac>)
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	4a87      	ldr	r2, [pc, #540]	; (8004c18 <HAL_RCC_OscConfig+0x2ac>)
 80049fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a00:	6013      	str	r3, [r2, #0]
 8004a02:	e00b      	b.n	8004a1c <HAL_RCC_OscConfig+0xb0>
 8004a04:	4b84      	ldr	r3, [pc, #528]	; (8004c18 <HAL_RCC_OscConfig+0x2ac>)
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	4a83      	ldr	r2, [pc, #524]	; (8004c18 <HAL_RCC_OscConfig+0x2ac>)
 8004a0a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004a0e:	6013      	str	r3, [r2, #0]
 8004a10:	4b81      	ldr	r3, [pc, #516]	; (8004c18 <HAL_RCC_OscConfig+0x2ac>)
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	4a80      	ldr	r2, [pc, #512]	; (8004c18 <HAL_RCC_OscConfig+0x2ac>)
 8004a16:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004a1a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	685b      	ldr	r3, [r3, #4]
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d013      	beq.n	8004a4c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a24:	f7fc ff36 	bl	8001894 <HAL_GetTick>
 8004a28:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004a2a:	e008      	b.n	8004a3e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004a2c:	f7fc ff32 	bl	8001894 <HAL_GetTick>
 8004a30:	4602      	mov	r2, r0
 8004a32:	693b      	ldr	r3, [r7, #16]
 8004a34:	1ad3      	subs	r3, r2, r3
 8004a36:	2b64      	cmp	r3, #100	; 0x64
 8004a38:	d901      	bls.n	8004a3e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004a3a:	2303      	movs	r3, #3
 8004a3c:	e2a8      	b.n	8004f90 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004a3e:	4b76      	ldr	r3, [pc, #472]	; (8004c18 <HAL_RCC_OscConfig+0x2ac>)
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d0f0      	beq.n	8004a2c <HAL_RCC_OscConfig+0xc0>
 8004a4a:	e014      	b.n	8004a76 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a4c:	f7fc ff22 	bl	8001894 <HAL_GetTick>
 8004a50:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004a52:	e008      	b.n	8004a66 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004a54:	f7fc ff1e 	bl	8001894 <HAL_GetTick>
 8004a58:	4602      	mov	r2, r0
 8004a5a:	693b      	ldr	r3, [r7, #16]
 8004a5c:	1ad3      	subs	r3, r2, r3
 8004a5e:	2b64      	cmp	r3, #100	; 0x64
 8004a60:	d901      	bls.n	8004a66 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004a62:	2303      	movs	r3, #3
 8004a64:	e294      	b.n	8004f90 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004a66:	4b6c      	ldr	r3, [pc, #432]	; (8004c18 <HAL_RCC_OscConfig+0x2ac>)
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d1f0      	bne.n	8004a54 <HAL_RCC_OscConfig+0xe8>
 8004a72:	e000      	b.n	8004a76 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004a74:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	f003 0302 	and.w	r3, r3, #2
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d075      	beq.n	8004b6e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004a82:	4b65      	ldr	r3, [pc, #404]	; (8004c18 <HAL_RCC_OscConfig+0x2ac>)
 8004a84:	689b      	ldr	r3, [r3, #8]
 8004a86:	f003 030c 	and.w	r3, r3, #12
 8004a8a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004a8c:	4b62      	ldr	r3, [pc, #392]	; (8004c18 <HAL_RCC_OscConfig+0x2ac>)
 8004a8e:	68db      	ldr	r3, [r3, #12]
 8004a90:	f003 0303 	and.w	r3, r3, #3
 8004a94:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8004a96:	69bb      	ldr	r3, [r7, #24]
 8004a98:	2b0c      	cmp	r3, #12
 8004a9a:	d102      	bne.n	8004aa2 <HAL_RCC_OscConfig+0x136>
 8004a9c:	697b      	ldr	r3, [r7, #20]
 8004a9e:	2b02      	cmp	r3, #2
 8004aa0:	d002      	beq.n	8004aa8 <HAL_RCC_OscConfig+0x13c>
 8004aa2:	69bb      	ldr	r3, [r7, #24]
 8004aa4:	2b04      	cmp	r3, #4
 8004aa6:	d11f      	bne.n	8004ae8 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004aa8:	4b5b      	ldr	r3, [pc, #364]	; (8004c18 <HAL_RCC_OscConfig+0x2ac>)
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d005      	beq.n	8004ac0 <HAL_RCC_OscConfig+0x154>
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	68db      	ldr	r3, [r3, #12]
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d101      	bne.n	8004ac0 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8004abc:	2301      	movs	r3, #1
 8004abe:	e267      	b.n	8004f90 <HAL_RCC_OscConfig+0x624>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004ac0:	4b55      	ldr	r3, [pc, #340]	; (8004c18 <HAL_RCC_OscConfig+0x2ac>)
 8004ac2:	685b      	ldr	r3, [r3, #4]
 8004ac4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	691b      	ldr	r3, [r3, #16]
 8004acc:	061b      	lsls	r3, r3, #24
 8004ace:	4952      	ldr	r1, [pc, #328]	; (8004c18 <HAL_RCC_OscConfig+0x2ac>)
 8004ad0:	4313      	orrs	r3, r2
 8004ad2:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004ad4:	4b51      	ldr	r3, [pc, #324]	; (8004c1c <HAL_RCC_OscConfig+0x2b0>)
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	4618      	mov	r0, r3
 8004ada:	f7fc fe8f 	bl	80017fc <HAL_InitTick>
 8004ade:	4603      	mov	r3, r0
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d043      	beq.n	8004b6c <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8004ae4:	2301      	movs	r3, #1
 8004ae6:	e253      	b.n	8004f90 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	68db      	ldr	r3, [r3, #12]
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d023      	beq.n	8004b38 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004af0:	4b49      	ldr	r3, [pc, #292]	; (8004c18 <HAL_RCC_OscConfig+0x2ac>)
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	4a48      	ldr	r2, [pc, #288]	; (8004c18 <HAL_RCC_OscConfig+0x2ac>)
 8004af6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004afa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004afc:	f7fc feca 	bl	8001894 <HAL_GetTick>
 8004b00:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004b02:	e008      	b.n	8004b16 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004b04:	f7fc fec6 	bl	8001894 <HAL_GetTick>
 8004b08:	4602      	mov	r2, r0
 8004b0a:	693b      	ldr	r3, [r7, #16]
 8004b0c:	1ad3      	subs	r3, r2, r3
 8004b0e:	2b02      	cmp	r3, #2
 8004b10:	d901      	bls.n	8004b16 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8004b12:	2303      	movs	r3, #3
 8004b14:	e23c      	b.n	8004f90 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004b16:	4b40      	ldr	r3, [pc, #256]	; (8004c18 <HAL_RCC_OscConfig+0x2ac>)
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d0f0      	beq.n	8004b04 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b22:	4b3d      	ldr	r3, [pc, #244]	; (8004c18 <HAL_RCC_OscConfig+0x2ac>)
 8004b24:	685b      	ldr	r3, [r3, #4]
 8004b26:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	691b      	ldr	r3, [r3, #16]
 8004b2e:	061b      	lsls	r3, r3, #24
 8004b30:	4939      	ldr	r1, [pc, #228]	; (8004c18 <HAL_RCC_OscConfig+0x2ac>)
 8004b32:	4313      	orrs	r3, r2
 8004b34:	604b      	str	r3, [r1, #4]
 8004b36:	e01a      	b.n	8004b6e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004b38:	4b37      	ldr	r3, [pc, #220]	; (8004c18 <HAL_RCC_OscConfig+0x2ac>)
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	4a36      	ldr	r2, [pc, #216]	; (8004c18 <HAL_RCC_OscConfig+0x2ac>)
 8004b3e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004b42:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b44:	f7fc fea6 	bl	8001894 <HAL_GetTick>
 8004b48:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004b4a:	e008      	b.n	8004b5e <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004b4c:	f7fc fea2 	bl	8001894 <HAL_GetTick>
 8004b50:	4602      	mov	r2, r0
 8004b52:	693b      	ldr	r3, [r7, #16]
 8004b54:	1ad3      	subs	r3, r2, r3
 8004b56:	2b02      	cmp	r3, #2
 8004b58:	d901      	bls.n	8004b5e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8004b5a:	2303      	movs	r3, #3
 8004b5c:	e218      	b.n	8004f90 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004b5e:	4b2e      	ldr	r3, [pc, #184]	; (8004c18 <HAL_RCC_OscConfig+0x2ac>)
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d1f0      	bne.n	8004b4c <HAL_RCC_OscConfig+0x1e0>
 8004b6a:	e000      	b.n	8004b6e <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004b6c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	f003 0308 	and.w	r3, r3, #8
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d03c      	beq.n	8004bf4 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	695b      	ldr	r3, [r3, #20]
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d01c      	beq.n	8004bbc <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004b82:	4b25      	ldr	r3, [pc, #148]	; (8004c18 <HAL_RCC_OscConfig+0x2ac>)
 8004b84:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004b88:	4a23      	ldr	r2, [pc, #140]	; (8004c18 <HAL_RCC_OscConfig+0x2ac>)
 8004b8a:	f043 0301 	orr.w	r3, r3, #1
 8004b8e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b92:	f7fc fe7f 	bl	8001894 <HAL_GetTick>
 8004b96:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004b98:	e008      	b.n	8004bac <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004b9a:	f7fc fe7b 	bl	8001894 <HAL_GetTick>
 8004b9e:	4602      	mov	r2, r0
 8004ba0:	693b      	ldr	r3, [r7, #16]
 8004ba2:	1ad3      	subs	r3, r2, r3
 8004ba4:	2b02      	cmp	r3, #2
 8004ba6:	d901      	bls.n	8004bac <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004ba8:	2303      	movs	r3, #3
 8004baa:	e1f1      	b.n	8004f90 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004bac:	4b1a      	ldr	r3, [pc, #104]	; (8004c18 <HAL_RCC_OscConfig+0x2ac>)
 8004bae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004bb2:	f003 0302 	and.w	r3, r3, #2
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d0ef      	beq.n	8004b9a <HAL_RCC_OscConfig+0x22e>
 8004bba:	e01b      	b.n	8004bf4 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004bbc:	4b16      	ldr	r3, [pc, #88]	; (8004c18 <HAL_RCC_OscConfig+0x2ac>)
 8004bbe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004bc2:	4a15      	ldr	r2, [pc, #84]	; (8004c18 <HAL_RCC_OscConfig+0x2ac>)
 8004bc4:	f023 0301 	bic.w	r3, r3, #1
 8004bc8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004bcc:	f7fc fe62 	bl	8001894 <HAL_GetTick>
 8004bd0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004bd2:	e008      	b.n	8004be6 <HAL_RCC_OscConfig+0x27a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004bd4:	f7fc fe5e 	bl	8001894 <HAL_GetTick>
 8004bd8:	4602      	mov	r2, r0
 8004bda:	693b      	ldr	r3, [r7, #16]
 8004bdc:	1ad3      	subs	r3, r2, r3
 8004bde:	2b02      	cmp	r3, #2
 8004be0:	d901      	bls.n	8004be6 <HAL_RCC_OscConfig+0x27a>
        {
          return HAL_TIMEOUT;
 8004be2:	2303      	movs	r3, #3
 8004be4:	e1d4      	b.n	8004f90 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004be6:	4b0c      	ldr	r3, [pc, #48]	; (8004c18 <HAL_RCC_OscConfig+0x2ac>)
 8004be8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004bec:	f003 0302 	and.w	r3, r3, #2
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d1ef      	bne.n	8004bd4 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	f003 0304 	and.w	r3, r3, #4
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	f000 80ab 	beq.w	8004d58 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004c02:	2300      	movs	r3, #0
 8004c04:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004c06:	4b04      	ldr	r3, [pc, #16]	; (8004c18 <HAL_RCC_OscConfig+0x2ac>)
 8004c08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d106      	bne.n	8004c20 <HAL_RCC_OscConfig+0x2b4>
 8004c12:	2301      	movs	r3, #1
 8004c14:	e005      	b.n	8004c22 <HAL_RCC_OscConfig+0x2b6>
 8004c16:	bf00      	nop
 8004c18:	40021000 	.word	0x40021000
 8004c1c:	2000040c 	.word	0x2000040c
 8004c20:	2300      	movs	r3, #0
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d00d      	beq.n	8004c42 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004c26:	4baf      	ldr	r3, [pc, #700]	; (8004ee4 <HAL_RCC_OscConfig+0x578>)
 8004c28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c2a:	4aae      	ldr	r2, [pc, #696]	; (8004ee4 <HAL_RCC_OscConfig+0x578>)
 8004c2c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004c30:	6593      	str	r3, [r2, #88]	; 0x58
 8004c32:	4bac      	ldr	r3, [pc, #688]	; (8004ee4 <HAL_RCC_OscConfig+0x578>)
 8004c34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c3a:	60fb      	str	r3, [r7, #12]
 8004c3c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8004c3e:	2301      	movs	r3, #1
 8004c40:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004c42:	4ba9      	ldr	r3, [pc, #676]	; (8004ee8 <HAL_RCC_OscConfig+0x57c>)
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d118      	bne.n	8004c80 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004c4e:	4ba6      	ldr	r3, [pc, #664]	; (8004ee8 <HAL_RCC_OscConfig+0x57c>)
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	4aa5      	ldr	r2, [pc, #660]	; (8004ee8 <HAL_RCC_OscConfig+0x57c>)
 8004c54:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004c58:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004c5a:	f7fc fe1b 	bl	8001894 <HAL_GetTick>
 8004c5e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004c60:	e008      	b.n	8004c74 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004c62:	f7fc fe17 	bl	8001894 <HAL_GetTick>
 8004c66:	4602      	mov	r2, r0
 8004c68:	693b      	ldr	r3, [r7, #16]
 8004c6a:	1ad3      	subs	r3, r2, r3
 8004c6c:	2b02      	cmp	r3, #2
 8004c6e:	d901      	bls.n	8004c74 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8004c70:	2303      	movs	r3, #3
 8004c72:	e18d      	b.n	8004f90 <HAL_RCC_OscConfig+0x624>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004c74:	4b9c      	ldr	r3, [pc, #624]	; (8004ee8 <HAL_RCC_OscConfig+0x57c>)
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d0f0      	beq.n	8004c62 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	689b      	ldr	r3, [r3, #8]
 8004c84:	2b01      	cmp	r3, #1
 8004c86:	d108      	bne.n	8004c9a <HAL_RCC_OscConfig+0x32e>
 8004c88:	4b96      	ldr	r3, [pc, #600]	; (8004ee4 <HAL_RCC_OscConfig+0x578>)
 8004c8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c8e:	4a95      	ldr	r2, [pc, #596]	; (8004ee4 <HAL_RCC_OscConfig+0x578>)
 8004c90:	f043 0301 	orr.w	r3, r3, #1
 8004c94:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004c98:	e024      	b.n	8004ce4 <HAL_RCC_OscConfig+0x378>
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	689b      	ldr	r3, [r3, #8]
 8004c9e:	2b05      	cmp	r3, #5
 8004ca0:	d110      	bne.n	8004cc4 <HAL_RCC_OscConfig+0x358>
 8004ca2:	4b90      	ldr	r3, [pc, #576]	; (8004ee4 <HAL_RCC_OscConfig+0x578>)
 8004ca4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ca8:	4a8e      	ldr	r2, [pc, #568]	; (8004ee4 <HAL_RCC_OscConfig+0x578>)
 8004caa:	f043 0304 	orr.w	r3, r3, #4
 8004cae:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004cb2:	4b8c      	ldr	r3, [pc, #560]	; (8004ee4 <HAL_RCC_OscConfig+0x578>)
 8004cb4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004cb8:	4a8a      	ldr	r2, [pc, #552]	; (8004ee4 <HAL_RCC_OscConfig+0x578>)
 8004cba:	f043 0301 	orr.w	r3, r3, #1
 8004cbe:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004cc2:	e00f      	b.n	8004ce4 <HAL_RCC_OscConfig+0x378>
 8004cc4:	4b87      	ldr	r3, [pc, #540]	; (8004ee4 <HAL_RCC_OscConfig+0x578>)
 8004cc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004cca:	4a86      	ldr	r2, [pc, #536]	; (8004ee4 <HAL_RCC_OscConfig+0x578>)
 8004ccc:	f023 0301 	bic.w	r3, r3, #1
 8004cd0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004cd4:	4b83      	ldr	r3, [pc, #524]	; (8004ee4 <HAL_RCC_OscConfig+0x578>)
 8004cd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004cda:	4a82      	ldr	r2, [pc, #520]	; (8004ee4 <HAL_RCC_OscConfig+0x578>)
 8004cdc:	f023 0304 	bic.w	r3, r3, #4
 8004ce0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	689b      	ldr	r3, [r3, #8]
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d016      	beq.n	8004d1a <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004cec:	f7fc fdd2 	bl	8001894 <HAL_GetTick>
 8004cf0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004cf2:	e00a      	b.n	8004d0a <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004cf4:	f7fc fdce 	bl	8001894 <HAL_GetTick>
 8004cf8:	4602      	mov	r2, r0
 8004cfa:	693b      	ldr	r3, [r7, #16]
 8004cfc:	1ad3      	subs	r3, r2, r3
 8004cfe:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d02:	4293      	cmp	r3, r2
 8004d04:	d901      	bls.n	8004d0a <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8004d06:	2303      	movs	r3, #3
 8004d08:	e142      	b.n	8004f90 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004d0a:	4b76      	ldr	r3, [pc, #472]	; (8004ee4 <HAL_RCC_OscConfig+0x578>)
 8004d0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d10:	f003 0302 	and.w	r3, r3, #2
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d0ed      	beq.n	8004cf4 <HAL_RCC_OscConfig+0x388>
 8004d18:	e015      	b.n	8004d46 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d1a:	f7fc fdbb 	bl	8001894 <HAL_GetTick>
 8004d1e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004d20:	e00a      	b.n	8004d38 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004d22:	f7fc fdb7 	bl	8001894 <HAL_GetTick>
 8004d26:	4602      	mov	r2, r0
 8004d28:	693b      	ldr	r3, [r7, #16]
 8004d2a:	1ad3      	subs	r3, r2, r3
 8004d2c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d30:	4293      	cmp	r3, r2
 8004d32:	d901      	bls.n	8004d38 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8004d34:	2303      	movs	r3, #3
 8004d36:	e12b      	b.n	8004f90 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004d38:	4b6a      	ldr	r3, [pc, #424]	; (8004ee4 <HAL_RCC_OscConfig+0x578>)
 8004d3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d3e:	f003 0302 	and.w	r3, r3, #2
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d1ed      	bne.n	8004d22 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004d46:	7ffb      	ldrb	r3, [r7, #31]
 8004d48:	2b01      	cmp	r3, #1
 8004d4a:	d105      	bne.n	8004d58 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004d4c:	4b65      	ldr	r3, [pc, #404]	; (8004ee4 <HAL_RCC_OscConfig+0x578>)
 8004d4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d50:	4a64      	ldr	r2, [pc, #400]	; (8004ee4 <HAL_RCC_OscConfig+0x578>)
 8004d52:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004d56:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	f003 0320 	and.w	r3, r3, #32
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d03c      	beq.n	8004dde <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	699b      	ldr	r3, [r3, #24]
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d01c      	beq.n	8004da6 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004d6c:	4b5d      	ldr	r3, [pc, #372]	; (8004ee4 <HAL_RCC_OscConfig+0x578>)
 8004d6e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004d72:	4a5c      	ldr	r2, [pc, #368]	; (8004ee4 <HAL_RCC_OscConfig+0x578>)
 8004d74:	f043 0301 	orr.w	r3, r3, #1
 8004d78:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d7c:	f7fc fd8a 	bl	8001894 <HAL_GetTick>
 8004d80:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004d82:	e008      	b.n	8004d96 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004d84:	f7fc fd86 	bl	8001894 <HAL_GetTick>
 8004d88:	4602      	mov	r2, r0
 8004d8a:	693b      	ldr	r3, [r7, #16]
 8004d8c:	1ad3      	subs	r3, r2, r3
 8004d8e:	2b02      	cmp	r3, #2
 8004d90:	d901      	bls.n	8004d96 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8004d92:	2303      	movs	r3, #3
 8004d94:	e0fc      	b.n	8004f90 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004d96:	4b53      	ldr	r3, [pc, #332]	; (8004ee4 <HAL_RCC_OscConfig+0x578>)
 8004d98:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004d9c:	f003 0302 	and.w	r3, r3, #2
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d0ef      	beq.n	8004d84 <HAL_RCC_OscConfig+0x418>
 8004da4:	e01b      	b.n	8004dde <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004da6:	4b4f      	ldr	r3, [pc, #316]	; (8004ee4 <HAL_RCC_OscConfig+0x578>)
 8004da8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004dac:	4a4d      	ldr	r2, [pc, #308]	; (8004ee4 <HAL_RCC_OscConfig+0x578>)
 8004dae:	f023 0301 	bic.w	r3, r3, #1
 8004db2:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004db6:	f7fc fd6d 	bl	8001894 <HAL_GetTick>
 8004dba:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004dbc:	e008      	b.n	8004dd0 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004dbe:	f7fc fd69 	bl	8001894 <HAL_GetTick>
 8004dc2:	4602      	mov	r2, r0
 8004dc4:	693b      	ldr	r3, [r7, #16]
 8004dc6:	1ad3      	subs	r3, r2, r3
 8004dc8:	2b02      	cmp	r3, #2
 8004dca:	d901      	bls.n	8004dd0 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8004dcc:	2303      	movs	r3, #3
 8004dce:	e0df      	b.n	8004f90 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004dd0:	4b44      	ldr	r3, [pc, #272]	; (8004ee4 <HAL_RCC_OscConfig+0x578>)
 8004dd2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004dd6:	f003 0302 	and.w	r3, r3, #2
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d1ef      	bne.n	8004dbe <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	69db      	ldr	r3, [r3, #28]
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	f000 80d3 	beq.w	8004f8e <HAL_RCC_OscConfig+0x622>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004de8:	4b3e      	ldr	r3, [pc, #248]	; (8004ee4 <HAL_RCC_OscConfig+0x578>)
 8004dea:	689b      	ldr	r3, [r3, #8]
 8004dec:	f003 030c 	and.w	r3, r3, #12
 8004df0:	2b0c      	cmp	r3, #12
 8004df2:	f000 808d 	beq.w	8004f10 <HAL_RCC_OscConfig+0x5a4>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	69db      	ldr	r3, [r3, #28]
 8004dfa:	2b02      	cmp	r3, #2
 8004dfc:	d15a      	bne.n	8004eb4 <HAL_RCC_OscConfig+0x548>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004dfe:	4b39      	ldr	r3, [pc, #228]	; (8004ee4 <HAL_RCC_OscConfig+0x578>)
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	4a38      	ldr	r2, [pc, #224]	; (8004ee4 <HAL_RCC_OscConfig+0x578>)
 8004e04:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004e08:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e0a:	f7fc fd43 	bl	8001894 <HAL_GetTick>
 8004e0e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004e10:	e008      	b.n	8004e24 <HAL_RCC_OscConfig+0x4b8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004e12:	f7fc fd3f 	bl	8001894 <HAL_GetTick>
 8004e16:	4602      	mov	r2, r0
 8004e18:	693b      	ldr	r3, [r7, #16]
 8004e1a:	1ad3      	subs	r3, r2, r3
 8004e1c:	2b02      	cmp	r3, #2
 8004e1e:	d901      	bls.n	8004e24 <HAL_RCC_OscConfig+0x4b8>
          {
            return HAL_TIMEOUT;
 8004e20:	2303      	movs	r3, #3
 8004e22:	e0b5      	b.n	8004f90 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004e24:	4b2f      	ldr	r3, [pc, #188]	; (8004ee4 <HAL_RCC_OscConfig+0x578>)
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d1f0      	bne.n	8004e12 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004e30:	4b2c      	ldr	r3, [pc, #176]	; (8004ee4 <HAL_RCC_OscConfig+0x578>)
 8004e32:	68da      	ldr	r2, [r3, #12]
 8004e34:	4b2d      	ldr	r3, [pc, #180]	; (8004eec <HAL_RCC_OscConfig+0x580>)
 8004e36:	4013      	ands	r3, r2
 8004e38:	687a      	ldr	r2, [r7, #4]
 8004e3a:	6a11      	ldr	r1, [r2, #32]
 8004e3c:	687a      	ldr	r2, [r7, #4]
 8004e3e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004e40:	3a01      	subs	r2, #1
 8004e42:	0112      	lsls	r2, r2, #4
 8004e44:	4311      	orrs	r1, r2
 8004e46:	687a      	ldr	r2, [r7, #4]
 8004e48:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8004e4a:	0212      	lsls	r2, r2, #8
 8004e4c:	4311      	orrs	r1, r2
 8004e4e:	687a      	ldr	r2, [r7, #4]
 8004e50:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004e52:	0852      	lsrs	r2, r2, #1
 8004e54:	3a01      	subs	r2, #1
 8004e56:	0552      	lsls	r2, r2, #21
 8004e58:	4311      	orrs	r1, r2
 8004e5a:	687a      	ldr	r2, [r7, #4]
 8004e5c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004e5e:	0852      	lsrs	r2, r2, #1
 8004e60:	3a01      	subs	r2, #1
 8004e62:	0652      	lsls	r2, r2, #25
 8004e64:	4311      	orrs	r1, r2
 8004e66:	687a      	ldr	r2, [r7, #4]
 8004e68:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8004e6a:	06d2      	lsls	r2, r2, #27
 8004e6c:	430a      	orrs	r2, r1
 8004e6e:	491d      	ldr	r1, [pc, #116]	; (8004ee4 <HAL_RCC_OscConfig+0x578>)
 8004e70:	4313      	orrs	r3, r2
 8004e72:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004e74:	4b1b      	ldr	r3, [pc, #108]	; (8004ee4 <HAL_RCC_OscConfig+0x578>)
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	4a1a      	ldr	r2, [pc, #104]	; (8004ee4 <HAL_RCC_OscConfig+0x578>)
 8004e7a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004e7e:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004e80:	4b18      	ldr	r3, [pc, #96]	; (8004ee4 <HAL_RCC_OscConfig+0x578>)
 8004e82:	68db      	ldr	r3, [r3, #12]
 8004e84:	4a17      	ldr	r2, [pc, #92]	; (8004ee4 <HAL_RCC_OscConfig+0x578>)
 8004e86:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004e8a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e8c:	f7fc fd02 	bl	8001894 <HAL_GetTick>
 8004e90:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004e92:	e008      	b.n	8004ea6 <HAL_RCC_OscConfig+0x53a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004e94:	f7fc fcfe 	bl	8001894 <HAL_GetTick>
 8004e98:	4602      	mov	r2, r0
 8004e9a:	693b      	ldr	r3, [r7, #16]
 8004e9c:	1ad3      	subs	r3, r2, r3
 8004e9e:	2b02      	cmp	r3, #2
 8004ea0:	d901      	bls.n	8004ea6 <HAL_RCC_OscConfig+0x53a>
          {
            return HAL_TIMEOUT;
 8004ea2:	2303      	movs	r3, #3
 8004ea4:	e074      	b.n	8004f90 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004ea6:	4b0f      	ldr	r3, [pc, #60]	; (8004ee4 <HAL_RCC_OscConfig+0x578>)
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d0f0      	beq.n	8004e94 <HAL_RCC_OscConfig+0x528>
 8004eb2:	e06c      	b.n	8004f8e <HAL_RCC_OscConfig+0x622>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004eb4:	4b0b      	ldr	r3, [pc, #44]	; (8004ee4 <HAL_RCC_OscConfig+0x578>)
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	4a0a      	ldr	r2, [pc, #40]	; (8004ee4 <HAL_RCC_OscConfig+0x578>)
 8004eba:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004ebe:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8004ec0:	4b08      	ldr	r3, [pc, #32]	; (8004ee4 <HAL_RCC_OscConfig+0x578>)
 8004ec2:	68db      	ldr	r3, [r3, #12]
 8004ec4:	4a07      	ldr	r2, [pc, #28]	; (8004ee4 <HAL_RCC_OscConfig+0x578>)
 8004ec6:	f023 0303 	bic.w	r3, r3, #3
 8004eca:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8004ecc:	4b05      	ldr	r3, [pc, #20]	; (8004ee4 <HAL_RCC_OscConfig+0x578>)
 8004ece:	68db      	ldr	r3, [r3, #12]
 8004ed0:	4a04      	ldr	r2, [pc, #16]	; (8004ee4 <HAL_RCC_OscConfig+0x578>)
 8004ed2:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8004ed6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004eda:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004edc:	f7fc fcda 	bl	8001894 <HAL_GetTick>
 8004ee0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004ee2:	e00e      	b.n	8004f02 <HAL_RCC_OscConfig+0x596>
 8004ee4:	40021000 	.word	0x40021000
 8004ee8:	40007000 	.word	0x40007000
 8004eec:	019f800c 	.word	0x019f800c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004ef0:	f7fc fcd0 	bl	8001894 <HAL_GetTick>
 8004ef4:	4602      	mov	r2, r0
 8004ef6:	693b      	ldr	r3, [r7, #16]
 8004ef8:	1ad3      	subs	r3, r2, r3
 8004efa:	2b02      	cmp	r3, #2
 8004efc:	d901      	bls.n	8004f02 <HAL_RCC_OscConfig+0x596>
          {
            return HAL_TIMEOUT;
 8004efe:	2303      	movs	r3, #3
 8004f00:	e046      	b.n	8004f90 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004f02:	4b25      	ldr	r3, [pc, #148]	; (8004f98 <HAL_RCC_OscConfig+0x62c>)
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d1f0      	bne.n	8004ef0 <HAL_RCC_OscConfig+0x584>
 8004f0e:	e03e      	b.n	8004f8e <HAL_RCC_OscConfig+0x622>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	69db      	ldr	r3, [r3, #28]
 8004f14:	2b01      	cmp	r3, #1
 8004f16:	d101      	bne.n	8004f1c <HAL_RCC_OscConfig+0x5b0>
      {
        return HAL_ERROR;
 8004f18:	2301      	movs	r3, #1
 8004f1a:	e039      	b.n	8004f90 <HAL_RCC_OscConfig+0x624>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8004f1c:	4b1e      	ldr	r3, [pc, #120]	; (8004f98 <HAL_RCC_OscConfig+0x62c>)
 8004f1e:	68db      	ldr	r3, [r3, #12]
 8004f20:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004f22:	697b      	ldr	r3, [r7, #20]
 8004f24:	f003 0203 	and.w	r2, r3, #3
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	6a1b      	ldr	r3, [r3, #32]
 8004f2c:	429a      	cmp	r2, r3
 8004f2e:	d12c      	bne.n	8004f8a <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004f30:	697b      	ldr	r3, [r7, #20]
 8004f32:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f3a:	3b01      	subs	r3, #1
 8004f3c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004f3e:	429a      	cmp	r2, r3
 8004f40:	d123      	bne.n	8004f8a <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8004f42:	697b      	ldr	r3, [r7, #20]
 8004f44:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f4c:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004f4e:	429a      	cmp	r2, r3
 8004f50:	d11b      	bne.n	8004f8a <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004f52:	697b      	ldr	r3, [r7, #20]
 8004f54:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f5c:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8004f5e:	429a      	cmp	r2, r3
 8004f60:	d113      	bne.n	8004f8a <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004f62:	697b      	ldr	r3, [r7, #20]
 8004f64:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f6c:	085b      	lsrs	r3, r3, #1
 8004f6e:	3b01      	subs	r3, #1
 8004f70:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004f72:	429a      	cmp	r2, r3
 8004f74:	d109      	bne.n	8004f8a <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004f76:	697b      	ldr	r3, [r7, #20]
 8004f78:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f80:	085b      	lsrs	r3, r3, #1
 8004f82:	3b01      	subs	r3, #1
 8004f84:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004f86:	429a      	cmp	r2, r3
 8004f88:	d001      	beq.n	8004f8e <HAL_RCC_OscConfig+0x622>
      {
        return HAL_ERROR;
 8004f8a:	2301      	movs	r3, #1
 8004f8c:	e000      	b.n	8004f90 <HAL_RCC_OscConfig+0x624>
      }
    }
  }
  }

  return HAL_OK;
 8004f8e:	2300      	movs	r3, #0
}
 8004f90:	4618      	mov	r0, r3
 8004f92:	3720      	adds	r7, #32
 8004f94:	46bd      	mov	sp, r7
 8004f96:	bd80      	pop	{r7, pc}
 8004f98:	40021000 	.word	0x40021000

08004f9c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004f9c:	b580      	push	{r7, lr}
 8004f9e:	b086      	sub	sp, #24
 8004fa0:	af00      	add	r7, sp, #0
 8004fa2:	6078      	str	r0, [r7, #4]
 8004fa4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8004fa6:	2300      	movs	r3, #0
 8004fa8:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d101      	bne.n	8004fb4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004fb0:	2301      	movs	r3, #1
 8004fb2:	e11e      	b.n	80051f2 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004fb4:	4b91      	ldr	r3, [pc, #580]	; (80051fc <HAL_RCC_ClockConfig+0x260>)
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	f003 030f 	and.w	r3, r3, #15
 8004fbc:	683a      	ldr	r2, [r7, #0]
 8004fbe:	429a      	cmp	r2, r3
 8004fc0:	d910      	bls.n	8004fe4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004fc2:	4b8e      	ldr	r3, [pc, #568]	; (80051fc <HAL_RCC_ClockConfig+0x260>)
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	f023 020f 	bic.w	r2, r3, #15
 8004fca:	498c      	ldr	r1, [pc, #560]	; (80051fc <HAL_RCC_ClockConfig+0x260>)
 8004fcc:	683b      	ldr	r3, [r7, #0]
 8004fce:	4313      	orrs	r3, r2
 8004fd0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004fd2:	4b8a      	ldr	r3, [pc, #552]	; (80051fc <HAL_RCC_ClockConfig+0x260>)
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	f003 030f 	and.w	r3, r3, #15
 8004fda:	683a      	ldr	r2, [r7, #0]
 8004fdc:	429a      	cmp	r2, r3
 8004fde:	d001      	beq.n	8004fe4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004fe0:	2301      	movs	r3, #1
 8004fe2:	e106      	b.n	80051f2 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	f003 0301 	and.w	r3, r3, #1
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d073      	beq.n	80050d8 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	685b      	ldr	r3, [r3, #4]
 8004ff4:	2b03      	cmp	r3, #3
 8004ff6:	d129      	bne.n	800504c <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004ff8:	4b81      	ldr	r3, [pc, #516]	; (8005200 <HAL_RCC_ClockConfig+0x264>)
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005000:	2b00      	cmp	r3, #0
 8005002:	d101      	bne.n	8005008 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8005004:	2301      	movs	r3, #1
 8005006:	e0f4      	b.n	80051f2 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8005008:	f000 f99e 	bl	8005348 <RCC_GetSysClockFreqFromPLLSource>
 800500c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800500e:	693b      	ldr	r3, [r7, #16]
 8005010:	4a7c      	ldr	r2, [pc, #496]	; (8005204 <HAL_RCC_ClockConfig+0x268>)
 8005012:	4293      	cmp	r3, r2
 8005014:	d93f      	bls.n	8005096 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8005016:	4b7a      	ldr	r3, [pc, #488]	; (8005200 <HAL_RCC_ClockConfig+0x264>)
 8005018:	689b      	ldr	r3, [r3, #8]
 800501a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800501e:	2b00      	cmp	r3, #0
 8005020:	d009      	beq.n	8005036 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800502a:	2b00      	cmp	r3, #0
 800502c:	d033      	beq.n	8005096 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8005032:	2b00      	cmp	r3, #0
 8005034:	d12f      	bne.n	8005096 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005036:	4b72      	ldr	r3, [pc, #456]	; (8005200 <HAL_RCC_ClockConfig+0x264>)
 8005038:	689b      	ldr	r3, [r3, #8]
 800503a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800503e:	4a70      	ldr	r2, [pc, #448]	; (8005200 <HAL_RCC_ClockConfig+0x264>)
 8005040:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005044:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8005046:	2380      	movs	r3, #128	; 0x80
 8005048:	617b      	str	r3, [r7, #20]
 800504a:	e024      	b.n	8005096 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	685b      	ldr	r3, [r3, #4]
 8005050:	2b02      	cmp	r3, #2
 8005052:	d107      	bne.n	8005064 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005054:	4b6a      	ldr	r3, [pc, #424]	; (8005200 <HAL_RCC_ClockConfig+0x264>)
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800505c:	2b00      	cmp	r3, #0
 800505e:	d109      	bne.n	8005074 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8005060:	2301      	movs	r3, #1
 8005062:	e0c6      	b.n	80051f2 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005064:	4b66      	ldr	r3, [pc, #408]	; (8005200 <HAL_RCC_ClockConfig+0x264>)
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800506c:	2b00      	cmp	r3, #0
 800506e:	d101      	bne.n	8005074 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8005070:	2301      	movs	r3, #1
 8005072:	e0be      	b.n	80051f2 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8005074:	f000 f8ce 	bl	8005214 <HAL_RCC_GetSysClockFreq>
 8005078:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800507a:	693b      	ldr	r3, [r7, #16]
 800507c:	4a61      	ldr	r2, [pc, #388]	; (8005204 <HAL_RCC_ClockConfig+0x268>)
 800507e:	4293      	cmp	r3, r2
 8005080:	d909      	bls.n	8005096 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005082:	4b5f      	ldr	r3, [pc, #380]	; (8005200 <HAL_RCC_ClockConfig+0x264>)
 8005084:	689b      	ldr	r3, [r3, #8]
 8005086:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800508a:	4a5d      	ldr	r2, [pc, #372]	; (8005200 <HAL_RCC_ClockConfig+0x264>)
 800508c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005090:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8005092:	2380      	movs	r3, #128	; 0x80
 8005094:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005096:	4b5a      	ldr	r3, [pc, #360]	; (8005200 <HAL_RCC_ClockConfig+0x264>)
 8005098:	689b      	ldr	r3, [r3, #8]
 800509a:	f023 0203 	bic.w	r2, r3, #3
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	685b      	ldr	r3, [r3, #4]
 80050a2:	4957      	ldr	r1, [pc, #348]	; (8005200 <HAL_RCC_ClockConfig+0x264>)
 80050a4:	4313      	orrs	r3, r2
 80050a6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80050a8:	f7fc fbf4 	bl	8001894 <HAL_GetTick>
 80050ac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80050ae:	e00a      	b.n	80050c6 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80050b0:	f7fc fbf0 	bl	8001894 <HAL_GetTick>
 80050b4:	4602      	mov	r2, r0
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	1ad3      	subs	r3, r2, r3
 80050ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80050be:	4293      	cmp	r3, r2
 80050c0:	d901      	bls.n	80050c6 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80050c2:	2303      	movs	r3, #3
 80050c4:	e095      	b.n	80051f2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80050c6:	4b4e      	ldr	r3, [pc, #312]	; (8005200 <HAL_RCC_ClockConfig+0x264>)
 80050c8:	689b      	ldr	r3, [r3, #8]
 80050ca:	f003 020c 	and.w	r2, r3, #12
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	685b      	ldr	r3, [r3, #4]
 80050d2:	009b      	lsls	r3, r3, #2
 80050d4:	429a      	cmp	r2, r3
 80050d6:	d1eb      	bne.n	80050b0 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	f003 0302 	and.w	r3, r3, #2
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d023      	beq.n	800512c <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	f003 0304 	and.w	r3, r3, #4
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d005      	beq.n	80050fc <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80050f0:	4b43      	ldr	r3, [pc, #268]	; (8005200 <HAL_RCC_ClockConfig+0x264>)
 80050f2:	689b      	ldr	r3, [r3, #8]
 80050f4:	4a42      	ldr	r2, [pc, #264]	; (8005200 <HAL_RCC_ClockConfig+0x264>)
 80050f6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80050fa:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	f003 0308 	and.w	r3, r3, #8
 8005104:	2b00      	cmp	r3, #0
 8005106:	d007      	beq.n	8005118 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8005108:	4b3d      	ldr	r3, [pc, #244]	; (8005200 <HAL_RCC_ClockConfig+0x264>)
 800510a:	689b      	ldr	r3, [r3, #8]
 800510c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8005110:	4a3b      	ldr	r2, [pc, #236]	; (8005200 <HAL_RCC_ClockConfig+0x264>)
 8005112:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8005116:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005118:	4b39      	ldr	r3, [pc, #228]	; (8005200 <HAL_RCC_ClockConfig+0x264>)
 800511a:	689b      	ldr	r3, [r3, #8]
 800511c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	689b      	ldr	r3, [r3, #8]
 8005124:	4936      	ldr	r1, [pc, #216]	; (8005200 <HAL_RCC_ClockConfig+0x264>)
 8005126:	4313      	orrs	r3, r2
 8005128:	608b      	str	r3, [r1, #8]
 800512a:	e008      	b.n	800513e <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 800512c:	697b      	ldr	r3, [r7, #20]
 800512e:	2b80      	cmp	r3, #128	; 0x80
 8005130:	d105      	bne.n	800513e <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8005132:	4b33      	ldr	r3, [pc, #204]	; (8005200 <HAL_RCC_ClockConfig+0x264>)
 8005134:	689b      	ldr	r3, [r3, #8]
 8005136:	4a32      	ldr	r2, [pc, #200]	; (8005200 <HAL_RCC_ClockConfig+0x264>)
 8005138:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800513c:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800513e:	4b2f      	ldr	r3, [pc, #188]	; (80051fc <HAL_RCC_ClockConfig+0x260>)
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	f003 030f 	and.w	r3, r3, #15
 8005146:	683a      	ldr	r2, [r7, #0]
 8005148:	429a      	cmp	r2, r3
 800514a:	d21d      	bcs.n	8005188 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800514c:	4b2b      	ldr	r3, [pc, #172]	; (80051fc <HAL_RCC_ClockConfig+0x260>)
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	f023 020f 	bic.w	r2, r3, #15
 8005154:	4929      	ldr	r1, [pc, #164]	; (80051fc <HAL_RCC_ClockConfig+0x260>)
 8005156:	683b      	ldr	r3, [r7, #0]
 8005158:	4313      	orrs	r3, r2
 800515a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800515c:	f7fc fb9a 	bl	8001894 <HAL_GetTick>
 8005160:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005162:	e00a      	b.n	800517a <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005164:	f7fc fb96 	bl	8001894 <HAL_GetTick>
 8005168:	4602      	mov	r2, r0
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	1ad3      	subs	r3, r2, r3
 800516e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005172:	4293      	cmp	r3, r2
 8005174:	d901      	bls.n	800517a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8005176:	2303      	movs	r3, #3
 8005178:	e03b      	b.n	80051f2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800517a:	4b20      	ldr	r3, [pc, #128]	; (80051fc <HAL_RCC_ClockConfig+0x260>)
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	f003 030f 	and.w	r3, r3, #15
 8005182:	683a      	ldr	r2, [r7, #0]
 8005184:	429a      	cmp	r2, r3
 8005186:	d1ed      	bne.n	8005164 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	f003 0304 	and.w	r3, r3, #4
 8005190:	2b00      	cmp	r3, #0
 8005192:	d008      	beq.n	80051a6 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005194:	4b1a      	ldr	r3, [pc, #104]	; (8005200 <HAL_RCC_ClockConfig+0x264>)
 8005196:	689b      	ldr	r3, [r3, #8]
 8005198:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	68db      	ldr	r3, [r3, #12]
 80051a0:	4917      	ldr	r1, [pc, #92]	; (8005200 <HAL_RCC_ClockConfig+0x264>)
 80051a2:	4313      	orrs	r3, r2
 80051a4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	f003 0308 	and.w	r3, r3, #8
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d009      	beq.n	80051c6 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80051b2:	4b13      	ldr	r3, [pc, #76]	; (8005200 <HAL_RCC_ClockConfig+0x264>)
 80051b4:	689b      	ldr	r3, [r3, #8]
 80051b6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	691b      	ldr	r3, [r3, #16]
 80051be:	00db      	lsls	r3, r3, #3
 80051c0:	490f      	ldr	r1, [pc, #60]	; (8005200 <HAL_RCC_ClockConfig+0x264>)
 80051c2:	4313      	orrs	r3, r2
 80051c4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80051c6:	f000 f825 	bl	8005214 <HAL_RCC_GetSysClockFreq>
 80051ca:	4602      	mov	r2, r0
 80051cc:	4b0c      	ldr	r3, [pc, #48]	; (8005200 <HAL_RCC_ClockConfig+0x264>)
 80051ce:	689b      	ldr	r3, [r3, #8]
 80051d0:	091b      	lsrs	r3, r3, #4
 80051d2:	f003 030f 	and.w	r3, r3, #15
 80051d6:	490c      	ldr	r1, [pc, #48]	; (8005208 <HAL_RCC_ClockConfig+0x26c>)
 80051d8:	5ccb      	ldrb	r3, [r1, r3]
 80051da:	f003 031f 	and.w	r3, r3, #31
 80051de:	fa22 f303 	lsr.w	r3, r2, r3
 80051e2:	4a0a      	ldr	r2, [pc, #40]	; (800520c <HAL_RCC_ClockConfig+0x270>)
 80051e4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80051e6:	4b0a      	ldr	r3, [pc, #40]	; (8005210 <HAL_RCC_ClockConfig+0x274>)
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	4618      	mov	r0, r3
 80051ec:	f7fc fb06 	bl	80017fc <HAL_InitTick>
 80051f0:	4603      	mov	r3, r0
}
 80051f2:	4618      	mov	r0, r3
 80051f4:	3718      	adds	r7, #24
 80051f6:	46bd      	mov	sp, r7
 80051f8:	bd80      	pop	{r7, pc}
 80051fa:	bf00      	nop
 80051fc:	40022000 	.word	0x40022000
 8005200:	40021000 	.word	0x40021000
 8005204:	04c4b400 	.word	0x04c4b400
 8005208:	08007d68 	.word	0x08007d68
 800520c:	20000408 	.word	0x20000408
 8005210:	2000040c 	.word	0x2000040c

08005214 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005214:	b480      	push	{r7}
 8005216:	b087      	sub	sp, #28
 8005218:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800521a:	4b2c      	ldr	r3, [pc, #176]	; (80052cc <HAL_RCC_GetSysClockFreq+0xb8>)
 800521c:	689b      	ldr	r3, [r3, #8]
 800521e:	f003 030c 	and.w	r3, r3, #12
 8005222:	2b04      	cmp	r3, #4
 8005224:	d102      	bne.n	800522c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005226:	4b2a      	ldr	r3, [pc, #168]	; (80052d0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8005228:	613b      	str	r3, [r7, #16]
 800522a:	e047      	b.n	80052bc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800522c:	4b27      	ldr	r3, [pc, #156]	; (80052cc <HAL_RCC_GetSysClockFreq+0xb8>)
 800522e:	689b      	ldr	r3, [r3, #8]
 8005230:	f003 030c 	and.w	r3, r3, #12
 8005234:	2b08      	cmp	r3, #8
 8005236:	d102      	bne.n	800523e <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005238:	4b26      	ldr	r3, [pc, #152]	; (80052d4 <HAL_RCC_GetSysClockFreq+0xc0>)
 800523a:	613b      	str	r3, [r7, #16]
 800523c:	e03e      	b.n	80052bc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800523e:	4b23      	ldr	r3, [pc, #140]	; (80052cc <HAL_RCC_GetSysClockFreq+0xb8>)
 8005240:	689b      	ldr	r3, [r3, #8]
 8005242:	f003 030c 	and.w	r3, r3, #12
 8005246:	2b0c      	cmp	r3, #12
 8005248:	d136      	bne.n	80052b8 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800524a:	4b20      	ldr	r3, [pc, #128]	; (80052cc <HAL_RCC_GetSysClockFreq+0xb8>)
 800524c:	68db      	ldr	r3, [r3, #12]
 800524e:	f003 0303 	and.w	r3, r3, #3
 8005252:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005254:	4b1d      	ldr	r3, [pc, #116]	; (80052cc <HAL_RCC_GetSysClockFreq+0xb8>)
 8005256:	68db      	ldr	r3, [r3, #12]
 8005258:	091b      	lsrs	r3, r3, #4
 800525a:	f003 030f 	and.w	r3, r3, #15
 800525e:	3301      	adds	r3, #1
 8005260:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	2b03      	cmp	r3, #3
 8005266:	d10c      	bne.n	8005282 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005268:	4a1a      	ldr	r2, [pc, #104]	; (80052d4 <HAL_RCC_GetSysClockFreq+0xc0>)
 800526a:	68bb      	ldr	r3, [r7, #8]
 800526c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005270:	4a16      	ldr	r2, [pc, #88]	; (80052cc <HAL_RCC_GetSysClockFreq+0xb8>)
 8005272:	68d2      	ldr	r2, [r2, #12]
 8005274:	0a12      	lsrs	r2, r2, #8
 8005276:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800527a:	fb02 f303 	mul.w	r3, r2, r3
 800527e:	617b      	str	r3, [r7, #20]
      break;
 8005280:	e00c      	b.n	800529c <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005282:	4a13      	ldr	r2, [pc, #76]	; (80052d0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8005284:	68bb      	ldr	r3, [r7, #8]
 8005286:	fbb2 f3f3 	udiv	r3, r2, r3
 800528a:	4a10      	ldr	r2, [pc, #64]	; (80052cc <HAL_RCC_GetSysClockFreq+0xb8>)
 800528c:	68d2      	ldr	r2, [r2, #12]
 800528e:	0a12      	lsrs	r2, r2, #8
 8005290:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005294:	fb02 f303 	mul.w	r3, r2, r3
 8005298:	617b      	str	r3, [r7, #20]
      break;
 800529a:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800529c:	4b0b      	ldr	r3, [pc, #44]	; (80052cc <HAL_RCC_GetSysClockFreq+0xb8>)
 800529e:	68db      	ldr	r3, [r3, #12]
 80052a0:	0e5b      	lsrs	r3, r3, #25
 80052a2:	f003 0303 	and.w	r3, r3, #3
 80052a6:	3301      	adds	r3, #1
 80052a8:	005b      	lsls	r3, r3, #1
 80052aa:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80052ac:	697a      	ldr	r2, [r7, #20]
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80052b4:	613b      	str	r3, [r7, #16]
 80052b6:	e001      	b.n	80052bc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80052b8:	2300      	movs	r3, #0
 80052ba:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80052bc:	693b      	ldr	r3, [r7, #16]
}
 80052be:	4618      	mov	r0, r3
 80052c0:	371c      	adds	r7, #28
 80052c2:	46bd      	mov	sp, r7
 80052c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c8:	4770      	bx	lr
 80052ca:	bf00      	nop
 80052cc:	40021000 	.word	0x40021000
 80052d0:	00f42400 	.word	0x00f42400
 80052d4:	007a1200 	.word	0x007a1200

080052d8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80052d8:	b480      	push	{r7}
 80052da:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80052dc:	4b03      	ldr	r3, [pc, #12]	; (80052ec <HAL_RCC_GetHCLKFreq+0x14>)
 80052de:	681b      	ldr	r3, [r3, #0]
}
 80052e0:	4618      	mov	r0, r3
 80052e2:	46bd      	mov	sp, r7
 80052e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e8:	4770      	bx	lr
 80052ea:	bf00      	nop
 80052ec:	20000408 	.word	0x20000408

080052f0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80052f0:	b580      	push	{r7, lr}
 80052f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80052f4:	f7ff fff0 	bl	80052d8 <HAL_RCC_GetHCLKFreq>
 80052f8:	4602      	mov	r2, r0
 80052fa:	4b06      	ldr	r3, [pc, #24]	; (8005314 <HAL_RCC_GetPCLK1Freq+0x24>)
 80052fc:	689b      	ldr	r3, [r3, #8]
 80052fe:	0a1b      	lsrs	r3, r3, #8
 8005300:	f003 0307 	and.w	r3, r3, #7
 8005304:	4904      	ldr	r1, [pc, #16]	; (8005318 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005306:	5ccb      	ldrb	r3, [r1, r3]
 8005308:	f003 031f 	and.w	r3, r3, #31
 800530c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005310:	4618      	mov	r0, r3
 8005312:	bd80      	pop	{r7, pc}
 8005314:	40021000 	.word	0x40021000
 8005318:	08007d78 	.word	0x08007d78

0800531c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800531c:	b580      	push	{r7, lr}
 800531e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005320:	f7ff ffda 	bl	80052d8 <HAL_RCC_GetHCLKFreq>
 8005324:	4602      	mov	r2, r0
 8005326:	4b06      	ldr	r3, [pc, #24]	; (8005340 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005328:	689b      	ldr	r3, [r3, #8]
 800532a:	0adb      	lsrs	r3, r3, #11
 800532c:	f003 0307 	and.w	r3, r3, #7
 8005330:	4904      	ldr	r1, [pc, #16]	; (8005344 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005332:	5ccb      	ldrb	r3, [r1, r3]
 8005334:	f003 031f 	and.w	r3, r3, #31
 8005338:	fa22 f303 	lsr.w	r3, r2, r3
}
 800533c:	4618      	mov	r0, r3
 800533e:	bd80      	pop	{r7, pc}
 8005340:	40021000 	.word	0x40021000
 8005344:	08007d78 	.word	0x08007d78

08005348 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8005348:	b480      	push	{r7}
 800534a:	b087      	sub	sp, #28
 800534c:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800534e:	4b1e      	ldr	r3, [pc, #120]	; (80053c8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005350:	68db      	ldr	r3, [r3, #12]
 8005352:	f003 0303 	and.w	r3, r3, #3
 8005356:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005358:	4b1b      	ldr	r3, [pc, #108]	; (80053c8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800535a:	68db      	ldr	r3, [r3, #12]
 800535c:	091b      	lsrs	r3, r3, #4
 800535e:	f003 030f 	and.w	r3, r3, #15
 8005362:	3301      	adds	r3, #1
 8005364:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8005366:	693b      	ldr	r3, [r7, #16]
 8005368:	2b03      	cmp	r3, #3
 800536a:	d10c      	bne.n	8005386 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800536c:	4a17      	ldr	r2, [pc, #92]	; (80053cc <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	fbb2 f3f3 	udiv	r3, r2, r3
 8005374:	4a14      	ldr	r2, [pc, #80]	; (80053c8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005376:	68d2      	ldr	r2, [r2, #12]
 8005378:	0a12      	lsrs	r2, r2, #8
 800537a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800537e:	fb02 f303 	mul.w	r3, r2, r3
 8005382:	617b      	str	r3, [r7, #20]
    break;
 8005384:	e00c      	b.n	80053a0 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005386:	4a12      	ldr	r2, [pc, #72]	; (80053d0 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	fbb2 f3f3 	udiv	r3, r2, r3
 800538e:	4a0e      	ldr	r2, [pc, #56]	; (80053c8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005390:	68d2      	ldr	r2, [r2, #12]
 8005392:	0a12      	lsrs	r2, r2, #8
 8005394:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005398:	fb02 f303 	mul.w	r3, r2, r3
 800539c:	617b      	str	r3, [r7, #20]
    break;
 800539e:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80053a0:	4b09      	ldr	r3, [pc, #36]	; (80053c8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80053a2:	68db      	ldr	r3, [r3, #12]
 80053a4:	0e5b      	lsrs	r3, r3, #25
 80053a6:	f003 0303 	and.w	r3, r3, #3
 80053aa:	3301      	adds	r3, #1
 80053ac:	005b      	lsls	r3, r3, #1
 80053ae:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80053b0:	697a      	ldr	r2, [r7, #20]
 80053b2:	68bb      	ldr	r3, [r7, #8]
 80053b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80053b8:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80053ba:	687b      	ldr	r3, [r7, #4]
}
 80053bc:	4618      	mov	r0, r3
 80053be:	371c      	adds	r7, #28
 80053c0:	46bd      	mov	sp, r7
 80053c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c6:	4770      	bx	lr
 80053c8:	40021000 	.word	0x40021000
 80053cc:	007a1200 	.word	0x007a1200
 80053d0:	00f42400 	.word	0x00f42400

080053d4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80053d4:	b580      	push	{r7, lr}
 80053d6:	b086      	sub	sp, #24
 80053d8:	af00      	add	r7, sp, #0
 80053da:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80053dc:	2300      	movs	r3, #0
 80053de:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80053e0:	2300      	movs	r3, #0
 80053e2:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	f000 8098 	beq.w	8005522 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80053f2:	2300      	movs	r3, #0
 80053f4:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80053f6:	4b43      	ldr	r3, [pc, #268]	; (8005504 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80053f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80053fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d10d      	bne.n	800541e <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005402:	4b40      	ldr	r3, [pc, #256]	; (8005504 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005404:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005406:	4a3f      	ldr	r2, [pc, #252]	; (8005504 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005408:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800540c:	6593      	str	r3, [r2, #88]	; 0x58
 800540e:	4b3d      	ldr	r3, [pc, #244]	; (8005504 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005410:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005412:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005416:	60bb      	str	r3, [r7, #8]
 8005418:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800541a:	2301      	movs	r3, #1
 800541c:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800541e:	4b3a      	ldr	r3, [pc, #232]	; (8005508 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	4a39      	ldr	r2, [pc, #228]	; (8005508 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005424:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005428:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800542a:	f7fc fa33 	bl	8001894 <HAL_GetTick>
 800542e:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005430:	e009      	b.n	8005446 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005432:	f7fc fa2f 	bl	8001894 <HAL_GetTick>
 8005436:	4602      	mov	r2, r0
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	1ad3      	subs	r3, r2, r3
 800543c:	2b02      	cmp	r3, #2
 800543e:	d902      	bls.n	8005446 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8005440:	2303      	movs	r3, #3
 8005442:	74fb      	strb	r3, [r7, #19]
        break;
 8005444:	e005      	b.n	8005452 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005446:	4b30      	ldr	r3, [pc, #192]	; (8005508 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800544e:	2b00      	cmp	r3, #0
 8005450:	d0ef      	beq.n	8005432 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8005452:	7cfb      	ldrb	r3, [r7, #19]
 8005454:	2b00      	cmp	r3, #0
 8005456:	d159      	bne.n	800550c <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005458:	4b2a      	ldr	r3, [pc, #168]	; (8005504 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800545a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800545e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005462:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005464:	697b      	ldr	r3, [r7, #20]
 8005466:	2b00      	cmp	r3, #0
 8005468:	d01e      	beq.n	80054a8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800546e:	697a      	ldr	r2, [r7, #20]
 8005470:	429a      	cmp	r2, r3
 8005472:	d019      	beq.n	80054a8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005474:	4b23      	ldr	r3, [pc, #140]	; (8005504 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005476:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800547a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800547e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005480:	4b20      	ldr	r3, [pc, #128]	; (8005504 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005482:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005486:	4a1f      	ldr	r2, [pc, #124]	; (8005504 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005488:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800548c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005490:	4b1c      	ldr	r3, [pc, #112]	; (8005504 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005492:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005496:	4a1b      	ldr	r2, [pc, #108]	; (8005504 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005498:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800549c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80054a0:	4a18      	ldr	r2, [pc, #96]	; (8005504 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80054a2:	697b      	ldr	r3, [r7, #20]
 80054a4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80054a8:	697b      	ldr	r3, [r7, #20]
 80054aa:	f003 0301 	and.w	r3, r3, #1
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d016      	beq.n	80054e0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80054b2:	f7fc f9ef 	bl	8001894 <HAL_GetTick>
 80054b6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80054b8:	e00b      	b.n	80054d2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80054ba:	f7fc f9eb 	bl	8001894 <HAL_GetTick>
 80054be:	4602      	mov	r2, r0
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	1ad3      	subs	r3, r2, r3
 80054c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80054c8:	4293      	cmp	r3, r2
 80054ca:	d902      	bls.n	80054d2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80054cc:	2303      	movs	r3, #3
 80054ce:	74fb      	strb	r3, [r7, #19]
            break;
 80054d0:	e006      	b.n	80054e0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80054d2:	4b0c      	ldr	r3, [pc, #48]	; (8005504 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80054d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80054d8:	f003 0302 	and.w	r3, r3, #2
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d0ec      	beq.n	80054ba <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80054e0:	7cfb      	ldrb	r3, [r7, #19]
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d10b      	bne.n	80054fe <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80054e6:	4b07      	ldr	r3, [pc, #28]	; (8005504 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80054e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80054ec:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80054f4:	4903      	ldr	r1, [pc, #12]	; (8005504 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80054f6:	4313      	orrs	r3, r2
 80054f8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80054fc:	e008      	b.n	8005510 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80054fe:	7cfb      	ldrb	r3, [r7, #19]
 8005500:	74bb      	strb	r3, [r7, #18]
 8005502:	e005      	b.n	8005510 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8005504:	40021000 	.word	0x40021000
 8005508:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800550c:	7cfb      	ldrb	r3, [r7, #19]
 800550e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005510:	7c7b      	ldrb	r3, [r7, #17]
 8005512:	2b01      	cmp	r3, #1
 8005514:	d105      	bne.n	8005522 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005516:	4baf      	ldr	r3, [pc, #700]	; (80057d4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005518:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800551a:	4aae      	ldr	r2, [pc, #696]	; (80057d4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800551c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005520:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	f003 0301 	and.w	r3, r3, #1
 800552a:	2b00      	cmp	r3, #0
 800552c:	d00a      	beq.n	8005544 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800552e:	4ba9      	ldr	r3, [pc, #676]	; (80057d4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005530:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005534:	f023 0203 	bic.w	r2, r3, #3
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	685b      	ldr	r3, [r3, #4]
 800553c:	49a5      	ldr	r1, [pc, #660]	; (80057d4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800553e:	4313      	orrs	r3, r2
 8005540:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	f003 0302 	and.w	r3, r3, #2
 800554c:	2b00      	cmp	r3, #0
 800554e:	d00a      	beq.n	8005566 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005550:	4ba0      	ldr	r3, [pc, #640]	; (80057d4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005552:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005556:	f023 020c 	bic.w	r2, r3, #12
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	689b      	ldr	r3, [r3, #8]
 800555e:	499d      	ldr	r1, [pc, #628]	; (80057d4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005560:	4313      	orrs	r3, r2
 8005562:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	f003 0304 	and.w	r3, r3, #4
 800556e:	2b00      	cmp	r3, #0
 8005570:	d00a      	beq.n	8005588 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005572:	4b98      	ldr	r3, [pc, #608]	; (80057d4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005574:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005578:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	68db      	ldr	r3, [r3, #12]
 8005580:	4994      	ldr	r1, [pc, #592]	; (80057d4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005582:	4313      	orrs	r3, r2
 8005584:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	f003 0308 	and.w	r3, r3, #8
 8005590:	2b00      	cmp	r3, #0
 8005592:	d00a      	beq.n	80055aa <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005594:	4b8f      	ldr	r3, [pc, #572]	; (80057d4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005596:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800559a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	691b      	ldr	r3, [r3, #16]
 80055a2:	498c      	ldr	r1, [pc, #560]	; (80057d4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80055a4:	4313      	orrs	r3, r2
 80055a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	f003 0310 	and.w	r3, r3, #16
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d00a      	beq.n	80055cc <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80055b6:	4b87      	ldr	r3, [pc, #540]	; (80057d4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80055b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80055bc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	695b      	ldr	r3, [r3, #20]
 80055c4:	4983      	ldr	r1, [pc, #524]	; (80057d4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80055c6:	4313      	orrs	r3, r2
 80055c8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	f003 0320 	and.w	r3, r3, #32
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d00a      	beq.n	80055ee <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80055d8:	4b7e      	ldr	r3, [pc, #504]	; (80057d4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80055da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80055de:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	699b      	ldr	r3, [r3, #24]
 80055e6:	497b      	ldr	r1, [pc, #492]	; (80057d4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80055e8:	4313      	orrs	r3, r2
 80055ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d00a      	beq.n	8005610 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80055fa:	4b76      	ldr	r3, [pc, #472]	; (80057d4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80055fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005600:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	69db      	ldr	r3, [r3, #28]
 8005608:	4972      	ldr	r1, [pc, #456]	; (80057d4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800560a:	4313      	orrs	r3, r2
 800560c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005618:	2b00      	cmp	r3, #0
 800561a:	d00a      	beq.n	8005632 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800561c:	4b6d      	ldr	r3, [pc, #436]	; (80057d4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800561e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005622:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	6a1b      	ldr	r3, [r3, #32]
 800562a:	496a      	ldr	r1, [pc, #424]	; (80057d4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800562c:	4313      	orrs	r3, r2
 800562e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800563a:	2b00      	cmp	r3, #0
 800563c:	d00a      	beq.n	8005654 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800563e:	4b65      	ldr	r3, [pc, #404]	; (80057d4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005640:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005644:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800564c:	4961      	ldr	r1, [pc, #388]	; (80057d4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800564e:	4313      	orrs	r3, r2
 8005650:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800565c:	2b00      	cmp	r3, #0
 800565e:	d00a      	beq.n	8005676 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005660:	4b5c      	ldr	r3, [pc, #368]	; (80057d4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005662:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005666:	f023 0203 	bic.w	r2, r3, #3
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800566e:	4959      	ldr	r1, [pc, #356]	; (80057d4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005670:	4313      	orrs	r3, r2
 8005672:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800567e:	2b00      	cmp	r3, #0
 8005680:	d00a      	beq.n	8005698 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005682:	4b54      	ldr	r3, [pc, #336]	; (80057d4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005684:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005688:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005690:	4950      	ldr	r1, [pc, #320]	; (80057d4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005692:	4313      	orrs	r3, r2
 8005694:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d015      	beq.n	80056d0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80056a4:	4b4b      	ldr	r3, [pc, #300]	; (80057d4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80056a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80056aa:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056b2:	4948      	ldr	r1, [pc, #288]	; (80057d4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80056b4:	4313      	orrs	r3, r2
 80056b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056be:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80056c2:	d105      	bne.n	80056d0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80056c4:	4b43      	ldr	r3, [pc, #268]	; (80057d4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80056c6:	68db      	ldr	r3, [r3, #12]
 80056c8:	4a42      	ldr	r2, [pc, #264]	; (80057d4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80056ca:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80056ce:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d015      	beq.n	8005708 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80056dc:	4b3d      	ldr	r3, [pc, #244]	; (80057d4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80056de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80056e2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80056ea:	493a      	ldr	r1, [pc, #232]	; (80057d4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80056ec:	4313      	orrs	r3, r2
 80056ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80056f6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80056fa:	d105      	bne.n	8005708 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80056fc:	4b35      	ldr	r3, [pc, #212]	; (80057d4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80056fe:	68db      	ldr	r3, [r3, #12]
 8005700:	4a34      	ldr	r2, [pc, #208]	; (80057d4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005702:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005706:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005710:	2b00      	cmp	r3, #0
 8005712:	d015      	beq.n	8005740 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005714:	4b2f      	ldr	r3, [pc, #188]	; (80057d4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005716:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800571a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005722:	492c      	ldr	r1, [pc, #176]	; (80057d4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005724:	4313      	orrs	r3, r2
 8005726:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800572e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005732:	d105      	bne.n	8005740 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005734:	4b27      	ldr	r3, [pc, #156]	; (80057d4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005736:	68db      	ldr	r3, [r3, #12]
 8005738:	4a26      	ldr	r2, [pc, #152]	; (80057d4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800573a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800573e:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005748:	2b00      	cmp	r3, #0
 800574a:	d015      	beq.n	8005778 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800574c:	4b21      	ldr	r3, [pc, #132]	; (80057d4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800574e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005752:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800575a:	491e      	ldr	r1, [pc, #120]	; (80057d4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800575c:	4313      	orrs	r3, r2
 800575e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005766:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800576a:	d105      	bne.n	8005778 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800576c:	4b19      	ldr	r3, [pc, #100]	; (80057d4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800576e:	68db      	ldr	r3, [r3, #12]
 8005770:	4a18      	ldr	r2, [pc, #96]	; (80057d4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005772:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005776:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005780:	2b00      	cmp	r3, #0
 8005782:	d015      	beq.n	80057b0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005784:	4b13      	ldr	r3, [pc, #76]	; (80057d4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005786:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800578a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005792:	4910      	ldr	r1, [pc, #64]	; (80057d4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005794:	4313      	orrs	r3, r2
 8005796:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800579e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80057a2:	d105      	bne.n	80057b0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80057a4:	4b0b      	ldr	r3, [pc, #44]	; (80057d4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80057a6:	68db      	ldr	r3, [r3, #12]
 80057a8:	4a0a      	ldr	r2, [pc, #40]	; (80057d4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80057aa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80057ae:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d018      	beq.n	80057ee <HAL_RCCEx_PeriphCLKConfig+0x41a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80057bc:	4b05      	ldr	r3, [pc, #20]	; (80057d4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80057be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80057c2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80057ca:	4902      	ldr	r1, [pc, #8]	; (80057d4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80057cc:	4313      	orrs	r3, r2
 80057ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80057d2:	e001      	b.n	80057d8 <HAL_RCCEx_PeriphCLKConfig+0x404>
 80057d4:	40021000 	.word	0x40021000
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80057dc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80057e0:	d105      	bne.n	80057ee <HAL_RCCEx_PeriphCLKConfig+0x41a>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80057e2:	4b21      	ldr	r3, [pc, #132]	; (8005868 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 80057e4:	68db      	ldr	r3, [r3, #12]
 80057e6:	4a20      	ldr	r2, [pc, #128]	; (8005868 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 80057e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80057ec:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d015      	beq.n	8005826 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 80057fa:	4b1b      	ldr	r3, [pc, #108]	; (8005868 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 80057fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005800:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005808:	4917      	ldr	r1, [pc, #92]	; (8005868 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800580a:	4313      	orrs	r3, r2
 800580c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005814:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005818:	d105      	bne.n	8005826 <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800581a:	4b13      	ldr	r3, [pc, #76]	; (8005868 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800581c:	68db      	ldr	r3, [r3, #12]
 800581e:	4a12      	ldr	r2, [pc, #72]	; (8005868 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8005820:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005824:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800582e:	2b00      	cmp	r3, #0
 8005830:	d015      	beq.n	800585e <HAL_RCCEx_PeriphCLKConfig+0x48a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8005832:	4b0d      	ldr	r3, [pc, #52]	; (8005868 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8005834:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005838:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005840:	4909      	ldr	r1, [pc, #36]	; (8005868 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8005842:	4313      	orrs	r3, r2
 8005844:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800584c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005850:	d105      	bne.n	800585e <HAL_RCCEx_PeriphCLKConfig+0x48a>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005852:	4b05      	ldr	r3, [pc, #20]	; (8005868 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8005854:	68db      	ldr	r3, [r3, #12]
 8005856:	4a04      	ldr	r2, [pc, #16]	; (8005868 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8005858:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800585c:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 800585e:	7cbb      	ldrb	r3, [r7, #18]
}
 8005860:	4618      	mov	r0, r3
 8005862:	3718      	adds	r7, #24
 8005864:	46bd      	mov	sp, r7
 8005866:	bd80      	pop	{r7, pc}
 8005868:	40021000 	.word	0x40021000

0800586c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800586c:	b580      	push	{r7, lr}
 800586e:	b082      	sub	sp, #8
 8005870:	af00      	add	r7, sp, #0
 8005872:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	2b00      	cmp	r3, #0
 8005878:	d101      	bne.n	800587e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800587a:	2301      	movs	r3, #1
 800587c:	e049      	b.n	8005912 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005884:	b2db      	uxtb	r3, r3
 8005886:	2b00      	cmp	r3, #0
 8005888:	d106      	bne.n	8005898 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	2200      	movs	r2, #0
 800588e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005892:	6878      	ldr	r0, [r7, #4]
 8005894:	f7fb fdd8 	bl	8001448 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	2202      	movs	r2, #2
 800589c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681a      	ldr	r2, [r3, #0]
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	3304      	adds	r3, #4
 80058a8:	4619      	mov	r1, r3
 80058aa:	4610      	mov	r0, r2
 80058ac:	f000 fb5e 	bl	8005f6c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	2201      	movs	r2, #1
 80058b4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	2201      	movs	r2, #1
 80058bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	2201      	movs	r2, #1
 80058c4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	2201      	movs	r2, #1
 80058cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	2201      	movs	r2, #1
 80058d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	2201      	movs	r2, #1
 80058dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	2201      	movs	r2, #1
 80058e4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	2201      	movs	r2, #1
 80058ec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	2201      	movs	r2, #1
 80058f4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	2201      	movs	r2, #1
 80058fc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	2201      	movs	r2, #1
 8005904:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	2201      	movs	r2, #1
 800590c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005910:	2300      	movs	r3, #0
}
 8005912:	4618      	mov	r0, r3
 8005914:	3708      	adds	r7, #8
 8005916:	46bd      	mov	sp, r7
 8005918:	bd80      	pop	{r7, pc}
	...

0800591c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800591c:	b480      	push	{r7}
 800591e:	b085      	sub	sp, #20
 8005920:	af00      	add	r7, sp, #0
 8005922:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800592a:	b2db      	uxtb	r3, r3
 800592c:	2b01      	cmp	r3, #1
 800592e:	d001      	beq.n	8005934 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005930:	2301      	movs	r3, #1
 8005932:	e054      	b.n	80059de <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	2202      	movs	r2, #2
 8005938:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	68da      	ldr	r2, [r3, #12]
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	f042 0201 	orr.w	r2, r2, #1
 800594a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	4a26      	ldr	r2, [pc, #152]	; (80059ec <HAL_TIM_Base_Start_IT+0xd0>)
 8005952:	4293      	cmp	r3, r2
 8005954:	d022      	beq.n	800599c <HAL_TIM_Base_Start_IT+0x80>
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800595e:	d01d      	beq.n	800599c <HAL_TIM_Base_Start_IT+0x80>
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	4a22      	ldr	r2, [pc, #136]	; (80059f0 <HAL_TIM_Base_Start_IT+0xd4>)
 8005966:	4293      	cmp	r3, r2
 8005968:	d018      	beq.n	800599c <HAL_TIM_Base_Start_IT+0x80>
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	4a21      	ldr	r2, [pc, #132]	; (80059f4 <HAL_TIM_Base_Start_IT+0xd8>)
 8005970:	4293      	cmp	r3, r2
 8005972:	d013      	beq.n	800599c <HAL_TIM_Base_Start_IT+0x80>
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	4a1f      	ldr	r2, [pc, #124]	; (80059f8 <HAL_TIM_Base_Start_IT+0xdc>)
 800597a:	4293      	cmp	r3, r2
 800597c:	d00e      	beq.n	800599c <HAL_TIM_Base_Start_IT+0x80>
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	4a1e      	ldr	r2, [pc, #120]	; (80059fc <HAL_TIM_Base_Start_IT+0xe0>)
 8005984:	4293      	cmp	r3, r2
 8005986:	d009      	beq.n	800599c <HAL_TIM_Base_Start_IT+0x80>
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	4a1c      	ldr	r2, [pc, #112]	; (8005a00 <HAL_TIM_Base_Start_IT+0xe4>)
 800598e:	4293      	cmp	r3, r2
 8005990:	d004      	beq.n	800599c <HAL_TIM_Base_Start_IT+0x80>
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	4a1b      	ldr	r2, [pc, #108]	; (8005a04 <HAL_TIM_Base_Start_IT+0xe8>)
 8005998:	4293      	cmp	r3, r2
 800599a:	d115      	bne.n	80059c8 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	689a      	ldr	r2, [r3, #8]
 80059a2:	4b19      	ldr	r3, [pc, #100]	; (8005a08 <HAL_TIM_Base_Start_IT+0xec>)
 80059a4:	4013      	ands	r3, r2
 80059a6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	2b06      	cmp	r3, #6
 80059ac:	d015      	beq.n	80059da <HAL_TIM_Base_Start_IT+0xbe>
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80059b4:	d011      	beq.n	80059da <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	681a      	ldr	r2, [r3, #0]
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	f042 0201 	orr.w	r2, r2, #1
 80059c4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80059c6:	e008      	b.n	80059da <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	681a      	ldr	r2, [r3, #0]
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	f042 0201 	orr.w	r2, r2, #1
 80059d6:	601a      	str	r2, [r3, #0]
 80059d8:	e000      	b.n	80059dc <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80059da:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80059dc:	2300      	movs	r3, #0
}
 80059de:	4618      	mov	r0, r3
 80059e0:	3714      	adds	r7, #20
 80059e2:	46bd      	mov	sp, r7
 80059e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059e8:	4770      	bx	lr
 80059ea:	bf00      	nop
 80059ec:	40012c00 	.word	0x40012c00
 80059f0:	40000400 	.word	0x40000400
 80059f4:	40000800 	.word	0x40000800
 80059f8:	40000c00 	.word	0x40000c00
 80059fc:	40013400 	.word	0x40013400
 8005a00:	40014000 	.word	0x40014000
 8005a04:	40015000 	.word	0x40015000
 8005a08:	00010007 	.word	0x00010007

08005a0c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005a0c:	b580      	push	{r7, lr}
 8005a0e:	b082      	sub	sp, #8
 8005a10:	af00      	add	r7, sp, #0
 8005a12:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	691b      	ldr	r3, [r3, #16]
 8005a1a:	f003 0302 	and.w	r3, r3, #2
 8005a1e:	2b02      	cmp	r3, #2
 8005a20:	d122      	bne.n	8005a68 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	68db      	ldr	r3, [r3, #12]
 8005a28:	f003 0302 	and.w	r3, r3, #2
 8005a2c:	2b02      	cmp	r3, #2
 8005a2e:	d11b      	bne.n	8005a68 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	f06f 0202 	mvn.w	r2, #2
 8005a38:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	2201      	movs	r2, #1
 8005a3e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	699b      	ldr	r3, [r3, #24]
 8005a46:	f003 0303 	and.w	r3, r3, #3
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d003      	beq.n	8005a56 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005a4e:	6878      	ldr	r0, [r7, #4]
 8005a50:	f000 fa6e 	bl	8005f30 <HAL_TIM_IC_CaptureCallback>
 8005a54:	e005      	b.n	8005a62 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005a56:	6878      	ldr	r0, [r7, #4]
 8005a58:	f000 fa60 	bl	8005f1c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a5c:	6878      	ldr	r0, [r7, #4]
 8005a5e:	f000 fa71 	bl	8005f44 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	2200      	movs	r2, #0
 8005a66:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	691b      	ldr	r3, [r3, #16]
 8005a6e:	f003 0304 	and.w	r3, r3, #4
 8005a72:	2b04      	cmp	r3, #4
 8005a74:	d122      	bne.n	8005abc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	68db      	ldr	r3, [r3, #12]
 8005a7c:	f003 0304 	and.w	r3, r3, #4
 8005a80:	2b04      	cmp	r3, #4
 8005a82:	d11b      	bne.n	8005abc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	f06f 0204 	mvn.w	r2, #4
 8005a8c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	2202      	movs	r2, #2
 8005a92:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	699b      	ldr	r3, [r3, #24]
 8005a9a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d003      	beq.n	8005aaa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005aa2:	6878      	ldr	r0, [r7, #4]
 8005aa4:	f000 fa44 	bl	8005f30 <HAL_TIM_IC_CaptureCallback>
 8005aa8:	e005      	b.n	8005ab6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005aaa:	6878      	ldr	r0, [r7, #4]
 8005aac:	f000 fa36 	bl	8005f1c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005ab0:	6878      	ldr	r0, [r7, #4]
 8005ab2:	f000 fa47 	bl	8005f44 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	2200      	movs	r2, #0
 8005aba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	691b      	ldr	r3, [r3, #16]
 8005ac2:	f003 0308 	and.w	r3, r3, #8
 8005ac6:	2b08      	cmp	r3, #8
 8005ac8:	d122      	bne.n	8005b10 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	68db      	ldr	r3, [r3, #12]
 8005ad0:	f003 0308 	and.w	r3, r3, #8
 8005ad4:	2b08      	cmp	r3, #8
 8005ad6:	d11b      	bne.n	8005b10 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	f06f 0208 	mvn.w	r2, #8
 8005ae0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	2204      	movs	r2, #4
 8005ae6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	69db      	ldr	r3, [r3, #28]
 8005aee:	f003 0303 	and.w	r3, r3, #3
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d003      	beq.n	8005afe <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005af6:	6878      	ldr	r0, [r7, #4]
 8005af8:	f000 fa1a 	bl	8005f30 <HAL_TIM_IC_CaptureCallback>
 8005afc:	e005      	b.n	8005b0a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005afe:	6878      	ldr	r0, [r7, #4]
 8005b00:	f000 fa0c 	bl	8005f1c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005b04:	6878      	ldr	r0, [r7, #4]
 8005b06:	f000 fa1d 	bl	8005f44 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	2200      	movs	r2, #0
 8005b0e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	691b      	ldr	r3, [r3, #16]
 8005b16:	f003 0310 	and.w	r3, r3, #16
 8005b1a:	2b10      	cmp	r3, #16
 8005b1c:	d122      	bne.n	8005b64 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	68db      	ldr	r3, [r3, #12]
 8005b24:	f003 0310 	and.w	r3, r3, #16
 8005b28:	2b10      	cmp	r3, #16
 8005b2a:	d11b      	bne.n	8005b64 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	f06f 0210 	mvn.w	r2, #16
 8005b34:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	2208      	movs	r2, #8
 8005b3a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	69db      	ldr	r3, [r3, #28]
 8005b42:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d003      	beq.n	8005b52 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005b4a:	6878      	ldr	r0, [r7, #4]
 8005b4c:	f000 f9f0 	bl	8005f30 <HAL_TIM_IC_CaptureCallback>
 8005b50:	e005      	b.n	8005b5e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005b52:	6878      	ldr	r0, [r7, #4]
 8005b54:	f000 f9e2 	bl	8005f1c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005b58:	6878      	ldr	r0, [r7, #4]
 8005b5a:	f000 f9f3 	bl	8005f44 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	2200      	movs	r2, #0
 8005b62:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	691b      	ldr	r3, [r3, #16]
 8005b6a:	f003 0301 	and.w	r3, r3, #1
 8005b6e:	2b01      	cmp	r3, #1
 8005b70:	d10e      	bne.n	8005b90 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	68db      	ldr	r3, [r3, #12]
 8005b78:	f003 0301 	and.w	r3, r3, #1
 8005b7c:	2b01      	cmp	r3, #1
 8005b7e:	d107      	bne.n	8005b90 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	f06f 0201 	mvn.w	r2, #1
 8005b88:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005b8a:	6878      	ldr	r0, [r7, #4]
 8005b8c:	f7fa fd9e 	bl	80006cc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	691b      	ldr	r3, [r3, #16]
 8005b96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b9a:	2b80      	cmp	r3, #128	; 0x80
 8005b9c:	d10e      	bne.n	8005bbc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	68db      	ldr	r3, [r3, #12]
 8005ba4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ba8:	2b80      	cmp	r3, #128	; 0x80
 8005baa:	d107      	bne.n	8005bbc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005bb4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005bb6:	6878      	ldr	r0, [r7, #4]
 8005bb8:	f000 fbbc 	bl	8006334 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	691b      	ldr	r3, [r3, #16]
 8005bc2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005bc6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005bca:	d10e      	bne.n	8005bea <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	68db      	ldr	r3, [r3, #12]
 8005bd2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005bd6:	2b80      	cmp	r3, #128	; 0x80
 8005bd8:	d107      	bne.n	8005bea <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005be2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005be4:	6878      	ldr	r0, [r7, #4]
 8005be6:	f000 fbaf 	bl	8006348 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	691b      	ldr	r3, [r3, #16]
 8005bf0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005bf4:	2b40      	cmp	r3, #64	; 0x40
 8005bf6:	d10e      	bne.n	8005c16 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	68db      	ldr	r3, [r3, #12]
 8005bfe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c02:	2b40      	cmp	r3, #64	; 0x40
 8005c04:	d107      	bne.n	8005c16 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005c0e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005c10:	6878      	ldr	r0, [r7, #4]
 8005c12:	f000 f9a1 	bl	8005f58 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	691b      	ldr	r3, [r3, #16]
 8005c1c:	f003 0320 	and.w	r3, r3, #32
 8005c20:	2b20      	cmp	r3, #32
 8005c22:	d10e      	bne.n	8005c42 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	68db      	ldr	r3, [r3, #12]
 8005c2a:	f003 0320 	and.w	r3, r3, #32
 8005c2e:	2b20      	cmp	r3, #32
 8005c30:	d107      	bne.n	8005c42 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	f06f 0220 	mvn.w	r2, #32
 8005c3a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005c3c:	6878      	ldr	r0, [r7, #4]
 8005c3e:	f000 fb6f 	bl	8006320 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	691b      	ldr	r3, [r3, #16]
 8005c48:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005c4c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005c50:	d10f      	bne.n	8005c72 <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	68db      	ldr	r3, [r3, #12]
 8005c58:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005c5c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005c60:	d107      	bne.n	8005c72 <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 8005c6a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8005c6c:	6878      	ldr	r0, [r7, #4]
 8005c6e:	f000 fb75 	bl	800635c <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	691b      	ldr	r3, [r3, #16]
 8005c78:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005c7c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005c80:	d10f      	bne.n	8005ca2 <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	68db      	ldr	r3, [r3, #12]
 8005c88:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005c8c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005c90:	d107      	bne.n	8005ca2 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 8005c9a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8005c9c:	6878      	ldr	r0, [r7, #4]
 8005c9e:	f000 fb67 	bl	8006370 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	691b      	ldr	r3, [r3, #16]
 8005ca8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005cac:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005cb0:	d10f      	bne.n	8005cd2 <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	68db      	ldr	r3, [r3, #12]
 8005cb8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005cbc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005cc0:	d107      	bne.n	8005cd2 <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 8005cca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8005ccc:	6878      	ldr	r0, [r7, #4]
 8005cce:	f000 fb59 	bl	8006384 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	691b      	ldr	r3, [r3, #16]
 8005cd8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005cdc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005ce0:	d10f      	bne.n	8005d02 <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	68db      	ldr	r3, [r3, #12]
 8005ce8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005cec:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005cf0:	d107      	bne.n	8005d02 <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 8005cfa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8005cfc:	6878      	ldr	r0, [r7, #4]
 8005cfe:	f000 fb4b 	bl	8006398 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005d02:	bf00      	nop
 8005d04:	3708      	adds	r7, #8
 8005d06:	46bd      	mov	sp, r7
 8005d08:	bd80      	pop	{r7, pc}
	...

08005d0c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005d0c:	b580      	push	{r7, lr}
 8005d0e:	b084      	sub	sp, #16
 8005d10:	af00      	add	r7, sp, #0
 8005d12:	6078      	str	r0, [r7, #4]
 8005d14:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005d1c:	2b01      	cmp	r3, #1
 8005d1e:	d101      	bne.n	8005d24 <HAL_TIM_ConfigClockSource+0x18>
 8005d20:	2302      	movs	r3, #2
 8005d22:	e0ed      	b.n	8005f00 <HAL_TIM_ConfigClockSource+0x1f4>
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	2201      	movs	r2, #1
 8005d28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	2202      	movs	r2, #2
 8005d30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	689b      	ldr	r3, [r3, #8]
 8005d3a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 8005d42:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005d46:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005d4e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	68fa      	ldr	r2, [r7, #12]
 8005d56:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005d58:	683b      	ldr	r3, [r7, #0]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	4a6a      	ldr	r2, [pc, #424]	; (8005f08 <HAL_TIM_ConfigClockSource+0x1fc>)
 8005d5e:	4293      	cmp	r3, r2
 8005d60:	f000 80b9 	beq.w	8005ed6 <HAL_TIM_ConfigClockSource+0x1ca>
 8005d64:	4a68      	ldr	r2, [pc, #416]	; (8005f08 <HAL_TIM_ConfigClockSource+0x1fc>)
 8005d66:	4293      	cmp	r3, r2
 8005d68:	f200 80be 	bhi.w	8005ee8 <HAL_TIM_ConfigClockSource+0x1dc>
 8005d6c:	4a67      	ldr	r2, [pc, #412]	; (8005f0c <HAL_TIM_ConfigClockSource+0x200>)
 8005d6e:	4293      	cmp	r3, r2
 8005d70:	f000 80b1 	beq.w	8005ed6 <HAL_TIM_ConfigClockSource+0x1ca>
 8005d74:	4a65      	ldr	r2, [pc, #404]	; (8005f0c <HAL_TIM_ConfigClockSource+0x200>)
 8005d76:	4293      	cmp	r3, r2
 8005d78:	f200 80b6 	bhi.w	8005ee8 <HAL_TIM_ConfigClockSource+0x1dc>
 8005d7c:	4a64      	ldr	r2, [pc, #400]	; (8005f10 <HAL_TIM_ConfigClockSource+0x204>)
 8005d7e:	4293      	cmp	r3, r2
 8005d80:	f000 80a9 	beq.w	8005ed6 <HAL_TIM_ConfigClockSource+0x1ca>
 8005d84:	4a62      	ldr	r2, [pc, #392]	; (8005f10 <HAL_TIM_ConfigClockSource+0x204>)
 8005d86:	4293      	cmp	r3, r2
 8005d88:	f200 80ae 	bhi.w	8005ee8 <HAL_TIM_ConfigClockSource+0x1dc>
 8005d8c:	4a61      	ldr	r2, [pc, #388]	; (8005f14 <HAL_TIM_ConfigClockSource+0x208>)
 8005d8e:	4293      	cmp	r3, r2
 8005d90:	f000 80a1 	beq.w	8005ed6 <HAL_TIM_ConfigClockSource+0x1ca>
 8005d94:	4a5f      	ldr	r2, [pc, #380]	; (8005f14 <HAL_TIM_ConfigClockSource+0x208>)
 8005d96:	4293      	cmp	r3, r2
 8005d98:	f200 80a6 	bhi.w	8005ee8 <HAL_TIM_ConfigClockSource+0x1dc>
 8005d9c:	4a5e      	ldr	r2, [pc, #376]	; (8005f18 <HAL_TIM_ConfigClockSource+0x20c>)
 8005d9e:	4293      	cmp	r3, r2
 8005da0:	f000 8099 	beq.w	8005ed6 <HAL_TIM_ConfigClockSource+0x1ca>
 8005da4:	4a5c      	ldr	r2, [pc, #368]	; (8005f18 <HAL_TIM_ConfigClockSource+0x20c>)
 8005da6:	4293      	cmp	r3, r2
 8005da8:	f200 809e 	bhi.w	8005ee8 <HAL_TIM_ConfigClockSource+0x1dc>
 8005dac:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8005db0:	f000 8091 	beq.w	8005ed6 <HAL_TIM_ConfigClockSource+0x1ca>
 8005db4:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8005db8:	f200 8096 	bhi.w	8005ee8 <HAL_TIM_ConfigClockSource+0x1dc>
 8005dbc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005dc0:	f000 8089 	beq.w	8005ed6 <HAL_TIM_ConfigClockSource+0x1ca>
 8005dc4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005dc8:	f200 808e 	bhi.w	8005ee8 <HAL_TIM_ConfigClockSource+0x1dc>
 8005dcc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005dd0:	d03e      	beq.n	8005e50 <HAL_TIM_ConfigClockSource+0x144>
 8005dd2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005dd6:	f200 8087 	bhi.w	8005ee8 <HAL_TIM_ConfigClockSource+0x1dc>
 8005dda:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005dde:	f000 8085 	beq.w	8005eec <HAL_TIM_ConfigClockSource+0x1e0>
 8005de2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005de6:	d87f      	bhi.n	8005ee8 <HAL_TIM_ConfigClockSource+0x1dc>
 8005de8:	2b70      	cmp	r3, #112	; 0x70
 8005dea:	d01a      	beq.n	8005e22 <HAL_TIM_ConfigClockSource+0x116>
 8005dec:	2b70      	cmp	r3, #112	; 0x70
 8005dee:	d87b      	bhi.n	8005ee8 <HAL_TIM_ConfigClockSource+0x1dc>
 8005df0:	2b60      	cmp	r3, #96	; 0x60
 8005df2:	d050      	beq.n	8005e96 <HAL_TIM_ConfigClockSource+0x18a>
 8005df4:	2b60      	cmp	r3, #96	; 0x60
 8005df6:	d877      	bhi.n	8005ee8 <HAL_TIM_ConfigClockSource+0x1dc>
 8005df8:	2b50      	cmp	r3, #80	; 0x50
 8005dfa:	d03c      	beq.n	8005e76 <HAL_TIM_ConfigClockSource+0x16a>
 8005dfc:	2b50      	cmp	r3, #80	; 0x50
 8005dfe:	d873      	bhi.n	8005ee8 <HAL_TIM_ConfigClockSource+0x1dc>
 8005e00:	2b40      	cmp	r3, #64	; 0x40
 8005e02:	d058      	beq.n	8005eb6 <HAL_TIM_ConfigClockSource+0x1aa>
 8005e04:	2b40      	cmp	r3, #64	; 0x40
 8005e06:	d86f      	bhi.n	8005ee8 <HAL_TIM_ConfigClockSource+0x1dc>
 8005e08:	2b30      	cmp	r3, #48	; 0x30
 8005e0a:	d064      	beq.n	8005ed6 <HAL_TIM_ConfigClockSource+0x1ca>
 8005e0c:	2b30      	cmp	r3, #48	; 0x30
 8005e0e:	d86b      	bhi.n	8005ee8 <HAL_TIM_ConfigClockSource+0x1dc>
 8005e10:	2b20      	cmp	r3, #32
 8005e12:	d060      	beq.n	8005ed6 <HAL_TIM_ConfigClockSource+0x1ca>
 8005e14:	2b20      	cmp	r3, #32
 8005e16:	d867      	bhi.n	8005ee8 <HAL_TIM_ConfigClockSource+0x1dc>
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d05c      	beq.n	8005ed6 <HAL_TIM_ConfigClockSource+0x1ca>
 8005e1c:	2b10      	cmp	r3, #16
 8005e1e:	d05a      	beq.n	8005ed6 <HAL_TIM_ConfigClockSource+0x1ca>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8005e20:	e062      	b.n	8005ee8 <HAL_TIM_ConfigClockSource+0x1dc>
      TIM_ETR_SetConfig(htim->Instance,
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	6818      	ldr	r0, [r3, #0]
 8005e26:	683b      	ldr	r3, [r7, #0]
 8005e28:	6899      	ldr	r1, [r3, #8]
 8005e2a:	683b      	ldr	r3, [r7, #0]
 8005e2c:	685a      	ldr	r2, [r3, #4]
 8005e2e:	683b      	ldr	r3, [r7, #0]
 8005e30:	68db      	ldr	r3, [r3, #12]
 8005e32:	f000 f9bf 	bl	80061b4 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	689b      	ldr	r3, [r3, #8]
 8005e3c:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005e44:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	68fa      	ldr	r2, [r7, #12]
 8005e4c:	609a      	str	r2, [r3, #8]
      break;
 8005e4e:	e04e      	b.n	8005eee <HAL_TIM_ConfigClockSource+0x1e2>
      TIM_ETR_SetConfig(htim->Instance,
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	6818      	ldr	r0, [r3, #0]
 8005e54:	683b      	ldr	r3, [r7, #0]
 8005e56:	6899      	ldr	r1, [r3, #8]
 8005e58:	683b      	ldr	r3, [r7, #0]
 8005e5a:	685a      	ldr	r2, [r3, #4]
 8005e5c:	683b      	ldr	r3, [r7, #0]
 8005e5e:	68db      	ldr	r3, [r3, #12]
 8005e60:	f000 f9a8 	bl	80061b4 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	689a      	ldr	r2, [r3, #8]
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005e72:	609a      	str	r2, [r3, #8]
      break;
 8005e74:	e03b      	b.n	8005eee <HAL_TIM_ConfigClockSource+0x1e2>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	6818      	ldr	r0, [r3, #0]
 8005e7a:	683b      	ldr	r3, [r7, #0]
 8005e7c:	6859      	ldr	r1, [r3, #4]
 8005e7e:	683b      	ldr	r3, [r7, #0]
 8005e80:	68db      	ldr	r3, [r3, #12]
 8005e82:	461a      	mov	r2, r3
 8005e84:	f000 f91a 	bl	80060bc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	2150      	movs	r1, #80	; 0x50
 8005e8e:	4618      	mov	r0, r3
 8005e90:	f000 f973 	bl	800617a <TIM_ITRx_SetConfig>
      break;
 8005e94:	e02b      	b.n	8005eee <HAL_TIM_ConfigClockSource+0x1e2>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	6818      	ldr	r0, [r3, #0]
 8005e9a:	683b      	ldr	r3, [r7, #0]
 8005e9c:	6859      	ldr	r1, [r3, #4]
 8005e9e:	683b      	ldr	r3, [r7, #0]
 8005ea0:	68db      	ldr	r3, [r3, #12]
 8005ea2:	461a      	mov	r2, r3
 8005ea4:	f000 f939 	bl	800611a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	2160      	movs	r1, #96	; 0x60
 8005eae:	4618      	mov	r0, r3
 8005eb0:	f000 f963 	bl	800617a <TIM_ITRx_SetConfig>
      break;
 8005eb4:	e01b      	b.n	8005eee <HAL_TIM_ConfigClockSource+0x1e2>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	6818      	ldr	r0, [r3, #0]
 8005eba:	683b      	ldr	r3, [r7, #0]
 8005ebc:	6859      	ldr	r1, [r3, #4]
 8005ebe:	683b      	ldr	r3, [r7, #0]
 8005ec0:	68db      	ldr	r3, [r3, #12]
 8005ec2:	461a      	mov	r2, r3
 8005ec4:	f000 f8fa 	bl	80060bc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	2140      	movs	r1, #64	; 0x40
 8005ece:	4618      	mov	r0, r3
 8005ed0:	f000 f953 	bl	800617a <TIM_ITRx_SetConfig>
      break;
 8005ed4:	e00b      	b.n	8005eee <HAL_TIM_ConfigClockSource+0x1e2>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	681a      	ldr	r2, [r3, #0]
 8005eda:	683b      	ldr	r3, [r7, #0]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	4619      	mov	r1, r3
 8005ee0:	4610      	mov	r0, r2
 8005ee2:	f000 f94a 	bl	800617a <TIM_ITRx_SetConfig>
        break;
 8005ee6:	e002      	b.n	8005eee <HAL_TIM_ConfigClockSource+0x1e2>
      break;
 8005ee8:	bf00      	nop
 8005eea:	e000      	b.n	8005eee <HAL_TIM_ConfigClockSource+0x1e2>
      break;
 8005eec:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	2201      	movs	r2, #1
 8005ef2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	2200      	movs	r2, #0
 8005efa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005efe:	2300      	movs	r3, #0
}
 8005f00:	4618      	mov	r0, r3
 8005f02:	3710      	adds	r7, #16
 8005f04:	46bd      	mov	sp, r7
 8005f06:	bd80      	pop	{r7, pc}
 8005f08:	00100070 	.word	0x00100070
 8005f0c:	00100050 	.word	0x00100050
 8005f10:	00100040 	.word	0x00100040
 8005f14:	00100030 	.word	0x00100030
 8005f18:	00100020 	.word	0x00100020

08005f1c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005f1c:	b480      	push	{r7}
 8005f1e:	b083      	sub	sp, #12
 8005f20:	af00      	add	r7, sp, #0
 8005f22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005f24:	bf00      	nop
 8005f26:	370c      	adds	r7, #12
 8005f28:	46bd      	mov	sp, r7
 8005f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f2e:	4770      	bx	lr

08005f30 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005f30:	b480      	push	{r7}
 8005f32:	b083      	sub	sp, #12
 8005f34:	af00      	add	r7, sp, #0
 8005f36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005f38:	bf00      	nop
 8005f3a:	370c      	adds	r7, #12
 8005f3c:	46bd      	mov	sp, r7
 8005f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f42:	4770      	bx	lr

08005f44 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005f44:	b480      	push	{r7}
 8005f46:	b083      	sub	sp, #12
 8005f48:	af00      	add	r7, sp, #0
 8005f4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005f4c:	bf00      	nop
 8005f4e:	370c      	adds	r7, #12
 8005f50:	46bd      	mov	sp, r7
 8005f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f56:	4770      	bx	lr

08005f58 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005f58:	b480      	push	{r7}
 8005f5a:	b083      	sub	sp, #12
 8005f5c:	af00      	add	r7, sp, #0
 8005f5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005f60:	bf00      	nop
 8005f62:	370c      	adds	r7, #12
 8005f64:	46bd      	mov	sp, r7
 8005f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f6a:	4770      	bx	lr

08005f6c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005f6c:	b480      	push	{r7}
 8005f6e:	b085      	sub	sp, #20
 8005f70:	af00      	add	r7, sp, #0
 8005f72:	6078      	str	r0, [r7, #4]
 8005f74:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	4a46      	ldr	r2, [pc, #280]	; (8006098 <TIM_Base_SetConfig+0x12c>)
 8005f80:	4293      	cmp	r3, r2
 8005f82:	d017      	beq.n	8005fb4 <TIM_Base_SetConfig+0x48>
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005f8a:	d013      	beq.n	8005fb4 <TIM_Base_SetConfig+0x48>
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	4a43      	ldr	r2, [pc, #268]	; (800609c <TIM_Base_SetConfig+0x130>)
 8005f90:	4293      	cmp	r3, r2
 8005f92:	d00f      	beq.n	8005fb4 <TIM_Base_SetConfig+0x48>
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	4a42      	ldr	r2, [pc, #264]	; (80060a0 <TIM_Base_SetConfig+0x134>)
 8005f98:	4293      	cmp	r3, r2
 8005f9a:	d00b      	beq.n	8005fb4 <TIM_Base_SetConfig+0x48>
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	4a41      	ldr	r2, [pc, #260]	; (80060a4 <TIM_Base_SetConfig+0x138>)
 8005fa0:	4293      	cmp	r3, r2
 8005fa2:	d007      	beq.n	8005fb4 <TIM_Base_SetConfig+0x48>
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	4a40      	ldr	r2, [pc, #256]	; (80060a8 <TIM_Base_SetConfig+0x13c>)
 8005fa8:	4293      	cmp	r3, r2
 8005faa:	d003      	beq.n	8005fb4 <TIM_Base_SetConfig+0x48>
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	4a3f      	ldr	r2, [pc, #252]	; (80060ac <TIM_Base_SetConfig+0x140>)
 8005fb0:	4293      	cmp	r3, r2
 8005fb2:	d108      	bne.n	8005fc6 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005fba:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005fbc:	683b      	ldr	r3, [r7, #0]
 8005fbe:	685b      	ldr	r3, [r3, #4]
 8005fc0:	68fa      	ldr	r2, [r7, #12]
 8005fc2:	4313      	orrs	r3, r2
 8005fc4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	4a33      	ldr	r2, [pc, #204]	; (8006098 <TIM_Base_SetConfig+0x12c>)
 8005fca:	4293      	cmp	r3, r2
 8005fcc:	d023      	beq.n	8006016 <TIM_Base_SetConfig+0xaa>
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005fd4:	d01f      	beq.n	8006016 <TIM_Base_SetConfig+0xaa>
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	4a30      	ldr	r2, [pc, #192]	; (800609c <TIM_Base_SetConfig+0x130>)
 8005fda:	4293      	cmp	r3, r2
 8005fdc:	d01b      	beq.n	8006016 <TIM_Base_SetConfig+0xaa>
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	4a2f      	ldr	r2, [pc, #188]	; (80060a0 <TIM_Base_SetConfig+0x134>)
 8005fe2:	4293      	cmp	r3, r2
 8005fe4:	d017      	beq.n	8006016 <TIM_Base_SetConfig+0xaa>
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	4a2e      	ldr	r2, [pc, #184]	; (80060a4 <TIM_Base_SetConfig+0x138>)
 8005fea:	4293      	cmp	r3, r2
 8005fec:	d013      	beq.n	8006016 <TIM_Base_SetConfig+0xaa>
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	4a2d      	ldr	r2, [pc, #180]	; (80060a8 <TIM_Base_SetConfig+0x13c>)
 8005ff2:	4293      	cmp	r3, r2
 8005ff4:	d00f      	beq.n	8006016 <TIM_Base_SetConfig+0xaa>
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	4a2d      	ldr	r2, [pc, #180]	; (80060b0 <TIM_Base_SetConfig+0x144>)
 8005ffa:	4293      	cmp	r3, r2
 8005ffc:	d00b      	beq.n	8006016 <TIM_Base_SetConfig+0xaa>
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	4a2c      	ldr	r2, [pc, #176]	; (80060b4 <TIM_Base_SetConfig+0x148>)
 8006002:	4293      	cmp	r3, r2
 8006004:	d007      	beq.n	8006016 <TIM_Base_SetConfig+0xaa>
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	4a2b      	ldr	r2, [pc, #172]	; (80060b8 <TIM_Base_SetConfig+0x14c>)
 800600a:	4293      	cmp	r3, r2
 800600c:	d003      	beq.n	8006016 <TIM_Base_SetConfig+0xaa>
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	4a26      	ldr	r2, [pc, #152]	; (80060ac <TIM_Base_SetConfig+0x140>)
 8006012:	4293      	cmp	r3, r2
 8006014:	d108      	bne.n	8006028 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800601c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800601e:	683b      	ldr	r3, [r7, #0]
 8006020:	68db      	ldr	r3, [r3, #12]
 8006022:	68fa      	ldr	r2, [r7, #12]
 8006024:	4313      	orrs	r3, r2
 8006026:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800602e:	683b      	ldr	r3, [r7, #0]
 8006030:	695b      	ldr	r3, [r3, #20]
 8006032:	4313      	orrs	r3, r2
 8006034:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	68fa      	ldr	r2, [r7, #12]
 800603a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800603c:	683b      	ldr	r3, [r7, #0]
 800603e:	689a      	ldr	r2, [r3, #8]
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006044:	683b      	ldr	r3, [r7, #0]
 8006046:	681a      	ldr	r2, [r3, #0]
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	4a12      	ldr	r2, [pc, #72]	; (8006098 <TIM_Base_SetConfig+0x12c>)
 8006050:	4293      	cmp	r3, r2
 8006052:	d013      	beq.n	800607c <TIM_Base_SetConfig+0x110>
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	4a14      	ldr	r2, [pc, #80]	; (80060a8 <TIM_Base_SetConfig+0x13c>)
 8006058:	4293      	cmp	r3, r2
 800605a:	d00f      	beq.n	800607c <TIM_Base_SetConfig+0x110>
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	4a14      	ldr	r2, [pc, #80]	; (80060b0 <TIM_Base_SetConfig+0x144>)
 8006060:	4293      	cmp	r3, r2
 8006062:	d00b      	beq.n	800607c <TIM_Base_SetConfig+0x110>
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	4a13      	ldr	r2, [pc, #76]	; (80060b4 <TIM_Base_SetConfig+0x148>)
 8006068:	4293      	cmp	r3, r2
 800606a:	d007      	beq.n	800607c <TIM_Base_SetConfig+0x110>
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	4a12      	ldr	r2, [pc, #72]	; (80060b8 <TIM_Base_SetConfig+0x14c>)
 8006070:	4293      	cmp	r3, r2
 8006072:	d003      	beq.n	800607c <TIM_Base_SetConfig+0x110>
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	4a0d      	ldr	r2, [pc, #52]	; (80060ac <TIM_Base_SetConfig+0x140>)
 8006078:	4293      	cmp	r3, r2
 800607a:	d103      	bne.n	8006084 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800607c:	683b      	ldr	r3, [r7, #0]
 800607e:	691a      	ldr	r2, [r3, #16]
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	2201      	movs	r2, #1
 8006088:	615a      	str	r2, [r3, #20]
}
 800608a:	bf00      	nop
 800608c:	3714      	adds	r7, #20
 800608e:	46bd      	mov	sp, r7
 8006090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006094:	4770      	bx	lr
 8006096:	bf00      	nop
 8006098:	40012c00 	.word	0x40012c00
 800609c:	40000400 	.word	0x40000400
 80060a0:	40000800 	.word	0x40000800
 80060a4:	40000c00 	.word	0x40000c00
 80060a8:	40013400 	.word	0x40013400
 80060ac:	40015000 	.word	0x40015000
 80060b0:	40014000 	.word	0x40014000
 80060b4:	40014400 	.word	0x40014400
 80060b8:	40014800 	.word	0x40014800

080060bc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80060bc:	b480      	push	{r7}
 80060be:	b087      	sub	sp, #28
 80060c0:	af00      	add	r7, sp, #0
 80060c2:	60f8      	str	r0, [r7, #12]
 80060c4:	60b9      	str	r1, [r7, #8]
 80060c6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	6a1b      	ldr	r3, [r3, #32]
 80060cc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	6a1b      	ldr	r3, [r3, #32]
 80060d2:	f023 0201 	bic.w	r2, r3, #1
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	699b      	ldr	r3, [r3, #24]
 80060de:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80060e0:	693b      	ldr	r3, [r7, #16]
 80060e2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80060e6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	011b      	lsls	r3, r3, #4
 80060ec:	693a      	ldr	r2, [r7, #16]
 80060ee:	4313      	orrs	r3, r2
 80060f0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80060f2:	697b      	ldr	r3, [r7, #20]
 80060f4:	f023 030a 	bic.w	r3, r3, #10
 80060f8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80060fa:	697a      	ldr	r2, [r7, #20]
 80060fc:	68bb      	ldr	r3, [r7, #8]
 80060fe:	4313      	orrs	r3, r2
 8006100:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	693a      	ldr	r2, [r7, #16]
 8006106:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	697a      	ldr	r2, [r7, #20]
 800610c:	621a      	str	r2, [r3, #32]
}
 800610e:	bf00      	nop
 8006110:	371c      	adds	r7, #28
 8006112:	46bd      	mov	sp, r7
 8006114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006118:	4770      	bx	lr

0800611a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800611a:	b480      	push	{r7}
 800611c:	b087      	sub	sp, #28
 800611e:	af00      	add	r7, sp, #0
 8006120:	60f8      	str	r0, [r7, #12]
 8006122:	60b9      	str	r1, [r7, #8]
 8006124:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	6a1b      	ldr	r3, [r3, #32]
 800612a:	f023 0210 	bic.w	r2, r3, #16
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	699b      	ldr	r3, [r3, #24]
 8006136:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	6a1b      	ldr	r3, [r3, #32]
 800613c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800613e:	697b      	ldr	r3, [r7, #20]
 8006140:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006144:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	031b      	lsls	r3, r3, #12
 800614a:	697a      	ldr	r2, [r7, #20]
 800614c:	4313      	orrs	r3, r2
 800614e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006150:	693b      	ldr	r3, [r7, #16]
 8006152:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006156:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006158:	68bb      	ldr	r3, [r7, #8]
 800615a:	011b      	lsls	r3, r3, #4
 800615c:	693a      	ldr	r2, [r7, #16]
 800615e:	4313      	orrs	r3, r2
 8006160:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	697a      	ldr	r2, [r7, #20]
 8006166:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	693a      	ldr	r2, [r7, #16]
 800616c:	621a      	str	r2, [r3, #32]
}
 800616e:	bf00      	nop
 8006170:	371c      	adds	r7, #28
 8006172:	46bd      	mov	sp, r7
 8006174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006178:	4770      	bx	lr

0800617a <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800617a:	b480      	push	{r7}
 800617c:	b085      	sub	sp, #20
 800617e:	af00      	add	r7, sp, #0
 8006180:	6078      	str	r0, [r7, #4]
 8006182:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	689b      	ldr	r3, [r3, #8]
 8006188:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8006190:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006194:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006196:	683a      	ldr	r2, [r7, #0]
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	4313      	orrs	r3, r2
 800619c:	f043 0307 	orr.w	r3, r3, #7
 80061a0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	68fa      	ldr	r2, [r7, #12]
 80061a6:	609a      	str	r2, [r3, #8]
}
 80061a8:	bf00      	nop
 80061aa:	3714      	adds	r7, #20
 80061ac:	46bd      	mov	sp, r7
 80061ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061b2:	4770      	bx	lr

080061b4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80061b4:	b480      	push	{r7}
 80061b6:	b087      	sub	sp, #28
 80061b8:	af00      	add	r7, sp, #0
 80061ba:	60f8      	str	r0, [r7, #12]
 80061bc:	60b9      	str	r1, [r7, #8]
 80061be:	607a      	str	r2, [r7, #4]
 80061c0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	689b      	ldr	r3, [r3, #8]
 80061c6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80061c8:	697b      	ldr	r3, [r7, #20]
 80061ca:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80061ce:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80061d0:	683b      	ldr	r3, [r7, #0]
 80061d2:	021a      	lsls	r2, r3, #8
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	431a      	orrs	r2, r3
 80061d8:	68bb      	ldr	r3, [r7, #8]
 80061da:	4313      	orrs	r3, r2
 80061dc:	697a      	ldr	r2, [r7, #20]
 80061de:	4313      	orrs	r3, r2
 80061e0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	697a      	ldr	r2, [r7, #20]
 80061e6:	609a      	str	r2, [r3, #8]
}
 80061e8:	bf00      	nop
 80061ea:	371c      	adds	r7, #28
 80061ec:	46bd      	mov	sp, r7
 80061ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061f2:	4770      	bx	lr

080061f4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80061f4:	b480      	push	{r7}
 80061f6:	b085      	sub	sp, #20
 80061f8:	af00      	add	r7, sp, #0
 80061fa:	6078      	str	r0, [r7, #4]
 80061fc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006204:	2b01      	cmp	r3, #1
 8006206:	d101      	bne.n	800620c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006208:	2302      	movs	r3, #2
 800620a:	e074      	b.n	80062f6 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	2201      	movs	r2, #1
 8006210:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	2202      	movs	r2, #2
 8006218:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	685b      	ldr	r3, [r3, #4]
 8006222:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	689b      	ldr	r3, [r3, #8]
 800622a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	4a34      	ldr	r2, [pc, #208]	; (8006304 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8006232:	4293      	cmp	r3, r2
 8006234:	d009      	beq.n	800624a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	4a33      	ldr	r2, [pc, #204]	; (8006308 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800623c:	4293      	cmp	r3, r2
 800623e:	d004      	beq.n	800624a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	4a31      	ldr	r2, [pc, #196]	; (800630c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8006246:	4293      	cmp	r3, r2
 8006248:	d108      	bne.n	800625c <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006250:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006252:	683b      	ldr	r3, [r7, #0]
 8006254:	685b      	ldr	r3, [r3, #4]
 8006256:	68fa      	ldr	r2, [r7, #12]
 8006258:	4313      	orrs	r3, r2
 800625a:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8006262:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006266:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006268:	683b      	ldr	r3, [r7, #0]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	68fa      	ldr	r2, [r7, #12]
 800626e:	4313      	orrs	r3, r2
 8006270:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	68fa      	ldr	r2, [r7, #12]
 8006278:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	4a21      	ldr	r2, [pc, #132]	; (8006304 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8006280:	4293      	cmp	r3, r2
 8006282:	d022      	beq.n	80062ca <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800628c:	d01d      	beq.n	80062ca <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	4a1f      	ldr	r2, [pc, #124]	; (8006310 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8006294:	4293      	cmp	r3, r2
 8006296:	d018      	beq.n	80062ca <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	4a1d      	ldr	r2, [pc, #116]	; (8006314 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800629e:	4293      	cmp	r3, r2
 80062a0:	d013      	beq.n	80062ca <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	4a1c      	ldr	r2, [pc, #112]	; (8006318 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 80062a8:	4293      	cmp	r3, r2
 80062aa:	d00e      	beq.n	80062ca <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	4a15      	ldr	r2, [pc, #84]	; (8006308 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80062b2:	4293      	cmp	r3, r2
 80062b4:	d009      	beq.n	80062ca <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	4a18      	ldr	r2, [pc, #96]	; (800631c <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 80062bc:	4293      	cmp	r3, r2
 80062be:	d004      	beq.n	80062ca <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	4a11      	ldr	r2, [pc, #68]	; (800630c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80062c6:	4293      	cmp	r3, r2
 80062c8:	d10c      	bne.n	80062e4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80062ca:	68bb      	ldr	r3, [r7, #8]
 80062cc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80062d0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80062d2:	683b      	ldr	r3, [r7, #0]
 80062d4:	689b      	ldr	r3, [r3, #8]
 80062d6:	68ba      	ldr	r2, [r7, #8]
 80062d8:	4313      	orrs	r3, r2
 80062da:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	68ba      	ldr	r2, [r7, #8]
 80062e2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	2201      	movs	r2, #1
 80062e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	2200      	movs	r2, #0
 80062f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80062f4:	2300      	movs	r3, #0
}
 80062f6:	4618      	mov	r0, r3
 80062f8:	3714      	adds	r7, #20
 80062fa:	46bd      	mov	sp, r7
 80062fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006300:	4770      	bx	lr
 8006302:	bf00      	nop
 8006304:	40012c00 	.word	0x40012c00
 8006308:	40013400 	.word	0x40013400
 800630c:	40015000 	.word	0x40015000
 8006310:	40000400 	.word	0x40000400
 8006314:	40000800 	.word	0x40000800
 8006318:	40000c00 	.word	0x40000c00
 800631c:	40014000 	.word	0x40014000

08006320 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006320:	b480      	push	{r7}
 8006322:	b083      	sub	sp, #12
 8006324:	af00      	add	r7, sp, #0
 8006326:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006328:	bf00      	nop
 800632a:	370c      	adds	r7, #12
 800632c:	46bd      	mov	sp, r7
 800632e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006332:	4770      	bx	lr

08006334 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006334:	b480      	push	{r7}
 8006336:	b083      	sub	sp, #12
 8006338:	af00      	add	r7, sp, #0
 800633a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800633c:	bf00      	nop
 800633e:	370c      	adds	r7, #12
 8006340:	46bd      	mov	sp, r7
 8006342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006346:	4770      	bx	lr

08006348 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006348:	b480      	push	{r7}
 800634a:	b083      	sub	sp, #12
 800634c:	af00      	add	r7, sp, #0
 800634e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006350:	bf00      	nop
 8006352:	370c      	adds	r7, #12
 8006354:	46bd      	mov	sp, r7
 8006356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800635a:	4770      	bx	lr

0800635c <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800635c:	b480      	push	{r7}
 800635e:	b083      	sub	sp, #12
 8006360:	af00      	add	r7, sp, #0
 8006362:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8006364:	bf00      	nop
 8006366:	370c      	adds	r7, #12
 8006368:	46bd      	mov	sp, r7
 800636a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800636e:	4770      	bx	lr

08006370 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8006370:	b480      	push	{r7}
 8006372:	b083      	sub	sp, #12
 8006374:	af00      	add	r7, sp, #0
 8006376:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8006378:	bf00      	nop
 800637a:	370c      	adds	r7, #12
 800637c:	46bd      	mov	sp, r7
 800637e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006382:	4770      	bx	lr

08006384 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8006384:	b480      	push	{r7}
 8006386:	b083      	sub	sp, #12
 8006388:	af00      	add	r7, sp, #0
 800638a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800638c:	bf00      	nop
 800638e:	370c      	adds	r7, #12
 8006390:	46bd      	mov	sp, r7
 8006392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006396:	4770      	bx	lr

08006398 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8006398:	b480      	push	{r7}
 800639a:	b083      	sub	sp, #12
 800639c:	af00      	add	r7, sp, #0
 800639e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 80063a0:	bf00      	nop
 80063a2:	370c      	adds	r7, #12
 80063a4:	46bd      	mov	sp, r7
 80063a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063aa:	4770      	bx	lr

080063ac <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80063ac:	b580      	push	{r7, lr}
 80063ae:	b082      	sub	sp, #8
 80063b0:	af00      	add	r7, sp, #0
 80063b2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d101      	bne.n	80063be <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80063ba:	2301      	movs	r3, #1
 80063bc:	e042      	b.n	8006444 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d106      	bne.n	80063d6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	2200      	movs	r2, #0
 80063cc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80063d0:	6878      	ldr	r0, [r7, #4]
 80063d2:	f7fb f8cd 	bl	8001570 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	2224      	movs	r2, #36	; 0x24
 80063da:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	681a      	ldr	r2, [r3, #0]
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	f022 0201 	bic.w	r2, r2, #1
 80063ec:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80063ee:	6878      	ldr	r0, [r7, #4]
 80063f0:	f000 fac6 	bl	8006980 <UART_SetConfig>
 80063f4:	4603      	mov	r3, r0
 80063f6:	2b01      	cmp	r3, #1
 80063f8:	d101      	bne.n	80063fe <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80063fa:	2301      	movs	r3, #1
 80063fc:	e022      	b.n	8006444 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006402:	2b00      	cmp	r3, #0
 8006404:	d002      	beq.n	800640c <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8006406:	6878      	ldr	r0, [r7, #4]
 8006408:	f000 fd84 	bl	8006f14 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	685a      	ldr	r2, [r3, #4]
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800641a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	689a      	ldr	r2, [r3, #8]
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800642a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	681a      	ldr	r2, [r3, #0]
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	f042 0201 	orr.w	r2, r2, #1
 800643a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800643c:	6878      	ldr	r0, [r7, #4]
 800643e:	f000 fe0b 	bl	8007058 <UART_CheckIdleState>
 8006442:	4603      	mov	r3, r0
}
 8006444:	4618      	mov	r0, r3
 8006446:	3708      	adds	r7, #8
 8006448:	46bd      	mov	sp, r7
 800644a:	bd80      	pop	{r7, pc}

0800644c <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800644c:	b580      	push	{r7, lr}
 800644e:	b084      	sub	sp, #16
 8006450:	af00      	add	r7, sp, #0
 8006452:	60f8      	str	r0, [r7, #12]
 8006454:	60b9      	str	r1, [r7, #8]
 8006456:	4613      	mov	r3, r2
 8006458:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006460:	2b20      	cmp	r3, #32
 8006462:	d131      	bne.n	80064c8 <HAL_UART_Receive_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8006464:	68bb      	ldr	r3, [r7, #8]
 8006466:	2b00      	cmp	r3, #0
 8006468:	d002      	beq.n	8006470 <HAL_UART_Receive_IT+0x24>
 800646a:	88fb      	ldrh	r3, [r7, #6]
 800646c:	2b00      	cmp	r3, #0
 800646e:	d101      	bne.n	8006474 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8006470:	2301      	movs	r3, #1
 8006472:	e02a      	b.n	80064ca <HAL_UART_Receive_IT+0x7e>
    }

    __HAL_LOCK(huart);
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800647a:	2b01      	cmp	r3, #1
 800647c:	d101      	bne.n	8006482 <HAL_UART_Receive_IT+0x36>
 800647e:	2302      	movs	r3, #2
 8006480:	e023      	b.n	80064ca <HAL_UART_Receive_IT+0x7e>
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	2201      	movs	r2, #1
 8006486:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	2200      	movs	r2, #0
 800648e:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	4a0f      	ldr	r2, [pc, #60]	; (80064d4 <HAL_UART_Receive_IT+0x88>)
 8006496:	4293      	cmp	r3, r2
 8006498:	d00e      	beq.n	80064b8 <HAL_UART_Receive_IT+0x6c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	685b      	ldr	r3, [r3, #4]
 80064a0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d007      	beq.n	80064b8 <HAL_UART_Receive_IT+0x6c>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	681a      	ldr	r2, [r3, #0]
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80064b6:	601a      	str	r2, [r3, #0]
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80064b8:	88fb      	ldrh	r3, [r7, #6]
 80064ba:	461a      	mov	r2, r3
 80064bc:	68b9      	ldr	r1, [r7, #8]
 80064be:	68f8      	ldr	r0, [r7, #12]
 80064c0:	f000 fe96 	bl	80071f0 <UART_Start_Receive_IT>
 80064c4:	4603      	mov	r3, r0
 80064c6:	e000      	b.n	80064ca <HAL_UART_Receive_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 80064c8:	2302      	movs	r3, #2
  }
}
 80064ca:	4618      	mov	r0, r3
 80064cc:	3710      	adds	r7, #16
 80064ce:	46bd      	mov	sp, r7
 80064d0:	bd80      	pop	{r7, pc}
 80064d2:	bf00      	nop
 80064d4:	40008000 	.word	0x40008000

080064d8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80064d8:	b580      	push	{r7, lr}
 80064da:	b088      	sub	sp, #32
 80064dc:	af00      	add	r7, sp, #0
 80064de:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	69db      	ldr	r3, [r3, #28]
 80064e6:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	689b      	ldr	r3, [r3, #8]
 80064f6:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80064f8:	69fa      	ldr	r2, [r7, #28]
 80064fa:	f640 030f 	movw	r3, #2063	; 0x80f
 80064fe:	4013      	ands	r3, r2
 8006500:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8006502:	693b      	ldr	r3, [r7, #16]
 8006504:	2b00      	cmp	r3, #0
 8006506:	d118      	bne.n	800653a <HAL_UART_IRQHandler+0x62>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8006508:	69fb      	ldr	r3, [r7, #28]
 800650a:	f003 0320 	and.w	r3, r3, #32
 800650e:	2b00      	cmp	r3, #0
 8006510:	d013      	beq.n	800653a <HAL_UART_IRQHandler+0x62>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8006512:	69bb      	ldr	r3, [r7, #24]
 8006514:	f003 0320 	and.w	r3, r3, #32
 8006518:	2b00      	cmp	r3, #0
 800651a:	d104      	bne.n	8006526 <HAL_UART_IRQHandler+0x4e>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800651c:	697b      	ldr	r3, [r7, #20]
 800651e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006522:	2b00      	cmp	r3, #0
 8006524:	d009      	beq.n	800653a <HAL_UART_IRQHandler+0x62>
    {
      if (huart->RxISR != NULL)
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800652a:	2b00      	cmp	r3, #0
 800652c:	f000 81fb 	beq.w	8006926 <HAL_UART_IRQHandler+0x44e>
      {
        huart->RxISR(huart);
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006534:	6878      	ldr	r0, [r7, #4]
 8006536:	4798      	blx	r3
      }
      return;
 8006538:	e1f5      	b.n	8006926 <HAL_UART_IRQHandler+0x44e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800653a:	693b      	ldr	r3, [r7, #16]
 800653c:	2b00      	cmp	r3, #0
 800653e:	f000 80ef 	beq.w	8006720 <HAL_UART_IRQHandler+0x248>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8006542:	697a      	ldr	r2, [r7, #20]
 8006544:	4b73      	ldr	r3, [pc, #460]	; (8006714 <HAL_UART_IRQHandler+0x23c>)
 8006546:	4013      	ands	r3, r2
 8006548:	2b00      	cmp	r3, #0
 800654a:	d105      	bne.n	8006558 <HAL_UART_IRQHandler+0x80>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800654c:	69ba      	ldr	r2, [r7, #24]
 800654e:	4b72      	ldr	r3, [pc, #456]	; (8006718 <HAL_UART_IRQHandler+0x240>)
 8006550:	4013      	ands	r3, r2
 8006552:	2b00      	cmp	r3, #0
 8006554:	f000 80e4 	beq.w	8006720 <HAL_UART_IRQHandler+0x248>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006558:	69fb      	ldr	r3, [r7, #28]
 800655a:	f003 0301 	and.w	r3, r3, #1
 800655e:	2b00      	cmp	r3, #0
 8006560:	d010      	beq.n	8006584 <HAL_UART_IRQHandler+0xac>
 8006562:	69bb      	ldr	r3, [r7, #24]
 8006564:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006568:	2b00      	cmp	r3, #0
 800656a:	d00b      	beq.n	8006584 <HAL_UART_IRQHandler+0xac>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	2201      	movs	r2, #1
 8006572:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800657a:	f043 0201 	orr.w	r2, r3, #1
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006584:	69fb      	ldr	r3, [r7, #28]
 8006586:	f003 0302 	and.w	r3, r3, #2
 800658a:	2b00      	cmp	r3, #0
 800658c:	d010      	beq.n	80065b0 <HAL_UART_IRQHandler+0xd8>
 800658e:	697b      	ldr	r3, [r7, #20]
 8006590:	f003 0301 	and.w	r3, r3, #1
 8006594:	2b00      	cmp	r3, #0
 8006596:	d00b      	beq.n	80065b0 <HAL_UART_IRQHandler+0xd8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	2202      	movs	r2, #2
 800659e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80065a6:	f043 0204 	orr.w	r2, r3, #4
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80065b0:	69fb      	ldr	r3, [r7, #28]
 80065b2:	f003 0304 	and.w	r3, r3, #4
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d010      	beq.n	80065dc <HAL_UART_IRQHandler+0x104>
 80065ba:	697b      	ldr	r3, [r7, #20]
 80065bc:	f003 0301 	and.w	r3, r3, #1
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d00b      	beq.n	80065dc <HAL_UART_IRQHandler+0x104>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	2204      	movs	r2, #4
 80065ca:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80065d2:	f043 0202 	orr.w	r2, r3, #2
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80065dc:	69fb      	ldr	r3, [r7, #28]
 80065de:	f003 0308 	and.w	r3, r3, #8
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d015      	beq.n	8006612 <HAL_UART_IRQHandler+0x13a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80065e6:	69bb      	ldr	r3, [r7, #24]
 80065e8:	f003 0320 	and.w	r3, r3, #32
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d104      	bne.n	80065fa <HAL_UART_IRQHandler+0x122>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80065f0:	697a      	ldr	r2, [r7, #20]
 80065f2:	4b48      	ldr	r3, [pc, #288]	; (8006714 <HAL_UART_IRQHandler+0x23c>)
 80065f4:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d00b      	beq.n	8006612 <HAL_UART_IRQHandler+0x13a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	2208      	movs	r2, #8
 8006600:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006608:	f043 0208 	orr.w	r2, r3, #8
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006612:	69fb      	ldr	r3, [r7, #28]
 8006614:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006618:	2b00      	cmp	r3, #0
 800661a:	d011      	beq.n	8006640 <HAL_UART_IRQHandler+0x168>
 800661c:	69bb      	ldr	r3, [r7, #24]
 800661e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006622:	2b00      	cmp	r3, #0
 8006624:	d00c      	beq.n	8006640 <HAL_UART_IRQHandler+0x168>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800662e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006636:	f043 0220 	orr.w	r2, r3, #32
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006646:	2b00      	cmp	r3, #0
 8006648:	f000 816f 	beq.w	800692a <HAL_UART_IRQHandler+0x452>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800664c:	69fb      	ldr	r3, [r7, #28]
 800664e:	f003 0320 	and.w	r3, r3, #32
 8006652:	2b00      	cmp	r3, #0
 8006654:	d011      	beq.n	800667a <HAL_UART_IRQHandler+0x1a2>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8006656:	69bb      	ldr	r3, [r7, #24]
 8006658:	f003 0320 	and.w	r3, r3, #32
 800665c:	2b00      	cmp	r3, #0
 800665e:	d104      	bne.n	800666a <HAL_UART_IRQHandler+0x192>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006660:	697b      	ldr	r3, [r7, #20]
 8006662:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006666:	2b00      	cmp	r3, #0
 8006668:	d007      	beq.n	800667a <HAL_UART_IRQHandler+0x1a2>
      {
        if (huart->RxISR != NULL)
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800666e:	2b00      	cmp	r3, #0
 8006670:	d003      	beq.n	800667a <HAL_UART_IRQHandler+0x1a2>
        {
          huart->RxISR(huart);
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006676:	6878      	ldr	r0, [r7, #4]
 8006678:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006680:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	689b      	ldr	r3, [r3, #8]
 8006688:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800668c:	2b40      	cmp	r3, #64	; 0x40
 800668e:	d004      	beq.n	800669a <HAL_UART_IRQHandler+0x1c2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006696:	2b00      	cmp	r3, #0
 8006698:	d031      	beq.n	80066fe <HAL_UART_IRQHandler+0x226>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800669a:	6878      	ldr	r0, [r7, #4]
 800669c:	f000 fe66 	bl	800736c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	689b      	ldr	r3, [r3, #8]
 80066a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80066aa:	2b40      	cmp	r3, #64	; 0x40
 80066ac:	d123      	bne.n	80066f6 <HAL_UART_IRQHandler+0x21e>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	689a      	ldr	r2, [r3, #8]
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80066bc:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d013      	beq.n	80066ee <HAL_UART_IRQHandler+0x216>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80066ca:	4a14      	ldr	r2, [pc, #80]	; (800671c <HAL_UART_IRQHandler+0x244>)
 80066cc:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80066d2:	4618      	mov	r0, r3
 80066d4:	f7fd fd46 	bl	8004164 <HAL_DMA_Abort_IT>
 80066d8:	4603      	mov	r3, r0
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d017      	beq.n	800670e <HAL_UART_IRQHandler+0x236>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80066e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066e4:	687a      	ldr	r2, [r7, #4]
 80066e6:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 80066e8:	4610      	mov	r0, r2
 80066ea:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80066ec:	e00f      	b.n	800670e <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80066ee:	6878      	ldr	r0, [r7, #4]
 80066f0:	f000 f930 	bl	8006954 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80066f4:	e00b      	b.n	800670e <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80066f6:	6878      	ldr	r0, [r7, #4]
 80066f8:	f000 f92c 	bl	8006954 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80066fc:	e007      	b.n	800670e <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80066fe:	6878      	ldr	r0, [r7, #4]
 8006700:	f000 f928 	bl	8006954 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	2200      	movs	r2, #0
 8006708:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 800670c:	e10d      	b.n	800692a <HAL_UART_IRQHandler+0x452>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800670e:	bf00      	nop
    return;
 8006710:	e10b      	b.n	800692a <HAL_UART_IRQHandler+0x452>
 8006712:	bf00      	nop
 8006714:	10000001 	.word	0x10000001
 8006718:	04000120 	.word	0x04000120
 800671c:	080073d1 	.word	0x080073d1

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006724:	2b01      	cmp	r3, #1
 8006726:	f040 80ab 	bne.w	8006880 <HAL_UART_IRQHandler+0x3a8>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800672a:	69fb      	ldr	r3, [r7, #28]
 800672c:	f003 0310 	and.w	r3, r3, #16
 8006730:	2b00      	cmp	r3, #0
 8006732:	f000 80a5 	beq.w	8006880 <HAL_UART_IRQHandler+0x3a8>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8006736:	69bb      	ldr	r3, [r7, #24]
 8006738:	f003 0310 	and.w	r3, r3, #16
 800673c:	2b00      	cmp	r3, #0
 800673e:	f000 809f 	beq.w	8006880 <HAL_UART_IRQHandler+0x3a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	2210      	movs	r2, #16
 8006748:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	689b      	ldr	r3, [r3, #8]
 8006750:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006754:	2b40      	cmp	r3, #64	; 0x40
 8006756:	d155      	bne.n	8006804 <HAL_UART_IRQHandler+0x32c>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	685b      	ldr	r3, [r3, #4]
 8006760:	813b      	strh	r3, [r7, #8]
      if ((nb_remaining_rx_data > 0U)
 8006762:	893b      	ldrh	r3, [r7, #8]
 8006764:	2b00      	cmp	r3, #0
 8006766:	f000 80e2 	beq.w	800692e <HAL_UART_IRQHandler+0x456>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006770:	893a      	ldrh	r2, [r7, #8]
 8006772:	429a      	cmp	r2, r3
 8006774:	f080 80db 	bcs.w	800692e <HAL_UART_IRQHandler+0x456>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	893a      	ldrh	r2, [r7, #8]
 800677c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	f003 0320 	and.w	r3, r3, #32
 800678c:	2b00      	cmp	r3, #0
 800678e:	d12b      	bne.n	80067e8 <HAL_UART_IRQHandler+0x310>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	681a      	ldr	r2, [r3, #0]
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800679e:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	689a      	ldr	r2, [r3, #8]
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	f022 0201 	bic.w	r2, r2, #1
 80067ae:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	689a      	ldr	r2, [r3, #8]
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80067be:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	2220      	movs	r2, #32
 80067c4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	2200      	movs	r2, #0
 80067cc:	66da      	str	r2, [r3, #108]	; 0x6c

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	681a      	ldr	r2, [r3, #0]
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	f022 0210 	bic.w	r2, r2, #16
 80067dc:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80067e2:	4618      	mov	r0, r3
 80067e4:	f7fd fc65 	bl	80040b2 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80067f4:	b29b      	uxth	r3, r3
 80067f6:	1ad3      	subs	r3, r2, r3
 80067f8:	b29b      	uxth	r3, r3
 80067fa:	4619      	mov	r1, r3
 80067fc:	6878      	ldr	r0, [r7, #4]
 80067fe:	f000 f8b3 	bl	8006968 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006802:	e094      	b.n	800692e <HAL_UART_IRQHandler+0x456>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006810:	b29b      	uxth	r3, r3
 8006812:	1ad3      	subs	r3, r2, r3
 8006814:	817b      	strh	r3, [r7, #10]
      if ((huart->RxXferCount > 0U)
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800681c:	b29b      	uxth	r3, r3
 800681e:	2b00      	cmp	r3, #0
 8006820:	f000 8087 	beq.w	8006932 <HAL_UART_IRQHandler+0x45a>
          && (nb_rx_data > 0U))
 8006824:	897b      	ldrh	r3, [r7, #10]
 8006826:	2b00      	cmp	r3, #0
 8006828:	f000 8083 	beq.w	8006932 <HAL_UART_IRQHandler+0x45a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	681a      	ldr	r2, [r3, #0]
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800683a:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	689b      	ldr	r3, [r3, #8]
 8006842:	687a      	ldr	r2, [r7, #4]
 8006844:	6812      	ldr	r2, [r2, #0]
 8006846:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800684a:	f023 0301 	bic.w	r3, r3, #1
 800684e:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	2220      	movs	r2, #32
 8006854:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	2200      	movs	r2, #0
 800685c:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	2200      	movs	r2, #0
 8006862:	671a      	str	r2, [r3, #112]	; 0x70

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	681a      	ldr	r2, [r3, #0]
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	f022 0210 	bic.w	r2, r2, #16
 8006872:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006874:	897b      	ldrh	r3, [r7, #10]
 8006876:	4619      	mov	r1, r3
 8006878:	6878      	ldr	r0, [r7, #4]
 800687a:	f000 f875 	bl	8006968 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800687e:	e058      	b.n	8006932 <HAL_UART_IRQHandler+0x45a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8006880:	69fb      	ldr	r3, [r7, #28]
 8006882:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006886:	2b00      	cmp	r3, #0
 8006888:	d00d      	beq.n	80068a6 <HAL_UART_IRQHandler+0x3ce>
 800688a:	697b      	ldr	r3, [r7, #20]
 800688c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006890:	2b00      	cmp	r3, #0
 8006892:	d008      	beq.n	80068a6 <HAL_UART_IRQHandler+0x3ce>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800689c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800689e:	6878      	ldr	r0, [r7, #4]
 80068a0:	f001 f8a2 	bl	80079e8 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80068a4:	e048      	b.n	8006938 <HAL_UART_IRQHandler+0x460>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80068a6:	69fb      	ldr	r3, [r7, #28]
 80068a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d012      	beq.n	80068d6 <HAL_UART_IRQHandler+0x3fe>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80068b0:	69bb      	ldr	r3, [r7, #24]
 80068b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d104      	bne.n	80068c4 <HAL_UART_IRQHandler+0x3ec>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80068ba:	697b      	ldr	r3, [r7, #20]
 80068bc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	d008      	beq.n	80068d6 <HAL_UART_IRQHandler+0x3fe>
  {
    if (huart->TxISR != NULL)
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d034      	beq.n	8006936 <HAL_UART_IRQHandler+0x45e>
    {
      huart->TxISR(huart);
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80068d0:	6878      	ldr	r0, [r7, #4]
 80068d2:	4798      	blx	r3
    }
    return;
 80068d4:	e02f      	b.n	8006936 <HAL_UART_IRQHandler+0x45e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80068d6:	69fb      	ldr	r3, [r7, #28]
 80068d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d008      	beq.n	80068f2 <HAL_UART_IRQHandler+0x41a>
 80068e0:	69bb      	ldr	r3, [r7, #24]
 80068e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d003      	beq.n	80068f2 <HAL_UART_IRQHandler+0x41a>
  {
    UART_EndTransmit_IT(huart);
 80068ea:	6878      	ldr	r0, [r7, #4]
 80068ec:	f000 fd86 	bl	80073fc <UART_EndTransmit_IT>
    return;
 80068f0:	e022      	b.n	8006938 <HAL_UART_IRQHandler+0x460>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80068f2:	69fb      	ldr	r3, [r7, #28]
 80068f4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	d008      	beq.n	800690e <HAL_UART_IRQHandler+0x436>
 80068fc:	69bb      	ldr	r3, [r7, #24]
 80068fe:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006902:	2b00      	cmp	r3, #0
 8006904:	d003      	beq.n	800690e <HAL_UART_IRQHandler+0x436>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8006906:	6878      	ldr	r0, [r7, #4]
 8006908:	f001 f882 	bl	8007a10 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800690c:	e014      	b.n	8006938 <HAL_UART_IRQHandler+0x460>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800690e:	69fb      	ldr	r3, [r7, #28]
 8006910:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006914:	2b00      	cmp	r3, #0
 8006916:	d00f      	beq.n	8006938 <HAL_UART_IRQHandler+0x460>
 8006918:	69bb      	ldr	r3, [r7, #24]
 800691a:	2b00      	cmp	r3, #0
 800691c:	da0c      	bge.n	8006938 <HAL_UART_IRQHandler+0x460>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800691e:	6878      	ldr	r0, [r7, #4]
 8006920:	f001 f86c 	bl	80079fc <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006924:	e008      	b.n	8006938 <HAL_UART_IRQHandler+0x460>
      return;
 8006926:	bf00      	nop
 8006928:	e006      	b.n	8006938 <HAL_UART_IRQHandler+0x460>
    return;
 800692a:	bf00      	nop
 800692c:	e004      	b.n	8006938 <HAL_UART_IRQHandler+0x460>
      return;
 800692e:	bf00      	nop
 8006930:	e002      	b.n	8006938 <HAL_UART_IRQHandler+0x460>
      return;
 8006932:	bf00      	nop
 8006934:	e000      	b.n	8006938 <HAL_UART_IRQHandler+0x460>
    return;
 8006936:	bf00      	nop
  }
}
 8006938:	3720      	adds	r7, #32
 800693a:	46bd      	mov	sp, r7
 800693c:	bd80      	pop	{r7, pc}
 800693e:	bf00      	nop

08006940 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006940:	b480      	push	{r7}
 8006942:	b083      	sub	sp, #12
 8006944:	af00      	add	r7, sp, #0
 8006946:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8006948:	bf00      	nop
 800694a:	370c      	adds	r7, #12
 800694c:	46bd      	mov	sp, r7
 800694e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006952:	4770      	bx	lr

08006954 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006954:	b480      	push	{r7}
 8006956:	b083      	sub	sp, #12
 8006958:	af00      	add	r7, sp, #0
 800695a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800695c:	bf00      	nop
 800695e:	370c      	adds	r7, #12
 8006960:	46bd      	mov	sp, r7
 8006962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006966:	4770      	bx	lr

08006968 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006968:	b480      	push	{r7}
 800696a:	b083      	sub	sp, #12
 800696c:	af00      	add	r7, sp, #0
 800696e:	6078      	str	r0, [r7, #4]
 8006970:	460b      	mov	r3, r1
 8006972:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006974:	bf00      	nop
 8006976:	370c      	adds	r7, #12
 8006978:	46bd      	mov	sp, r7
 800697a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800697e:	4770      	bx	lr

08006980 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006980:	b5b0      	push	{r4, r5, r7, lr}
 8006982:	b088      	sub	sp, #32
 8006984:	af00      	add	r7, sp, #0
 8006986:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006988:	2300      	movs	r3, #0
 800698a:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	689a      	ldr	r2, [r3, #8]
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	691b      	ldr	r3, [r3, #16]
 8006994:	431a      	orrs	r2, r3
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	695b      	ldr	r3, [r3, #20]
 800699a:	431a      	orrs	r2, r3
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	69db      	ldr	r3, [r3, #28]
 80069a0:	4313      	orrs	r3, r2
 80069a2:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	681a      	ldr	r2, [r3, #0]
 80069aa:	4bb1      	ldr	r3, [pc, #708]	; (8006c70 <UART_SetConfig+0x2f0>)
 80069ac:	4013      	ands	r3, r2
 80069ae:	687a      	ldr	r2, [r7, #4]
 80069b0:	6812      	ldr	r2, [r2, #0]
 80069b2:	69f9      	ldr	r1, [r7, #28]
 80069b4:	430b      	orrs	r3, r1
 80069b6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	685b      	ldr	r3, [r3, #4]
 80069be:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	68da      	ldr	r2, [r3, #12]
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	430a      	orrs	r2, r1
 80069cc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	699b      	ldr	r3, [r3, #24]
 80069d2:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	4aa6      	ldr	r2, [pc, #664]	; (8006c74 <UART_SetConfig+0x2f4>)
 80069da:	4293      	cmp	r3, r2
 80069dc:	d004      	beq.n	80069e8 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	6a1b      	ldr	r3, [r3, #32]
 80069e2:	69fa      	ldr	r2, [r7, #28]
 80069e4:	4313      	orrs	r3, r2
 80069e6:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	689b      	ldr	r3, [r3, #8]
 80069ee:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 80069f2:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 80069f6:	687a      	ldr	r2, [r7, #4]
 80069f8:	6812      	ldr	r2, [r2, #0]
 80069fa:	69f9      	ldr	r1, [r7, #28]
 80069fc:	430b      	orrs	r3, r1
 80069fe:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a06:	f023 010f 	bic.w	r1, r3, #15
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	430a      	orrs	r2, r1
 8006a14:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	4a97      	ldr	r2, [pc, #604]	; (8006c78 <UART_SetConfig+0x2f8>)
 8006a1c:	4293      	cmp	r3, r2
 8006a1e:	d120      	bne.n	8006a62 <UART_SetConfig+0xe2>
 8006a20:	4b96      	ldr	r3, [pc, #600]	; (8006c7c <UART_SetConfig+0x2fc>)
 8006a22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006a26:	f003 0303 	and.w	r3, r3, #3
 8006a2a:	2b03      	cmp	r3, #3
 8006a2c:	d816      	bhi.n	8006a5c <UART_SetConfig+0xdc>
 8006a2e:	a201      	add	r2, pc, #4	; (adr r2, 8006a34 <UART_SetConfig+0xb4>)
 8006a30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a34:	08006a45 	.word	0x08006a45
 8006a38:	08006a51 	.word	0x08006a51
 8006a3c:	08006a4b 	.word	0x08006a4b
 8006a40:	08006a57 	.word	0x08006a57
 8006a44:	2301      	movs	r3, #1
 8006a46:	76fb      	strb	r3, [r7, #27]
 8006a48:	e0e7      	b.n	8006c1a <UART_SetConfig+0x29a>
 8006a4a:	2302      	movs	r3, #2
 8006a4c:	76fb      	strb	r3, [r7, #27]
 8006a4e:	e0e4      	b.n	8006c1a <UART_SetConfig+0x29a>
 8006a50:	2304      	movs	r3, #4
 8006a52:	76fb      	strb	r3, [r7, #27]
 8006a54:	e0e1      	b.n	8006c1a <UART_SetConfig+0x29a>
 8006a56:	2308      	movs	r3, #8
 8006a58:	76fb      	strb	r3, [r7, #27]
 8006a5a:	e0de      	b.n	8006c1a <UART_SetConfig+0x29a>
 8006a5c:	2310      	movs	r3, #16
 8006a5e:	76fb      	strb	r3, [r7, #27]
 8006a60:	e0db      	b.n	8006c1a <UART_SetConfig+0x29a>
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	4a86      	ldr	r2, [pc, #536]	; (8006c80 <UART_SetConfig+0x300>)
 8006a68:	4293      	cmp	r3, r2
 8006a6a:	d132      	bne.n	8006ad2 <UART_SetConfig+0x152>
 8006a6c:	4b83      	ldr	r3, [pc, #524]	; (8006c7c <UART_SetConfig+0x2fc>)
 8006a6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006a72:	f003 030c 	and.w	r3, r3, #12
 8006a76:	2b0c      	cmp	r3, #12
 8006a78:	d828      	bhi.n	8006acc <UART_SetConfig+0x14c>
 8006a7a:	a201      	add	r2, pc, #4	; (adr r2, 8006a80 <UART_SetConfig+0x100>)
 8006a7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a80:	08006ab5 	.word	0x08006ab5
 8006a84:	08006acd 	.word	0x08006acd
 8006a88:	08006acd 	.word	0x08006acd
 8006a8c:	08006acd 	.word	0x08006acd
 8006a90:	08006ac1 	.word	0x08006ac1
 8006a94:	08006acd 	.word	0x08006acd
 8006a98:	08006acd 	.word	0x08006acd
 8006a9c:	08006acd 	.word	0x08006acd
 8006aa0:	08006abb 	.word	0x08006abb
 8006aa4:	08006acd 	.word	0x08006acd
 8006aa8:	08006acd 	.word	0x08006acd
 8006aac:	08006acd 	.word	0x08006acd
 8006ab0:	08006ac7 	.word	0x08006ac7
 8006ab4:	2300      	movs	r3, #0
 8006ab6:	76fb      	strb	r3, [r7, #27]
 8006ab8:	e0af      	b.n	8006c1a <UART_SetConfig+0x29a>
 8006aba:	2302      	movs	r3, #2
 8006abc:	76fb      	strb	r3, [r7, #27]
 8006abe:	e0ac      	b.n	8006c1a <UART_SetConfig+0x29a>
 8006ac0:	2304      	movs	r3, #4
 8006ac2:	76fb      	strb	r3, [r7, #27]
 8006ac4:	e0a9      	b.n	8006c1a <UART_SetConfig+0x29a>
 8006ac6:	2308      	movs	r3, #8
 8006ac8:	76fb      	strb	r3, [r7, #27]
 8006aca:	e0a6      	b.n	8006c1a <UART_SetConfig+0x29a>
 8006acc:	2310      	movs	r3, #16
 8006ace:	76fb      	strb	r3, [r7, #27]
 8006ad0:	e0a3      	b.n	8006c1a <UART_SetConfig+0x29a>
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	4a6b      	ldr	r2, [pc, #428]	; (8006c84 <UART_SetConfig+0x304>)
 8006ad8:	4293      	cmp	r3, r2
 8006ada:	d120      	bne.n	8006b1e <UART_SetConfig+0x19e>
 8006adc:	4b67      	ldr	r3, [pc, #412]	; (8006c7c <UART_SetConfig+0x2fc>)
 8006ade:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006ae2:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006ae6:	2b30      	cmp	r3, #48	; 0x30
 8006ae8:	d013      	beq.n	8006b12 <UART_SetConfig+0x192>
 8006aea:	2b30      	cmp	r3, #48	; 0x30
 8006aec:	d814      	bhi.n	8006b18 <UART_SetConfig+0x198>
 8006aee:	2b20      	cmp	r3, #32
 8006af0:	d009      	beq.n	8006b06 <UART_SetConfig+0x186>
 8006af2:	2b20      	cmp	r3, #32
 8006af4:	d810      	bhi.n	8006b18 <UART_SetConfig+0x198>
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d002      	beq.n	8006b00 <UART_SetConfig+0x180>
 8006afa:	2b10      	cmp	r3, #16
 8006afc:	d006      	beq.n	8006b0c <UART_SetConfig+0x18c>
 8006afe:	e00b      	b.n	8006b18 <UART_SetConfig+0x198>
 8006b00:	2300      	movs	r3, #0
 8006b02:	76fb      	strb	r3, [r7, #27]
 8006b04:	e089      	b.n	8006c1a <UART_SetConfig+0x29a>
 8006b06:	2302      	movs	r3, #2
 8006b08:	76fb      	strb	r3, [r7, #27]
 8006b0a:	e086      	b.n	8006c1a <UART_SetConfig+0x29a>
 8006b0c:	2304      	movs	r3, #4
 8006b0e:	76fb      	strb	r3, [r7, #27]
 8006b10:	e083      	b.n	8006c1a <UART_SetConfig+0x29a>
 8006b12:	2308      	movs	r3, #8
 8006b14:	76fb      	strb	r3, [r7, #27]
 8006b16:	e080      	b.n	8006c1a <UART_SetConfig+0x29a>
 8006b18:	2310      	movs	r3, #16
 8006b1a:	76fb      	strb	r3, [r7, #27]
 8006b1c:	e07d      	b.n	8006c1a <UART_SetConfig+0x29a>
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	4a59      	ldr	r2, [pc, #356]	; (8006c88 <UART_SetConfig+0x308>)
 8006b24:	4293      	cmp	r3, r2
 8006b26:	d120      	bne.n	8006b6a <UART_SetConfig+0x1ea>
 8006b28:	4b54      	ldr	r3, [pc, #336]	; (8006c7c <UART_SetConfig+0x2fc>)
 8006b2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006b2e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006b32:	2bc0      	cmp	r3, #192	; 0xc0
 8006b34:	d013      	beq.n	8006b5e <UART_SetConfig+0x1de>
 8006b36:	2bc0      	cmp	r3, #192	; 0xc0
 8006b38:	d814      	bhi.n	8006b64 <UART_SetConfig+0x1e4>
 8006b3a:	2b80      	cmp	r3, #128	; 0x80
 8006b3c:	d009      	beq.n	8006b52 <UART_SetConfig+0x1d2>
 8006b3e:	2b80      	cmp	r3, #128	; 0x80
 8006b40:	d810      	bhi.n	8006b64 <UART_SetConfig+0x1e4>
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d002      	beq.n	8006b4c <UART_SetConfig+0x1cc>
 8006b46:	2b40      	cmp	r3, #64	; 0x40
 8006b48:	d006      	beq.n	8006b58 <UART_SetConfig+0x1d8>
 8006b4a:	e00b      	b.n	8006b64 <UART_SetConfig+0x1e4>
 8006b4c:	2300      	movs	r3, #0
 8006b4e:	76fb      	strb	r3, [r7, #27]
 8006b50:	e063      	b.n	8006c1a <UART_SetConfig+0x29a>
 8006b52:	2302      	movs	r3, #2
 8006b54:	76fb      	strb	r3, [r7, #27]
 8006b56:	e060      	b.n	8006c1a <UART_SetConfig+0x29a>
 8006b58:	2304      	movs	r3, #4
 8006b5a:	76fb      	strb	r3, [r7, #27]
 8006b5c:	e05d      	b.n	8006c1a <UART_SetConfig+0x29a>
 8006b5e:	2308      	movs	r3, #8
 8006b60:	76fb      	strb	r3, [r7, #27]
 8006b62:	e05a      	b.n	8006c1a <UART_SetConfig+0x29a>
 8006b64:	2310      	movs	r3, #16
 8006b66:	76fb      	strb	r3, [r7, #27]
 8006b68:	e057      	b.n	8006c1a <UART_SetConfig+0x29a>
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	4a47      	ldr	r2, [pc, #284]	; (8006c8c <UART_SetConfig+0x30c>)
 8006b70:	4293      	cmp	r3, r2
 8006b72:	d125      	bne.n	8006bc0 <UART_SetConfig+0x240>
 8006b74:	4b41      	ldr	r3, [pc, #260]	; (8006c7c <UART_SetConfig+0x2fc>)
 8006b76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006b7a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006b7e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006b82:	d017      	beq.n	8006bb4 <UART_SetConfig+0x234>
 8006b84:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006b88:	d817      	bhi.n	8006bba <UART_SetConfig+0x23a>
 8006b8a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006b8e:	d00b      	beq.n	8006ba8 <UART_SetConfig+0x228>
 8006b90:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006b94:	d811      	bhi.n	8006bba <UART_SetConfig+0x23a>
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d003      	beq.n	8006ba2 <UART_SetConfig+0x222>
 8006b9a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006b9e:	d006      	beq.n	8006bae <UART_SetConfig+0x22e>
 8006ba0:	e00b      	b.n	8006bba <UART_SetConfig+0x23a>
 8006ba2:	2300      	movs	r3, #0
 8006ba4:	76fb      	strb	r3, [r7, #27]
 8006ba6:	e038      	b.n	8006c1a <UART_SetConfig+0x29a>
 8006ba8:	2302      	movs	r3, #2
 8006baa:	76fb      	strb	r3, [r7, #27]
 8006bac:	e035      	b.n	8006c1a <UART_SetConfig+0x29a>
 8006bae:	2304      	movs	r3, #4
 8006bb0:	76fb      	strb	r3, [r7, #27]
 8006bb2:	e032      	b.n	8006c1a <UART_SetConfig+0x29a>
 8006bb4:	2308      	movs	r3, #8
 8006bb6:	76fb      	strb	r3, [r7, #27]
 8006bb8:	e02f      	b.n	8006c1a <UART_SetConfig+0x29a>
 8006bba:	2310      	movs	r3, #16
 8006bbc:	76fb      	strb	r3, [r7, #27]
 8006bbe:	e02c      	b.n	8006c1a <UART_SetConfig+0x29a>
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	4a2b      	ldr	r2, [pc, #172]	; (8006c74 <UART_SetConfig+0x2f4>)
 8006bc6:	4293      	cmp	r3, r2
 8006bc8:	d125      	bne.n	8006c16 <UART_SetConfig+0x296>
 8006bca:	4b2c      	ldr	r3, [pc, #176]	; (8006c7c <UART_SetConfig+0x2fc>)
 8006bcc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006bd0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006bd4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006bd8:	d017      	beq.n	8006c0a <UART_SetConfig+0x28a>
 8006bda:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006bde:	d817      	bhi.n	8006c10 <UART_SetConfig+0x290>
 8006be0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006be4:	d00b      	beq.n	8006bfe <UART_SetConfig+0x27e>
 8006be6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006bea:	d811      	bhi.n	8006c10 <UART_SetConfig+0x290>
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d003      	beq.n	8006bf8 <UART_SetConfig+0x278>
 8006bf0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006bf4:	d006      	beq.n	8006c04 <UART_SetConfig+0x284>
 8006bf6:	e00b      	b.n	8006c10 <UART_SetConfig+0x290>
 8006bf8:	2300      	movs	r3, #0
 8006bfa:	76fb      	strb	r3, [r7, #27]
 8006bfc:	e00d      	b.n	8006c1a <UART_SetConfig+0x29a>
 8006bfe:	2302      	movs	r3, #2
 8006c00:	76fb      	strb	r3, [r7, #27]
 8006c02:	e00a      	b.n	8006c1a <UART_SetConfig+0x29a>
 8006c04:	2304      	movs	r3, #4
 8006c06:	76fb      	strb	r3, [r7, #27]
 8006c08:	e007      	b.n	8006c1a <UART_SetConfig+0x29a>
 8006c0a:	2308      	movs	r3, #8
 8006c0c:	76fb      	strb	r3, [r7, #27]
 8006c0e:	e004      	b.n	8006c1a <UART_SetConfig+0x29a>
 8006c10:	2310      	movs	r3, #16
 8006c12:	76fb      	strb	r3, [r7, #27]
 8006c14:	e001      	b.n	8006c1a <UART_SetConfig+0x29a>
 8006c16:	2310      	movs	r3, #16
 8006c18:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	4a15      	ldr	r2, [pc, #84]	; (8006c74 <UART_SetConfig+0x2f4>)
 8006c20:	4293      	cmp	r3, r2
 8006c22:	f040 809f 	bne.w	8006d64 <UART_SetConfig+0x3e4>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006c26:	7efb      	ldrb	r3, [r7, #27]
 8006c28:	2b08      	cmp	r3, #8
 8006c2a:	d837      	bhi.n	8006c9c <UART_SetConfig+0x31c>
 8006c2c:	a201      	add	r2, pc, #4	; (adr r2, 8006c34 <UART_SetConfig+0x2b4>)
 8006c2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c32:	bf00      	nop
 8006c34:	08006c59 	.word	0x08006c59
 8006c38:	08006c9d 	.word	0x08006c9d
 8006c3c:	08006c61 	.word	0x08006c61
 8006c40:	08006c9d 	.word	0x08006c9d
 8006c44:	08006c67 	.word	0x08006c67
 8006c48:	08006c9d 	.word	0x08006c9d
 8006c4c:	08006c9d 	.word	0x08006c9d
 8006c50:	08006c9d 	.word	0x08006c9d
 8006c54:	08006c95 	.word	0x08006c95
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006c58:	f7fe fb4a 	bl	80052f0 <HAL_RCC_GetPCLK1Freq>
 8006c5c:	6178      	str	r0, [r7, #20]
        break;
 8006c5e:	e022      	b.n	8006ca6 <UART_SetConfig+0x326>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006c60:	4b0b      	ldr	r3, [pc, #44]	; (8006c90 <UART_SetConfig+0x310>)
 8006c62:	617b      	str	r3, [r7, #20]
        break;
 8006c64:	e01f      	b.n	8006ca6 <UART_SetConfig+0x326>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006c66:	f7fe fad5 	bl	8005214 <HAL_RCC_GetSysClockFreq>
 8006c6a:	6178      	str	r0, [r7, #20]
        break;
 8006c6c:	e01b      	b.n	8006ca6 <UART_SetConfig+0x326>
 8006c6e:	bf00      	nop
 8006c70:	cfff69f3 	.word	0xcfff69f3
 8006c74:	40008000 	.word	0x40008000
 8006c78:	40013800 	.word	0x40013800
 8006c7c:	40021000 	.word	0x40021000
 8006c80:	40004400 	.word	0x40004400
 8006c84:	40004800 	.word	0x40004800
 8006c88:	40004c00 	.word	0x40004c00
 8006c8c:	40005000 	.word	0x40005000
 8006c90:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006c94:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006c98:	617b      	str	r3, [r7, #20]
        break;
 8006c9a:	e004      	b.n	8006ca6 <UART_SetConfig+0x326>
      default:
        pclk = 0U;
 8006c9c:	2300      	movs	r3, #0
 8006c9e:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8006ca0:	2301      	movs	r3, #1
 8006ca2:	76bb      	strb	r3, [r7, #26]
        break;
 8006ca4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006ca6:	697b      	ldr	r3, [r7, #20]
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	f000 811b 	beq.w	8006ee4 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cb2:	4a96      	ldr	r2, [pc, #600]	; (8006f0c <UART_SetConfig+0x58c>)
 8006cb4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006cb8:	461a      	mov	r2, r3
 8006cba:	697b      	ldr	r3, [r7, #20]
 8006cbc:	fbb3 f3f2 	udiv	r3, r3, r2
 8006cc0:	60bb      	str	r3, [r7, #8]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	685a      	ldr	r2, [r3, #4]
 8006cc6:	4613      	mov	r3, r2
 8006cc8:	005b      	lsls	r3, r3, #1
 8006cca:	4413      	add	r3, r2
 8006ccc:	68ba      	ldr	r2, [r7, #8]
 8006cce:	429a      	cmp	r2, r3
 8006cd0:	d305      	bcc.n	8006cde <UART_SetConfig+0x35e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	685b      	ldr	r3, [r3, #4]
 8006cd6:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006cd8:	68ba      	ldr	r2, [r7, #8]
 8006cda:	429a      	cmp	r2, r3
 8006cdc:	d902      	bls.n	8006ce4 <UART_SetConfig+0x364>
      {
        ret = HAL_ERROR;
 8006cde:	2301      	movs	r3, #1
 8006ce0:	76bb      	strb	r3, [r7, #26]
 8006ce2:	e0ff      	b.n	8006ee4 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006ce4:	697b      	ldr	r3, [r7, #20]
 8006ce6:	4618      	mov	r0, r3
 8006ce8:	f04f 0100 	mov.w	r1, #0
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cf0:	4a86      	ldr	r2, [pc, #536]	; (8006f0c <UART_SetConfig+0x58c>)
 8006cf2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006cf6:	b29a      	uxth	r2, r3
 8006cf8:	f04f 0300 	mov.w	r3, #0
 8006cfc:	f7f9 fa8c 	bl	8000218 <__aeabi_uldivmod>
 8006d00:	4602      	mov	r2, r0
 8006d02:	460b      	mov	r3, r1
 8006d04:	4610      	mov	r0, r2
 8006d06:	4619      	mov	r1, r3
 8006d08:	f04f 0200 	mov.w	r2, #0
 8006d0c:	f04f 0300 	mov.w	r3, #0
 8006d10:	020b      	lsls	r3, r1, #8
 8006d12:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8006d16:	0202      	lsls	r2, r0, #8
 8006d18:	6879      	ldr	r1, [r7, #4]
 8006d1a:	6849      	ldr	r1, [r1, #4]
 8006d1c:	0849      	lsrs	r1, r1, #1
 8006d1e:	4608      	mov	r0, r1
 8006d20:	f04f 0100 	mov.w	r1, #0
 8006d24:	1814      	adds	r4, r2, r0
 8006d26:	eb43 0501 	adc.w	r5, r3, r1
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	685b      	ldr	r3, [r3, #4]
 8006d2e:	461a      	mov	r2, r3
 8006d30:	f04f 0300 	mov.w	r3, #0
 8006d34:	4620      	mov	r0, r4
 8006d36:	4629      	mov	r1, r5
 8006d38:	f7f9 fa6e 	bl	8000218 <__aeabi_uldivmod>
 8006d3c:	4602      	mov	r2, r0
 8006d3e:	460b      	mov	r3, r1
 8006d40:	4613      	mov	r3, r2
 8006d42:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006d44:	693b      	ldr	r3, [r7, #16]
 8006d46:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006d4a:	d308      	bcc.n	8006d5e <UART_SetConfig+0x3de>
 8006d4c:	693b      	ldr	r3, [r7, #16]
 8006d4e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006d52:	d204      	bcs.n	8006d5e <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	693a      	ldr	r2, [r7, #16]
 8006d5a:	60da      	str	r2, [r3, #12]
 8006d5c:	e0c2      	b.n	8006ee4 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 8006d5e:	2301      	movs	r3, #1
 8006d60:	76bb      	strb	r3, [r7, #26]
 8006d62:	e0bf      	b.n	8006ee4 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	69db      	ldr	r3, [r3, #28]
 8006d68:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006d6c:	d165      	bne.n	8006e3a <UART_SetConfig+0x4ba>
  {
    switch (clocksource)
 8006d6e:	7efb      	ldrb	r3, [r7, #27]
 8006d70:	2b08      	cmp	r3, #8
 8006d72:	d828      	bhi.n	8006dc6 <UART_SetConfig+0x446>
 8006d74:	a201      	add	r2, pc, #4	; (adr r2, 8006d7c <UART_SetConfig+0x3fc>)
 8006d76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d7a:	bf00      	nop
 8006d7c:	08006da1 	.word	0x08006da1
 8006d80:	08006da9 	.word	0x08006da9
 8006d84:	08006db1 	.word	0x08006db1
 8006d88:	08006dc7 	.word	0x08006dc7
 8006d8c:	08006db7 	.word	0x08006db7
 8006d90:	08006dc7 	.word	0x08006dc7
 8006d94:	08006dc7 	.word	0x08006dc7
 8006d98:	08006dc7 	.word	0x08006dc7
 8006d9c:	08006dbf 	.word	0x08006dbf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006da0:	f7fe faa6 	bl	80052f0 <HAL_RCC_GetPCLK1Freq>
 8006da4:	6178      	str	r0, [r7, #20]
        break;
 8006da6:	e013      	b.n	8006dd0 <UART_SetConfig+0x450>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006da8:	f7fe fab8 	bl	800531c <HAL_RCC_GetPCLK2Freq>
 8006dac:	6178      	str	r0, [r7, #20]
        break;
 8006dae:	e00f      	b.n	8006dd0 <UART_SetConfig+0x450>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006db0:	4b57      	ldr	r3, [pc, #348]	; (8006f10 <UART_SetConfig+0x590>)
 8006db2:	617b      	str	r3, [r7, #20]
        break;
 8006db4:	e00c      	b.n	8006dd0 <UART_SetConfig+0x450>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006db6:	f7fe fa2d 	bl	8005214 <HAL_RCC_GetSysClockFreq>
 8006dba:	6178      	str	r0, [r7, #20]
        break;
 8006dbc:	e008      	b.n	8006dd0 <UART_SetConfig+0x450>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006dbe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006dc2:	617b      	str	r3, [r7, #20]
        break;
 8006dc4:	e004      	b.n	8006dd0 <UART_SetConfig+0x450>
      default:
        pclk = 0U;
 8006dc6:	2300      	movs	r3, #0
 8006dc8:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8006dca:	2301      	movs	r3, #1
 8006dcc:	76bb      	strb	r3, [r7, #26]
        break;
 8006dce:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006dd0:	697b      	ldr	r3, [r7, #20]
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	f000 8086 	beq.w	8006ee4 <UART_SetConfig+0x564>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ddc:	4a4b      	ldr	r2, [pc, #300]	; (8006f0c <UART_SetConfig+0x58c>)
 8006dde:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006de2:	461a      	mov	r2, r3
 8006de4:	697b      	ldr	r3, [r7, #20]
 8006de6:	fbb3 f3f2 	udiv	r3, r3, r2
 8006dea:	005a      	lsls	r2, r3, #1
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	685b      	ldr	r3, [r3, #4]
 8006df0:	085b      	lsrs	r3, r3, #1
 8006df2:	441a      	add	r2, r3
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	685b      	ldr	r3, [r3, #4]
 8006df8:	fbb2 f3f3 	udiv	r3, r2, r3
 8006dfc:	b29b      	uxth	r3, r3
 8006dfe:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006e00:	693b      	ldr	r3, [r7, #16]
 8006e02:	2b0f      	cmp	r3, #15
 8006e04:	d916      	bls.n	8006e34 <UART_SetConfig+0x4b4>
 8006e06:	693b      	ldr	r3, [r7, #16]
 8006e08:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006e0c:	d212      	bcs.n	8006e34 <UART_SetConfig+0x4b4>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006e0e:	693b      	ldr	r3, [r7, #16]
 8006e10:	b29b      	uxth	r3, r3
 8006e12:	f023 030f 	bic.w	r3, r3, #15
 8006e16:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006e18:	693b      	ldr	r3, [r7, #16]
 8006e1a:	085b      	lsrs	r3, r3, #1
 8006e1c:	b29b      	uxth	r3, r3
 8006e1e:	f003 0307 	and.w	r3, r3, #7
 8006e22:	b29a      	uxth	r2, r3
 8006e24:	89fb      	ldrh	r3, [r7, #14]
 8006e26:	4313      	orrs	r3, r2
 8006e28:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	89fa      	ldrh	r2, [r7, #14]
 8006e30:	60da      	str	r2, [r3, #12]
 8006e32:	e057      	b.n	8006ee4 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8006e34:	2301      	movs	r3, #1
 8006e36:	76bb      	strb	r3, [r7, #26]
 8006e38:	e054      	b.n	8006ee4 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006e3a:	7efb      	ldrb	r3, [r7, #27]
 8006e3c:	2b08      	cmp	r3, #8
 8006e3e:	d828      	bhi.n	8006e92 <UART_SetConfig+0x512>
 8006e40:	a201      	add	r2, pc, #4	; (adr r2, 8006e48 <UART_SetConfig+0x4c8>)
 8006e42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e46:	bf00      	nop
 8006e48:	08006e6d 	.word	0x08006e6d
 8006e4c:	08006e75 	.word	0x08006e75
 8006e50:	08006e7d 	.word	0x08006e7d
 8006e54:	08006e93 	.word	0x08006e93
 8006e58:	08006e83 	.word	0x08006e83
 8006e5c:	08006e93 	.word	0x08006e93
 8006e60:	08006e93 	.word	0x08006e93
 8006e64:	08006e93 	.word	0x08006e93
 8006e68:	08006e8b 	.word	0x08006e8b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006e6c:	f7fe fa40 	bl	80052f0 <HAL_RCC_GetPCLK1Freq>
 8006e70:	6178      	str	r0, [r7, #20]
        break;
 8006e72:	e013      	b.n	8006e9c <UART_SetConfig+0x51c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006e74:	f7fe fa52 	bl	800531c <HAL_RCC_GetPCLK2Freq>
 8006e78:	6178      	str	r0, [r7, #20]
        break;
 8006e7a:	e00f      	b.n	8006e9c <UART_SetConfig+0x51c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006e7c:	4b24      	ldr	r3, [pc, #144]	; (8006f10 <UART_SetConfig+0x590>)
 8006e7e:	617b      	str	r3, [r7, #20]
        break;
 8006e80:	e00c      	b.n	8006e9c <UART_SetConfig+0x51c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006e82:	f7fe f9c7 	bl	8005214 <HAL_RCC_GetSysClockFreq>
 8006e86:	6178      	str	r0, [r7, #20]
        break;
 8006e88:	e008      	b.n	8006e9c <UART_SetConfig+0x51c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006e8a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006e8e:	617b      	str	r3, [r7, #20]
        break;
 8006e90:	e004      	b.n	8006e9c <UART_SetConfig+0x51c>
      default:
        pclk = 0U;
 8006e92:	2300      	movs	r3, #0
 8006e94:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8006e96:	2301      	movs	r3, #1
 8006e98:	76bb      	strb	r3, [r7, #26]
        break;
 8006e9a:	bf00      	nop
    }

    if (pclk != 0U)
 8006e9c:	697b      	ldr	r3, [r7, #20]
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	d020      	beq.n	8006ee4 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ea6:	4a19      	ldr	r2, [pc, #100]	; (8006f0c <UART_SetConfig+0x58c>)
 8006ea8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006eac:	461a      	mov	r2, r3
 8006eae:	697b      	ldr	r3, [r7, #20]
 8006eb0:	fbb3 f2f2 	udiv	r2, r3, r2
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	685b      	ldr	r3, [r3, #4]
 8006eb8:	085b      	lsrs	r3, r3, #1
 8006eba:	441a      	add	r2, r3
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	685b      	ldr	r3, [r3, #4]
 8006ec0:	fbb2 f3f3 	udiv	r3, r2, r3
 8006ec4:	b29b      	uxth	r3, r3
 8006ec6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006ec8:	693b      	ldr	r3, [r7, #16]
 8006eca:	2b0f      	cmp	r3, #15
 8006ecc:	d908      	bls.n	8006ee0 <UART_SetConfig+0x560>
 8006ece:	693b      	ldr	r3, [r7, #16]
 8006ed0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006ed4:	d204      	bcs.n	8006ee0 <UART_SetConfig+0x560>
      {
        huart->Instance->BRR = usartdiv;
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	693a      	ldr	r2, [r7, #16]
 8006edc:	60da      	str	r2, [r3, #12]
 8006ede:	e001      	b.n	8006ee4 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8006ee0:	2301      	movs	r3, #1
 8006ee2:	76bb      	strb	r3, [r7, #26]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	2201      	movs	r2, #1
 8006ee8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	2201      	movs	r2, #1
 8006ef0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	2200      	movs	r2, #0
 8006ef8:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	2200      	movs	r2, #0
 8006efe:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8006f00:	7ebb      	ldrb	r3, [r7, #26]
}
 8006f02:	4618      	mov	r0, r3
 8006f04:	3720      	adds	r7, #32
 8006f06:	46bd      	mov	sp, r7
 8006f08:	bdb0      	pop	{r4, r5, r7, pc}
 8006f0a:	bf00      	nop
 8006f0c:	08007d80 	.word	0x08007d80
 8006f10:	00f42400 	.word	0x00f42400

08006f14 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006f14:	b480      	push	{r7}
 8006f16:	b083      	sub	sp, #12
 8006f18:	af00      	add	r7, sp, #0
 8006f1a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f20:	f003 0301 	and.w	r3, r3, #1
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	d00a      	beq.n	8006f3e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	685b      	ldr	r3, [r3, #4]
 8006f2e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	430a      	orrs	r2, r1
 8006f3c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f42:	f003 0302 	and.w	r3, r3, #2
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	d00a      	beq.n	8006f60 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	685b      	ldr	r3, [r3, #4]
 8006f50:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	430a      	orrs	r2, r1
 8006f5e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f64:	f003 0304 	and.w	r3, r3, #4
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d00a      	beq.n	8006f82 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	685b      	ldr	r3, [r3, #4]
 8006f72:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	430a      	orrs	r2, r1
 8006f80:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f86:	f003 0308 	and.w	r3, r3, #8
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d00a      	beq.n	8006fa4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	685b      	ldr	r3, [r3, #4]
 8006f94:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	430a      	orrs	r2, r1
 8006fa2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006fa8:	f003 0310 	and.w	r3, r3, #16
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	d00a      	beq.n	8006fc6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	689b      	ldr	r3, [r3, #8]
 8006fb6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	430a      	orrs	r2, r1
 8006fc4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006fca:	f003 0320 	and.w	r3, r3, #32
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d00a      	beq.n	8006fe8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	689b      	ldr	r3, [r3, #8]
 8006fd8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	430a      	orrs	r2, r1
 8006fe6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006fec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d01a      	beq.n	800702a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	685b      	ldr	r3, [r3, #4]
 8006ffa:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	430a      	orrs	r2, r1
 8007008:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800700e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007012:	d10a      	bne.n	800702a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	685b      	ldr	r3, [r3, #4]
 800701a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	430a      	orrs	r2, r1
 8007028:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800702e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007032:	2b00      	cmp	r3, #0
 8007034:	d00a      	beq.n	800704c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	685b      	ldr	r3, [r3, #4]
 800703c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	430a      	orrs	r2, r1
 800704a:	605a      	str	r2, [r3, #4]
  }
}
 800704c:	bf00      	nop
 800704e:	370c      	adds	r7, #12
 8007050:	46bd      	mov	sp, r7
 8007052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007056:	4770      	bx	lr

08007058 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007058:	b580      	push	{r7, lr}
 800705a:	b086      	sub	sp, #24
 800705c:	af02      	add	r7, sp, #8
 800705e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	2200      	movs	r2, #0
 8007064:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007068:	f7fa fc14 	bl	8001894 <HAL_GetTick>
 800706c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	f003 0308 	and.w	r3, r3, #8
 8007078:	2b08      	cmp	r3, #8
 800707a:	d10e      	bne.n	800709a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800707c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007080:	9300      	str	r3, [sp, #0]
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	2200      	movs	r2, #0
 8007086:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800708a:	6878      	ldr	r0, [r7, #4]
 800708c:	f000 f82f 	bl	80070ee <UART_WaitOnFlagUntilTimeout>
 8007090:	4603      	mov	r3, r0
 8007092:	2b00      	cmp	r3, #0
 8007094:	d001      	beq.n	800709a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007096:	2303      	movs	r3, #3
 8007098:	e025      	b.n	80070e6 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	f003 0304 	and.w	r3, r3, #4
 80070a4:	2b04      	cmp	r3, #4
 80070a6:	d10e      	bne.n	80070c6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80070a8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80070ac:	9300      	str	r3, [sp, #0]
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	2200      	movs	r2, #0
 80070b2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80070b6:	6878      	ldr	r0, [r7, #4]
 80070b8:	f000 f819 	bl	80070ee <UART_WaitOnFlagUntilTimeout>
 80070bc:	4603      	mov	r3, r0
 80070be:	2b00      	cmp	r3, #0
 80070c0:	d001      	beq.n	80070c6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80070c2:	2303      	movs	r3, #3
 80070c4:	e00f      	b.n	80070e6 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	2220      	movs	r2, #32
 80070ca:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	2220      	movs	r2, #32
 80070d2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	2200      	movs	r2, #0
 80070da:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	2200      	movs	r2, #0
 80070e0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80070e4:	2300      	movs	r3, #0
}
 80070e6:	4618      	mov	r0, r3
 80070e8:	3710      	adds	r7, #16
 80070ea:	46bd      	mov	sp, r7
 80070ec:	bd80      	pop	{r7, pc}

080070ee <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80070ee:	b580      	push	{r7, lr}
 80070f0:	b084      	sub	sp, #16
 80070f2:	af00      	add	r7, sp, #0
 80070f4:	60f8      	str	r0, [r7, #12]
 80070f6:	60b9      	str	r1, [r7, #8]
 80070f8:	603b      	str	r3, [r7, #0]
 80070fa:	4613      	mov	r3, r2
 80070fc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80070fe:	e062      	b.n	80071c6 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007100:	69bb      	ldr	r3, [r7, #24]
 8007102:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007106:	d05e      	beq.n	80071c6 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007108:	f7fa fbc4 	bl	8001894 <HAL_GetTick>
 800710c:	4602      	mov	r2, r0
 800710e:	683b      	ldr	r3, [r7, #0]
 8007110:	1ad3      	subs	r3, r2, r3
 8007112:	69ba      	ldr	r2, [r7, #24]
 8007114:	429a      	cmp	r2, r3
 8007116:	d302      	bcc.n	800711e <UART_WaitOnFlagUntilTimeout+0x30>
 8007118:	69bb      	ldr	r3, [r7, #24]
 800711a:	2b00      	cmp	r3, #0
 800711c:	d11d      	bne.n	800715a <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	681a      	ldr	r2, [r3, #0]
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800712c:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	689a      	ldr	r2, [r3, #8]
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	f022 0201 	bic.w	r2, r2, #1
 800713c:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	2220      	movs	r2, #32
 8007142:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	2220      	movs	r2, #32
 800714a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	2200      	movs	r2, #0
 8007152:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8007156:	2303      	movs	r3, #3
 8007158:	e045      	b.n	80071e6 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	f003 0304 	and.w	r3, r3, #4
 8007164:	2b00      	cmp	r3, #0
 8007166:	d02e      	beq.n	80071c6 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	69db      	ldr	r3, [r3, #28]
 800716e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007172:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007176:	d126      	bne.n	80071c6 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007180:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	681a      	ldr	r2, [r3, #0]
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8007190:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	689a      	ldr	r2, [r3, #8]
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	f022 0201 	bic.w	r2, r2, #1
 80071a0:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	2220      	movs	r2, #32
 80071a6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	2220      	movs	r2, #32
 80071ae:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	2220      	movs	r2, #32
 80071b6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	2200      	movs	r2, #0
 80071be:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 80071c2:	2303      	movs	r3, #3
 80071c4:	e00f      	b.n	80071e6 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	69da      	ldr	r2, [r3, #28]
 80071cc:	68bb      	ldr	r3, [r7, #8]
 80071ce:	4013      	ands	r3, r2
 80071d0:	68ba      	ldr	r2, [r7, #8]
 80071d2:	429a      	cmp	r2, r3
 80071d4:	bf0c      	ite	eq
 80071d6:	2301      	moveq	r3, #1
 80071d8:	2300      	movne	r3, #0
 80071da:	b2db      	uxtb	r3, r3
 80071dc:	461a      	mov	r2, r3
 80071de:	79fb      	ldrb	r3, [r7, #7]
 80071e0:	429a      	cmp	r2, r3
 80071e2:	d08d      	beq.n	8007100 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80071e4:	2300      	movs	r3, #0
}
 80071e6:	4618      	mov	r0, r3
 80071e8:	3710      	adds	r7, #16
 80071ea:	46bd      	mov	sp, r7
 80071ec:	bd80      	pop	{r7, pc}
	...

080071f0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80071f0:	b480      	push	{r7}
 80071f2:	b085      	sub	sp, #20
 80071f4:	af00      	add	r7, sp, #0
 80071f6:	60f8      	str	r0, [r7, #12]
 80071f8:	60b9      	str	r1, [r7, #8]
 80071fa:	4613      	mov	r3, r2
 80071fc:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	68ba      	ldr	r2, [r7, #8]
 8007202:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	88fa      	ldrh	r2, [r7, #6]
 8007208:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	88fa      	ldrh	r2, [r7, #6]
 8007210:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	2200      	movs	r2, #0
 8007218:	671a      	str	r2, [r3, #112]	; 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	689b      	ldr	r3, [r3, #8]
 800721e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007222:	d10e      	bne.n	8007242 <UART_Start_Receive_IT+0x52>
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	691b      	ldr	r3, [r3, #16]
 8007228:	2b00      	cmp	r3, #0
 800722a:	d105      	bne.n	8007238 <UART_Start_Receive_IT+0x48>
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	f240 12ff 	movw	r2, #511	; 0x1ff
 8007232:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007236:	e02d      	b.n	8007294 <UART_Start_Receive_IT+0xa4>
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	22ff      	movs	r2, #255	; 0xff
 800723c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007240:	e028      	b.n	8007294 <UART_Start_Receive_IT+0xa4>
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	689b      	ldr	r3, [r3, #8]
 8007246:	2b00      	cmp	r3, #0
 8007248:	d10d      	bne.n	8007266 <UART_Start_Receive_IT+0x76>
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	691b      	ldr	r3, [r3, #16]
 800724e:	2b00      	cmp	r3, #0
 8007250:	d104      	bne.n	800725c <UART_Start_Receive_IT+0x6c>
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	22ff      	movs	r2, #255	; 0xff
 8007256:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800725a:	e01b      	b.n	8007294 <UART_Start_Receive_IT+0xa4>
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	227f      	movs	r2, #127	; 0x7f
 8007260:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007264:	e016      	b.n	8007294 <UART_Start_Receive_IT+0xa4>
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	689b      	ldr	r3, [r3, #8]
 800726a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800726e:	d10d      	bne.n	800728c <UART_Start_Receive_IT+0x9c>
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	691b      	ldr	r3, [r3, #16]
 8007274:	2b00      	cmp	r3, #0
 8007276:	d104      	bne.n	8007282 <UART_Start_Receive_IT+0x92>
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	227f      	movs	r2, #127	; 0x7f
 800727c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007280:	e008      	b.n	8007294 <UART_Start_Receive_IT+0xa4>
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	223f      	movs	r2, #63	; 0x3f
 8007286:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800728a:	e003      	b.n	8007294 <UART_Start_Receive_IT+0xa4>
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	2200      	movs	r2, #0
 8007290:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	2200      	movs	r2, #0
 8007298:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	2222      	movs	r2, #34	; 0x22
 80072a0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	689a      	ldr	r2, [r3, #8]
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	f042 0201 	orr.w	r2, r2, #1
 80072b2:	609a      	str	r2, [r3, #8]

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80072b8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80072bc:	d12a      	bne.n	8007314 <UART_Start_Receive_IT+0x124>
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80072c4:	88fa      	ldrh	r2, [r7, #6]
 80072c6:	429a      	cmp	r2, r3
 80072c8:	d324      	bcc.n	8007314 <UART_Start_Receive_IT+0x124>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	689b      	ldr	r3, [r3, #8]
 80072ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80072d2:	d107      	bne.n	80072e4 <UART_Start_Receive_IT+0xf4>
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	691b      	ldr	r3, [r3, #16]
 80072d8:	2b00      	cmp	r3, #0
 80072da:	d103      	bne.n	80072e4 <UART_Start_Receive_IT+0xf4>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	4a1f      	ldr	r2, [pc, #124]	; (800735c <UART_Start_Receive_IT+0x16c>)
 80072e0:	671a      	str	r2, [r3, #112]	; 0x70
 80072e2:	e002      	b.n	80072ea <UART_Start_Receive_IT+0xfa>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	4a1e      	ldr	r2, [pc, #120]	; (8007360 <UART_Start_Receive_IT+0x170>)
 80072e8:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	2200      	movs	r2, #0
 80072ee:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	681a      	ldr	r2, [r3, #0]
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007300:	601a      	str	r2, [r3, #0]
    SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	689a      	ldr	r2, [r3, #8]
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8007310:	609a      	str	r2, [r3, #8]
 8007312:	e01b      	b.n	800734c <UART_Start_Receive_IT+0x15c>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007314:	68fb      	ldr	r3, [r7, #12]
 8007316:	689b      	ldr	r3, [r3, #8]
 8007318:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800731c:	d107      	bne.n	800732e <UART_Start_Receive_IT+0x13e>
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	691b      	ldr	r3, [r3, #16]
 8007322:	2b00      	cmp	r3, #0
 8007324:	d103      	bne.n	800732e <UART_Start_Receive_IT+0x13e>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	4a0e      	ldr	r2, [pc, #56]	; (8007364 <UART_Start_Receive_IT+0x174>)
 800732a:	671a      	str	r2, [r3, #112]	; 0x70
 800732c:	e002      	b.n	8007334 <UART_Start_Receive_IT+0x144>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	4a0d      	ldr	r2, [pc, #52]	; (8007368 <UART_Start_Receive_IT+0x178>)
 8007332:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	2200      	movs	r2, #0
 8007338:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800733c:	68fb      	ldr	r3, [r7, #12]
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	681a      	ldr	r2, [r3, #0]
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 800734a:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 800734c:	2300      	movs	r3, #0
}
 800734e:	4618      	mov	r0, r3
 8007350:	3714      	adds	r7, #20
 8007352:	46bd      	mov	sp, r7
 8007354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007358:	4770      	bx	lr
 800735a:	bf00      	nop
 800735c:	080077e5 	.word	0x080077e5
 8007360:	080075e1 	.word	0x080075e1
 8007364:	08007509 	.word	0x08007509
 8007368:	08007431 	.word	0x08007431

0800736c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800736c:	b480      	push	{r7}
 800736e:	b083      	sub	sp, #12
 8007370:	af00      	add	r7, sp, #0
 8007372:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	681a      	ldr	r2, [r3, #0]
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8007382:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	689b      	ldr	r3, [r3, #8]
 800738a:	687a      	ldr	r2, [r7, #4]
 800738c:	6812      	ldr	r2, [r2, #0]
 800738e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007392:	f023 0301 	bic.w	r3, r3, #1
 8007396:	6093      	str	r3, [r2, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800739c:	2b01      	cmp	r3, #1
 800739e:	d107      	bne.n	80073b0 <UART_EndRxTransfer+0x44>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	681a      	ldr	r2, [r3, #0]
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	f022 0210 	bic.w	r2, r2, #16
 80073ae:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	2220      	movs	r2, #32
 80073b4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	2200      	movs	r2, #0
 80073bc:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	2200      	movs	r2, #0
 80073c2:	671a      	str	r2, [r3, #112]	; 0x70
}
 80073c4:	bf00      	nop
 80073c6:	370c      	adds	r7, #12
 80073c8:	46bd      	mov	sp, r7
 80073ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ce:	4770      	bx	lr

080073d0 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80073d0:	b580      	push	{r7, lr}
 80073d2:	b084      	sub	sp, #16
 80073d4:	af00      	add	r7, sp, #0
 80073d6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073dc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	2200      	movs	r2, #0
 80073e2:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	2200      	movs	r2, #0
 80073ea:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80073ee:	68f8      	ldr	r0, [r7, #12]
 80073f0:	f7ff fab0 	bl	8006954 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80073f4:	bf00      	nop
 80073f6:	3710      	adds	r7, #16
 80073f8:	46bd      	mov	sp, r7
 80073fa:	bd80      	pop	{r7, pc}

080073fc <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80073fc:	b580      	push	{r7, lr}
 80073fe:	b082      	sub	sp, #8
 8007400:	af00      	add	r7, sp, #0
 8007402:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	681a      	ldr	r2, [r3, #0]
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007412:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	2220      	movs	r2, #32
 8007418:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	2200      	movs	r2, #0
 8007420:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007422:	6878      	ldr	r0, [r7, #4]
 8007424:	f7ff fa8c 	bl	8006940 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007428:	bf00      	nop
 800742a:	3708      	adds	r7, #8
 800742c:	46bd      	mov	sp, r7
 800742e:	bd80      	pop	{r7, pc}

08007430 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8007430:	b580      	push	{r7, lr}
 8007432:	b084      	sub	sp, #16
 8007434:	af00      	add	r7, sp, #0
 8007436:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800743e:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007446:	2b22      	cmp	r3, #34	; 0x22
 8007448:	d152      	bne.n	80074f0 <UART_RxISR_8BIT+0xc0>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007450:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8007452:	89bb      	ldrh	r3, [r7, #12]
 8007454:	b2d9      	uxtb	r1, r3
 8007456:	89fb      	ldrh	r3, [r7, #14]
 8007458:	b2da      	uxtb	r2, r3
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800745e:	400a      	ands	r2, r1
 8007460:	b2d2      	uxtb	r2, r2
 8007462:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007468:	1c5a      	adds	r2, r3, #1
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007474:	b29b      	uxth	r3, r3
 8007476:	3b01      	subs	r3, #1
 8007478:	b29a      	uxth	r2, r3
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007486:	b29b      	uxth	r3, r3
 8007488:	2b00      	cmp	r3, #0
 800748a:	d139      	bne.n	8007500 <UART_RxISR_8BIT+0xd0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	681a      	ldr	r2, [r3, #0]
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800749a:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	689a      	ldr	r2, [r3, #8]
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	f022 0201 	bic.w	r2, r2, #1
 80074aa:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	2220      	movs	r2, #32
 80074b0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	2200      	movs	r2, #0
 80074b8:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80074be:	2b01      	cmp	r3, #1
 80074c0:	d10f      	bne.n	80074e2 <UART_RxISR_8BIT+0xb2>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	681a      	ldr	r2, [r3, #0]
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	f022 0210 	bic.w	r2, r2, #16
 80074d0:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80074d8:	4619      	mov	r1, r3
 80074da:	6878      	ldr	r0, [r7, #4]
 80074dc:	f7ff fa44 	bl	8006968 <HAL_UARTEx_RxEventCallback>
 80074e0:	e002      	b.n	80074e8 <UART_RxISR_8BIT+0xb8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80074e2:	6878      	ldr	r0, [r7, #4]
 80074e4:	f7f9 f9e4 	bl	80008b0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	2200      	movs	r2, #0
 80074ec:	66da      	str	r2, [r3, #108]	; 0x6c
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80074ee:	e007      	b.n	8007500 <UART_RxISR_8BIT+0xd0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	699a      	ldr	r2, [r3, #24]
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	f042 0208 	orr.w	r2, r2, #8
 80074fe:	619a      	str	r2, [r3, #24]
}
 8007500:	bf00      	nop
 8007502:	3710      	adds	r7, #16
 8007504:	46bd      	mov	sp, r7
 8007506:	bd80      	pop	{r7, pc}

08007508 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8007508:	b580      	push	{r7, lr}
 800750a:	b084      	sub	sp, #16
 800750c:	af00      	add	r7, sp, #0
 800750e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8007516:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800751e:	2b22      	cmp	r3, #34	; 0x22
 8007520:	d152      	bne.n	80075c8 <UART_RxISR_16BIT+0xc0>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007528:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800752e:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 8007530:	89ba      	ldrh	r2, [r7, #12]
 8007532:	89fb      	ldrh	r3, [r7, #14]
 8007534:	4013      	ands	r3, r2
 8007536:	b29a      	uxth	r2, r3
 8007538:	68bb      	ldr	r3, [r7, #8]
 800753a:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007540:	1c9a      	adds	r2, r3, #2
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800754c:	b29b      	uxth	r3, r3
 800754e:	3b01      	subs	r3, #1
 8007550:	b29a      	uxth	r2, r3
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800755e:	b29b      	uxth	r3, r3
 8007560:	2b00      	cmp	r3, #0
 8007562:	d139      	bne.n	80075d8 <UART_RxISR_16BIT+0xd0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	681a      	ldr	r2, [r3, #0]
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8007572:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	689a      	ldr	r2, [r3, #8]
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	f022 0201 	bic.w	r2, r2, #1
 8007582:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	2220      	movs	r2, #32
 8007588:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	2200      	movs	r2, #0
 8007590:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007596:	2b01      	cmp	r3, #1
 8007598:	d10f      	bne.n	80075ba <UART_RxISR_16BIT+0xb2>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	681a      	ldr	r2, [r3, #0]
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	f022 0210 	bic.w	r2, r2, #16
 80075a8:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80075b0:	4619      	mov	r1, r3
 80075b2:	6878      	ldr	r0, [r7, #4]
 80075b4:	f7ff f9d8 	bl	8006968 <HAL_UARTEx_RxEventCallback>
 80075b8:	e002      	b.n	80075c0 <UART_RxISR_16BIT+0xb8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80075ba:	6878      	ldr	r0, [r7, #4]
 80075bc:	f7f9 f978 	bl	80008b0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	2200      	movs	r2, #0
 80075c4:	66da      	str	r2, [r3, #108]	; 0x6c
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80075c6:	e007      	b.n	80075d8 <UART_RxISR_16BIT+0xd0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	699a      	ldr	r2, [r3, #24]
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	f042 0208 	orr.w	r2, r2, #8
 80075d6:	619a      	str	r2, [r3, #24]
}
 80075d8:	bf00      	nop
 80075da:	3710      	adds	r7, #16
 80075dc:	46bd      	mov	sp, r7
 80075de:	bd80      	pop	{r7, pc}

080075e0 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80075e0:	b580      	push	{r7, lr}
 80075e2:	b088      	sub	sp, #32
 80075e4:	af00      	add	r7, sp, #0
 80075e6:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80075ee:	837b      	strh	r3, [r7, #26]
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	69db      	ldr	r3, [r3, #28]
 80075f6:	61fb      	str	r3, [r7, #28]
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	617b      	str	r3, [r7, #20]
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	689b      	ldr	r3, [r3, #8]
 8007606:	613b      	str	r3, [r7, #16]

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800760e:	2b22      	cmp	r3, #34	; 0x22
 8007610:	f040 80da 	bne.w	80077c8 <UART_RxISR_8BIT_FIFOEN+0x1e8>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800761a:	81fb      	strh	r3, [r7, #14]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800761c:	e0aa      	b.n	8007774 <UART_RxISR_8BIT_FIFOEN+0x194>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007624:	81bb      	strh	r3, [r7, #12]
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8007626:	89bb      	ldrh	r3, [r7, #12]
 8007628:	b2d9      	uxtb	r1, r3
 800762a:	8b7b      	ldrh	r3, [r7, #26]
 800762c:	b2da      	uxtb	r2, r3
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007632:	400a      	ands	r2, r1
 8007634:	b2d2      	uxtb	r2, r2
 8007636:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800763c:	1c5a      	adds	r2, r3, #1
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007648:	b29b      	uxth	r3, r3
 800764a:	3b01      	subs	r3, #1
 800764c:	b29a      	uxth	r2, r3
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	69db      	ldr	r3, [r3, #28]
 800765a:	61fb      	str	r3, [r7, #28]

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800765c:	69fb      	ldr	r3, [r7, #28]
 800765e:	f003 0307 	and.w	r3, r3, #7
 8007662:	2b00      	cmp	r3, #0
 8007664:	d04d      	beq.n	8007702 <UART_RxISR_8BIT_FIFOEN+0x122>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007666:	69fb      	ldr	r3, [r7, #28]
 8007668:	f003 0301 	and.w	r3, r3, #1
 800766c:	2b00      	cmp	r3, #0
 800766e:	d010      	beq.n	8007692 <UART_RxISR_8BIT_FIFOEN+0xb2>
 8007670:	697b      	ldr	r3, [r7, #20]
 8007672:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007676:	2b00      	cmp	r3, #0
 8007678:	d00b      	beq.n	8007692 <UART_RxISR_8BIT_FIFOEN+0xb2>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	2201      	movs	r2, #1
 8007680:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007688:	f043 0201 	orr.w	r2, r3, #1
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007692:	69fb      	ldr	r3, [r7, #28]
 8007694:	f003 0302 	and.w	r3, r3, #2
 8007698:	2b00      	cmp	r3, #0
 800769a:	d010      	beq.n	80076be <UART_RxISR_8BIT_FIFOEN+0xde>
 800769c:	693b      	ldr	r3, [r7, #16]
 800769e:	f003 0301 	and.w	r3, r3, #1
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	d00b      	beq.n	80076be <UART_RxISR_8BIT_FIFOEN+0xde>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	2202      	movs	r2, #2
 80076ac:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80076b4:	f043 0204 	orr.w	r2, r3, #4
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80076be:	69fb      	ldr	r3, [r7, #28]
 80076c0:	f003 0304 	and.w	r3, r3, #4
 80076c4:	2b00      	cmp	r3, #0
 80076c6:	d010      	beq.n	80076ea <UART_RxISR_8BIT_FIFOEN+0x10a>
 80076c8:	693b      	ldr	r3, [r7, #16]
 80076ca:	f003 0301 	and.w	r3, r3, #1
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	d00b      	beq.n	80076ea <UART_RxISR_8BIT_FIFOEN+0x10a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	2204      	movs	r2, #4
 80076d8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80076e0:	f043 0202 	orr.w	r2, r3, #2
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80076f0:	2b00      	cmp	r3, #0
 80076f2:	d006      	beq.n	8007702 <UART_RxISR_8BIT_FIFOEN+0x122>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80076f4:	6878      	ldr	r0, [r7, #4]
 80076f6:	f7ff f92d 	bl	8006954 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	2200      	movs	r2, #0
 80076fe:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007708:	b29b      	uxth	r3, r3
 800770a:	2b00      	cmp	r3, #0
 800770c:	d132      	bne.n	8007774 <UART_RxISR_8BIT_FIFOEN+0x194>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	681a      	ldr	r2, [r3, #0]
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800771c:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	689b      	ldr	r3, [r3, #8]
 8007724:	687a      	ldr	r2, [r7, #4]
 8007726:	6812      	ldr	r2, [r2, #0]
 8007728:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800772c:	f023 0301 	bic.w	r3, r3, #1
 8007730:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	2220      	movs	r2, #32
 8007736:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	2200      	movs	r2, #0
 800773e:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007744:	2b01      	cmp	r3, #1
 8007746:	d10f      	bne.n	8007768 <UART_RxISR_8BIT_FIFOEN+0x188>
        {
          /* Disable IDLE interrupt */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	681a      	ldr	r2, [r3, #0]
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	f022 0210 	bic.w	r2, r2, #16
 8007756:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800775e:	4619      	mov	r1, r3
 8007760:	6878      	ldr	r0, [r7, #4]
 8007762:	f7ff f901 	bl	8006968 <HAL_UARTEx_RxEventCallback>
 8007766:	e002      	b.n	800776e <UART_RxISR_8BIT_FIFOEN+0x18e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8007768:	6878      	ldr	r0, [r7, #4]
 800776a:	f7f9 f8a1 	bl	80008b0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	2200      	movs	r2, #0
 8007772:	66da      	str	r2, [r3, #108]	; 0x6c
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8007774:	89fb      	ldrh	r3, [r7, #14]
 8007776:	2b00      	cmp	r3, #0
 8007778:	d005      	beq.n	8007786 <UART_RxISR_8BIT_FIFOEN+0x1a6>
 800777a:	69fb      	ldr	r3, [r7, #28]
 800777c:	f003 0320 	and.w	r3, r3, #32
 8007780:	2b00      	cmp	r3, #0
 8007782:	f47f af4c 	bne.w	800761e <UART_RxISR_8BIT_FIFOEN+0x3e>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800778c:	817b      	strh	r3, [r7, #10]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800778e:	897b      	ldrh	r3, [r7, #10]
 8007790:	2b00      	cmp	r3, #0
 8007792:	d021      	beq.n	80077d8 <UART_RxISR_8BIT_FIFOEN+0x1f8>
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800779a:	897a      	ldrh	r2, [r7, #10]
 800779c:	429a      	cmp	r2, r3
 800779e:	d21b      	bcs.n	80077d8 <UART_RxISR_8BIT_FIFOEN+0x1f8>
    {
      /* Disable the UART RXFT interrupt*/
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	689a      	ldr	r2, [r3, #8]
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 80077ae:	609a      	str	r2, [r3, #8]

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	4a0b      	ldr	r2, [pc, #44]	; (80077e0 <UART_RxISR_8BIT_FIFOEN+0x200>)
 80077b4:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	681a      	ldr	r2, [r3, #0]
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	f042 0220 	orr.w	r2, r2, #32
 80077c4:	601a      	str	r2, [r3, #0]
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80077c6:	e007      	b.n	80077d8 <UART_RxISR_8BIT_FIFOEN+0x1f8>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	699a      	ldr	r2, [r3, #24]
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	f042 0208 	orr.w	r2, r2, #8
 80077d6:	619a      	str	r2, [r3, #24]
}
 80077d8:	bf00      	nop
 80077da:	3720      	adds	r7, #32
 80077dc:	46bd      	mov	sp, r7
 80077de:	bd80      	pop	{r7, pc}
 80077e0:	08007431 	.word	0x08007431

080077e4 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80077e4:	b580      	push	{r7, lr}
 80077e6:	b08a      	sub	sp, #40	; 0x28
 80077e8:	af00      	add	r7, sp, #0
 80077ea:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80077f2:	847b      	strh	r3, [r7, #34]	; 0x22
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	69db      	ldr	r3, [r3, #28]
 80077fa:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	61fb      	str	r3, [r7, #28]
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	689b      	ldr	r3, [r3, #8]
 800780a:	61bb      	str	r3, [r7, #24]

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007812:	2b22      	cmp	r3, #34	; 0x22
 8007814:	f040 80da 	bne.w	80079cc <UART_RxISR_16BIT_FIFOEN+0x1e8>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800781e:	82fb      	strh	r3, [r7, #22]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8007820:	e0aa      	b.n	8007978 <UART_RxISR_16BIT_FIFOEN+0x194>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007828:	82bb      	strh	r3, [r7, #20]
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800782e:	613b      	str	r3, [r7, #16]
      *tmp = (uint16_t)(uhdata & uhMask);
 8007830:	8aba      	ldrh	r2, [r7, #20]
 8007832:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8007834:	4013      	ands	r3, r2
 8007836:	b29a      	uxth	r2, r3
 8007838:	693b      	ldr	r3, [r7, #16]
 800783a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007840:	1c9a      	adds	r2, r3, #2
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800784c:	b29b      	uxth	r3, r3
 800784e:	3b01      	subs	r3, #1
 8007850:	b29a      	uxth	r2, r3
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	69db      	ldr	r3, [r3, #28]
 800785e:	627b      	str	r3, [r7, #36]	; 0x24

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8007860:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007862:	f003 0307 	and.w	r3, r3, #7
 8007866:	2b00      	cmp	r3, #0
 8007868:	d04d      	beq.n	8007906 <UART_RxISR_16BIT_FIFOEN+0x122>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800786a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800786c:	f003 0301 	and.w	r3, r3, #1
 8007870:	2b00      	cmp	r3, #0
 8007872:	d010      	beq.n	8007896 <UART_RxISR_16BIT_FIFOEN+0xb2>
 8007874:	69fb      	ldr	r3, [r7, #28]
 8007876:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800787a:	2b00      	cmp	r3, #0
 800787c:	d00b      	beq.n	8007896 <UART_RxISR_16BIT_FIFOEN+0xb2>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	2201      	movs	r2, #1
 8007884:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800788c:	f043 0201 	orr.w	r2, r3, #1
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007896:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007898:	f003 0302 	and.w	r3, r3, #2
 800789c:	2b00      	cmp	r3, #0
 800789e:	d010      	beq.n	80078c2 <UART_RxISR_16BIT_FIFOEN+0xde>
 80078a0:	69bb      	ldr	r3, [r7, #24]
 80078a2:	f003 0301 	and.w	r3, r3, #1
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	d00b      	beq.n	80078c2 <UART_RxISR_16BIT_FIFOEN+0xde>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	2202      	movs	r2, #2
 80078b0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80078b8:	f043 0204 	orr.w	r2, r3, #4
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80078c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078c4:	f003 0304 	and.w	r3, r3, #4
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	d010      	beq.n	80078ee <UART_RxISR_16BIT_FIFOEN+0x10a>
 80078cc:	69bb      	ldr	r3, [r7, #24]
 80078ce:	f003 0301 	and.w	r3, r3, #1
 80078d2:	2b00      	cmp	r3, #0
 80078d4:	d00b      	beq.n	80078ee <UART_RxISR_16BIT_FIFOEN+0x10a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	2204      	movs	r2, #4
 80078dc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80078e4:	f043 0202 	orr.w	r2, r3, #2
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	d006      	beq.n	8007906 <UART_RxISR_16BIT_FIFOEN+0x122>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80078f8:	6878      	ldr	r0, [r7, #4]
 80078fa:	f7ff f82b 	bl	8006954 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	2200      	movs	r2, #0
 8007902:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800790c:	b29b      	uxth	r3, r3
 800790e:	2b00      	cmp	r3, #0
 8007910:	d132      	bne.n	8007978 <UART_RxISR_16BIT_FIFOEN+0x194>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	681a      	ldr	r2, [r3, #0]
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007920:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	689b      	ldr	r3, [r3, #8]
 8007928:	687a      	ldr	r2, [r7, #4]
 800792a:	6812      	ldr	r2, [r2, #0]
 800792c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007930:	f023 0301 	bic.w	r3, r3, #1
 8007934:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	2220      	movs	r2, #32
 800793a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	2200      	movs	r2, #0
 8007942:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007948:	2b01      	cmp	r3, #1
 800794a:	d10f      	bne.n	800796c <UART_RxISR_16BIT_FIFOEN+0x188>
        {
          /* Disable IDLE interrupt */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	681a      	ldr	r2, [r3, #0]
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	f022 0210 	bic.w	r2, r2, #16
 800795a:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007962:	4619      	mov	r1, r3
 8007964:	6878      	ldr	r0, [r7, #4]
 8007966:	f7fe ffff 	bl	8006968 <HAL_UARTEx_RxEventCallback>
 800796a:	e002      	b.n	8007972 <UART_RxISR_16BIT_FIFOEN+0x18e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800796c:	6878      	ldr	r0, [r7, #4]
 800796e:	f7f8 ff9f 	bl	80008b0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	2200      	movs	r2, #0
 8007976:	66da      	str	r2, [r3, #108]	; 0x6c
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8007978:	8afb      	ldrh	r3, [r7, #22]
 800797a:	2b00      	cmp	r3, #0
 800797c:	d005      	beq.n	800798a <UART_RxISR_16BIT_FIFOEN+0x1a6>
 800797e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007980:	f003 0320 	and.w	r3, r3, #32
 8007984:	2b00      	cmp	r3, #0
 8007986:	f47f af4c 	bne.w	8007822 <UART_RxISR_16BIT_FIFOEN+0x3e>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007990:	81fb      	strh	r3, [r7, #14]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8007992:	89fb      	ldrh	r3, [r7, #14]
 8007994:	2b00      	cmp	r3, #0
 8007996:	d021      	beq.n	80079dc <UART_RxISR_16BIT_FIFOEN+0x1f8>
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800799e:	89fa      	ldrh	r2, [r7, #14]
 80079a0:	429a      	cmp	r2, r3
 80079a2:	d21b      	bcs.n	80079dc <UART_RxISR_16BIT_FIFOEN+0x1f8>
    {
      /* Disable the UART RXFT interrupt*/
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	689a      	ldr	r2, [r3, #8]
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 80079b2:	609a      	str	r2, [r3, #8]

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	4a0b      	ldr	r2, [pc, #44]	; (80079e4 <UART_RxISR_16BIT_FIFOEN+0x200>)
 80079b8:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	681a      	ldr	r2, [r3, #0]
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	f042 0220 	orr.w	r2, r2, #32
 80079c8:	601a      	str	r2, [r3, #0]
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80079ca:	e007      	b.n	80079dc <UART_RxISR_16BIT_FIFOEN+0x1f8>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	699a      	ldr	r2, [r3, #24]
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	f042 0208 	orr.w	r2, r2, #8
 80079da:	619a      	str	r2, [r3, #24]
}
 80079dc:	bf00      	nop
 80079de:	3728      	adds	r7, #40	; 0x28
 80079e0:	46bd      	mov	sp, r7
 80079e2:	bd80      	pop	{r7, pc}
 80079e4:	08007509 	.word	0x08007509

080079e8 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80079e8:	b480      	push	{r7}
 80079ea:	b083      	sub	sp, #12
 80079ec:	af00      	add	r7, sp, #0
 80079ee:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80079f0:	bf00      	nop
 80079f2:	370c      	adds	r7, #12
 80079f4:	46bd      	mov	sp, r7
 80079f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079fa:	4770      	bx	lr

080079fc <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80079fc:	b480      	push	{r7}
 80079fe:	b083      	sub	sp, #12
 8007a00:	af00      	add	r7, sp, #0
 8007a02:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8007a04:	bf00      	nop
 8007a06:	370c      	adds	r7, #12
 8007a08:	46bd      	mov	sp, r7
 8007a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a0e:	4770      	bx	lr

08007a10 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8007a10:	b480      	push	{r7}
 8007a12:	b083      	sub	sp, #12
 8007a14:	af00      	add	r7, sp, #0
 8007a16:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8007a18:	bf00      	nop
 8007a1a:	370c      	adds	r7, #12
 8007a1c:	46bd      	mov	sp, r7
 8007a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a22:	4770      	bx	lr

08007a24 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8007a24:	b480      	push	{r7}
 8007a26:	b085      	sub	sp, #20
 8007a28:	af00      	add	r7, sp, #0
 8007a2a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007a32:	2b01      	cmp	r3, #1
 8007a34:	d101      	bne.n	8007a3a <HAL_UARTEx_DisableFifoMode+0x16>
 8007a36:	2302      	movs	r3, #2
 8007a38:	e027      	b.n	8007a8a <HAL_UARTEx_DisableFifoMode+0x66>
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	2201      	movs	r2, #1
 8007a3e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	2224      	movs	r2, #36	; 0x24
 8007a46:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	681a      	ldr	r2, [r3, #0]
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	f022 0201 	bic.w	r2, r2, #1
 8007a60:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007a62:	68fb      	ldr	r3, [r7, #12]
 8007a64:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8007a68:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	2200      	movs	r2, #0
 8007a6e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	68fa      	ldr	r2, [r7, #12]
 8007a76:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	2220      	movs	r2, #32
 8007a7c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	2200      	movs	r2, #0
 8007a84:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007a88:	2300      	movs	r3, #0
}
 8007a8a:	4618      	mov	r0, r3
 8007a8c:	3714      	adds	r7, #20
 8007a8e:	46bd      	mov	sp, r7
 8007a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a94:	4770      	bx	lr

08007a96 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007a96:	b580      	push	{r7, lr}
 8007a98:	b084      	sub	sp, #16
 8007a9a:	af00      	add	r7, sp, #0
 8007a9c:	6078      	str	r0, [r7, #4]
 8007a9e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007aa6:	2b01      	cmp	r3, #1
 8007aa8:	d101      	bne.n	8007aae <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8007aaa:	2302      	movs	r3, #2
 8007aac:	e02d      	b.n	8007b0a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	2201      	movs	r2, #1
 8007ab2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	2224      	movs	r2, #36	; 0x24
 8007aba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	681a      	ldr	r2, [r3, #0]
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	f022 0201 	bic.w	r2, r2, #1
 8007ad4:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	689b      	ldr	r3, [r3, #8]
 8007adc:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	683a      	ldr	r2, [r7, #0]
 8007ae6:	430a      	orrs	r2, r1
 8007ae8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007aea:	6878      	ldr	r0, [r7, #4]
 8007aec:	f000 f850 	bl	8007b90 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	68fa      	ldr	r2, [r7, #12]
 8007af6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	2220      	movs	r2, #32
 8007afc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	2200      	movs	r2, #0
 8007b04:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007b08:	2300      	movs	r3, #0
}
 8007b0a:	4618      	mov	r0, r3
 8007b0c:	3710      	adds	r7, #16
 8007b0e:	46bd      	mov	sp, r7
 8007b10:	bd80      	pop	{r7, pc}

08007b12 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007b12:	b580      	push	{r7, lr}
 8007b14:	b084      	sub	sp, #16
 8007b16:	af00      	add	r7, sp, #0
 8007b18:	6078      	str	r0, [r7, #4]
 8007b1a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007b22:	2b01      	cmp	r3, #1
 8007b24:	d101      	bne.n	8007b2a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007b26:	2302      	movs	r3, #2
 8007b28:	e02d      	b.n	8007b86 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	2201      	movs	r2, #1
 8007b2e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	2224      	movs	r2, #36	; 0x24
 8007b36:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	681a      	ldr	r2, [r3, #0]
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	f022 0201 	bic.w	r2, r2, #1
 8007b50:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	689b      	ldr	r3, [r3, #8]
 8007b58:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	683a      	ldr	r2, [r7, #0]
 8007b62:	430a      	orrs	r2, r1
 8007b64:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007b66:	6878      	ldr	r0, [r7, #4]
 8007b68:	f000 f812 	bl	8007b90 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	68fa      	ldr	r2, [r7, #12]
 8007b72:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	2220      	movs	r2, #32
 8007b78:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	2200      	movs	r2, #0
 8007b80:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007b84:	2300      	movs	r3, #0
}
 8007b86:	4618      	mov	r0, r3
 8007b88:	3710      	adds	r7, #16
 8007b8a:	46bd      	mov	sp, r7
 8007b8c:	bd80      	pop	{r7, pc}
	...

08007b90 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007b90:	b480      	push	{r7}
 8007b92:	b085      	sub	sp, #20
 8007b94:	af00      	add	r7, sp, #0
 8007b96:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007b9c:	2b00      	cmp	r3, #0
 8007b9e:	d108      	bne.n	8007bb2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	2201      	movs	r2, #1
 8007ba4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	2201      	movs	r2, #1
 8007bac:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007bb0:	e031      	b.n	8007c16 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8007bb2:	2308      	movs	r3, #8
 8007bb4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8007bb6:	2308      	movs	r3, #8
 8007bb8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	689b      	ldr	r3, [r3, #8]
 8007bc0:	0e5b      	lsrs	r3, r3, #25
 8007bc2:	b2db      	uxtb	r3, r3
 8007bc4:	f003 0307 	and.w	r3, r3, #7
 8007bc8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	689b      	ldr	r3, [r3, #8]
 8007bd0:	0f5b      	lsrs	r3, r3, #29
 8007bd2:	b2db      	uxtb	r3, r3
 8007bd4:	f003 0307 	and.w	r3, r3, #7
 8007bd8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007bda:	7bbb      	ldrb	r3, [r7, #14]
 8007bdc:	7b3a      	ldrb	r2, [r7, #12]
 8007bde:	4911      	ldr	r1, [pc, #68]	; (8007c24 <UARTEx_SetNbDataToProcess+0x94>)
 8007be0:	5c8a      	ldrb	r2, [r1, r2]
 8007be2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8007be6:	7b3a      	ldrb	r2, [r7, #12]
 8007be8:	490f      	ldr	r1, [pc, #60]	; (8007c28 <UARTEx_SetNbDataToProcess+0x98>)
 8007bea:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007bec:	fb93 f3f2 	sdiv	r3, r3, r2
 8007bf0:	b29a      	uxth	r2, r3
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007bf8:	7bfb      	ldrb	r3, [r7, #15]
 8007bfa:	7b7a      	ldrb	r2, [r7, #13]
 8007bfc:	4909      	ldr	r1, [pc, #36]	; (8007c24 <UARTEx_SetNbDataToProcess+0x94>)
 8007bfe:	5c8a      	ldrb	r2, [r1, r2]
 8007c00:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8007c04:	7b7a      	ldrb	r2, [r7, #13]
 8007c06:	4908      	ldr	r1, [pc, #32]	; (8007c28 <UARTEx_SetNbDataToProcess+0x98>)
 8007c08:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007c0a:	fb93 f3f2 	sdiv	r3, r3, r2
 8007c0e:	b29a      	uxth	r2, r3
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8007c16:	bf00      	nop
 8007c18:	3714      	adds	r7, #20
 8007c1a:	46bd      	mov	sp, r7
 8007c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c20:	4770      	bx	lr
 8007c22:	bf00      	nop
 8007c24:	08007d98 	.word	0x08007d98
 8007c28:	08007da0 	.word	0x08007da0

08007c2c <__libc_init_array>:
 8007c2c:	b570      	push	{r4, r5, r6, lr}
 8007c2e:	4d0d      	ldr	r5, [pc, #52]	; (8007c64 <__libc_init_array+0x38>)
 8007c30:	4c0d      	ldr	r4, [pc, #52]	; (8007c68 <__libc_init_array+0x3c>)
 8007c32:	1b64      	subs	r4, r4, r5
 8007c34:	10a4      	asrs	r4, r4, #2
 8007c36:	2600      	movs	r6, #0
 8007c38:	42a6      	cmp	r6, r4
 8007c3a:	d109      	bne.n	8007c50 <__libc_init_array+0x24>
 8007c3c:	4d0b      	ldr	r5, [pc, #44]	; (8007c6c <__libc_init_array+0x40>)
 8007c3e:	4c0c      	ldr	r4, [pc, #48]	; (8007c70 <__libc_init_array+0x44>)
 8007c40:	f000 f820 	bl	8007c84 <_init>
 8007c44:	1b64      	subs	r4, r4, r5
 8007c46:	10a4      	asrs	r4, r4, #2
 8007c48:	2600      	movs	r6, #0
 8007c4a:	42a6      	cmp	r6, r4
 8007c4c:	d105      	bne.n	8007c5a <__libc_init_array+0x2e>
 8007c4e:	bd70      	pop	{r4, r5, r6, pc}
 8007c50:	f855 3b04 	ldr.w	r3, [r5], #4
 8007c54:	4798      	blx	r3
 8007c56:	3601      	adds	r6, #1
 8007c58:	e7ee      	b.n	8007c38 <__libc_init_array+0xc>
 8007c5a:	f855 3b04 	ldr.w	r3, [r5], #4
 8007c5e:	4798      	blx	r3
 8007c60:	3601      	adds	r6, #1
 8007c62:	e7f2      	b.n	8007c4a <__libc_init_array+0x1e>
 8007c64:	08007db0 	.word	0x08007db0
 8007c68:	08007db0 	.word	0x08007db0
 8007c6c:	08007db0 	.word	0x08007db0
 8007c70:	08007db4 	.word	0x08007db4

08007c74 <memset>:
 8007c74:	4402      	add	r2, r0
 8007c76:	4603      	mov	r3, r0
 8007c78:	4293      	cmp	r3, r2
 8007c7a:	d100      	bne.n	8007c7e <memset+0xa>
 8007c7c:	4770      	bx	lr
 8007c7e:	f803 1b01 	strb.w	r1, [r3], #1
 8007c82:	e7f9      	b.n	8007c78 <memset+0x4>

08007c84 <_init>:
 8007c84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c86:	bf00      	nop
 8007c88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007c8a:	bc08      	pop	{r3}
 8007c8c:	469e      	mov	lr, r3
 8007c8e:	4770      	bx	lr

08007c90 <_fini>:
 8007c90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c92:	bf00      	nop
 8007c94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007c96:	bc08      	pop	{r3}
 8007c98:	469e      	mov	lr, r3
 8007c9a:	4770      	bx	lr
