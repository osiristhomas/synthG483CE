
G483CE_2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000055d0  080001d8  080001d8  000101d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000120  080057a8  080057a8  000157a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080058c8  080058c8  00020414  2**0
                  CONTENTS
  4 .ARM          00000008  080058c8  080058c8  000158c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080058d0  080058d0  00020414  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080058d0  080058d0  000158d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080058d4  080058d4  000158d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000414  20000000  080058d8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000368  20000414  08005cec  00020414  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000077c  08005cec  0002077c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020414  2**0
                  CONTENTS, READONLY
 12 .debug_info   000219cc  00000000  00000000  00020444  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000038e7  00000000  00000000  00041e10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    00017b04  00000000  00000000  000456f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001010  00000000  00000000  0005d200  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000030f0  00000000  00000000  0005e210  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00022d5b  00000000  00000000  00061300  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00020d8f  00000000  00000000  0008405b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000eefb2  00000000  00000000  000a4dea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  00193d9c  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003bbc  00000000  00000000  00193df0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000414 	.word	0x20000414
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08005790 	.word	0x08005790

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000418 	.word	0x20000418
 8000214:	08005790 	.word	0x08005790

08000218 <__aeabi_drsub>:
 8000218:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800021c:	e002      	b.n	8000224 <__adddf3>
 800021e:	bf00      	nop

08000220 <__aeabi_dsub>:
 8000220:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000224 <__adddf3>:
 8000224:	b530      	push	{r4, r5, lr}
 8000226:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800022a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800022e:	ea94 0f05 	teq	r4, r5
 8000232:	bf08      	it	eq
 8000234:	ea90 0f02 	teqeq	r0, r2
 8000238:	bf1f      	itttt	ne
 800023a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800023e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000242:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000246:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800024a:	f000 80e2 	beq.w	8000412 <__adddf3+0x1ee>
 800024e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000252:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000256:	bfb8      	it	lt
 8000258:	426d      	neglt	r5, r5
 800025a:	dd0c      	ble.n	8000276 <__adddf3+0x52>
 800025c:	442c      	add	r4, r5
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	ea82 0000 	eor.w	r0, r2, r0
 800026a:	ea83 0101 	eor.w	r1, r3, r1
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	2d36      	cmp	r5, #54	; 0x36
 8000278:	bf88      	it	hi
 800027a:	bd30      	pophi	{r4, r5, pc}
 800027c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000280:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000284:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000288:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x70>
 800028e:	4240      	negs	r0, r0
 8000290:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000294:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000298:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800029c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a0:	d002      	beq.n	80002a8 <__adddf3+0x84>
 80002a2:	4252      	negs	r2, r2
 80002a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a8:	ea94 0f05 	teq	r4, r5
 80002ac:	f000 80a7 	beq.w	80003fe <__adddf3+0x1da>
 80002b0:	f1a4 0401 	sub.w	r4, r4, #1
 80002b4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b8:	db0d      	blt.n	80002d6 <__adddf3+0xb2>
 80002ba:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002be:	fa22 f205 	lsr.w	r2, r2, r5
 80002c2:	1880      	adds	r0, r0, r2
 80002c4:	f141 0100 	adc.w	r1, r1, #0
 80002c8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002cc:	1880      	adds	r0, r0, r2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	4159      	adcs	r1, r3
 80002d4:	e00e      	b.n	80002f4 <__adddf3+0xd0>
 80002d6:	f1a5 0520 	sub.w	r5, r5, #32
 80002da:	f10e 0e20 	add.w	lr, lr, #32
 80002de:	2a01      	cmp	r2, #1
 80002e0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002e4:	bf28      	it	cs
 80002e6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ea:	fa43 f305 	asr.w	r3, r3, r5
 80002ee:	18c0      	adds	r0, r0, r3
 80002f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002f4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002f8:	d507      	bpl.n	800030a <__adddf3+0xe6>
 80002fa:	f04f 0e00 	mov.w	lr, #0
 80002fe:	f1dc 0c00 	rsbs	ip, ip, #0
 8000302:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000306:	eb6e 0101 	sbc.w	r1, lr, r1
 800030a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800030e:	d31b      	bcc.n	8000348 <__adddf3+0x124>
 8000310:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000314:	d30c      	bcc.n	8000330 <__adddf3+0x10c>
 8000316:	0849      	lsrs	r1, r1, #1
 8000318:	ea5f 0030 	movs.w	r0, r0, rrx
 800031c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000320:	f104 0401 	add.w	r4, r4, #1
 8000324:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000328:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800032c:	f080 809a 	bcs.w	8000464 <__adddf3+0x240>
 8000330:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	ea41 0105 	orr.w	r1, r1, r5
 8000346:	bd30      	pop	{r4, r5, pc}
 8000348:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800034c:	4140      	adcs	r0, r0
 800034e:	eb41 0101 	adc.w	r1, r1, r1
 8000352:	3c01      	subs	r4, #1
 8000354:	bf28      	it	cs
 8000356:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800035a:	d2e9      	bcs.n	8000330 <__adddf3+0x10c>
 800035c:	f091 0f00 	teq	r1, #0
 8000360:	bf04      	itt	eq
 8000362:	4601      	moveq	r1, r0
 8000364:	2000      	moveq	r0, #0
 8000366:	fab1 f381 	clz	r3, r1
 800036a:	bf08      	it	eq
 800036c:	3320      	addeq	r3, #32
 800036e:	f1a3 030b 	sub.w	r3, r3, #11
 8000372:	f1b3 0220 	subs.w	r2, r3, #32
 8000376:	da0c      	bge.n	8000392 <__adddf3+0x16e>
 8000378:	320c      	adds	r2, #12
 800037a:	dd08      	ble.n	800038e <__adddf3+0x16a>
 800037c:	f102 0c14 	add.w	ip, r2, #20
 8000380:	f1c2 020c 	rsb	r2, r2, #12
 8000384:	fa01 f00c 	lsl.w	r0, r1, ip
 8000388:	fa21 f102 	lsr.w	r1, r1, r2
 800038c:	e00c      	b.n	80003a8 <__adddf3+0x184>
 800038e:	f102 0214 	add.w	r2, r2, #20
 8000392:	bfd8      	it	le
 8000394:	f1c2 0c20 	rsble	ip, r2, #32
 8000398:	fa01 f102 	lsl.w	r1, r1, r2
 800039c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a0:	bfdc      	itt	le
 80003a2:	ea41 010c 	orrle.w	r1, r1, ip
 80003a6:	4090      	lslle	r0, r2
 80003a8:	1ae4      	subs	r4, r4, r3
 80003aa:	bfa2      	ittt	ge
 80003ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b0:	4329      	orrge	r1, r5
 80003b2:	bd30      	popge	{r4, r5, pc}
 80003b4:	ea6f 0404 	mvn.w	r4, r4
 80003b8:	3c1f      	subs	r4, #31
 80003ba:	da1c      	bge.n	80003f6 <__adddf3+0x1d2>
 80003bc:	340c      	adds	r4, #12
 80003be:	dc0e      	bgt.n	80003de <__adddf3+0x1ba>
 80003c0:	f104 0414 	add.w	r4, r4, #20
 80003c4:	f1c4 0220 	rsb	r2, r4, #32
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f302 	lsl.w	r3, r1, r2
 80003d0:	ea40 0003 	orr.w	r0, r0, r3
 80003d4:	fa21 f304 	lsr.w	r3, r1, r4
 80003d8:	ea45 0103 	orr.w	r1, r5, r3
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	f1c4 040c 	rsb	r4, r4, #12
 80003e2:	f1c4 0220 	rsb	r2, r4, #32
 80003e6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ea:	fa01 f304 	lsl.w	r3, r1, r4
 80003ee:	ea40 0003 	orr.w	r0, r0, r3
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	fa21 f004 	lsr.w	r0, r1, r4
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f094 0f00 	teq	r4, #0
 8000402:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000406:	bf06      	itte	eq
 8000408:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800040c:	3401      	addeq	r4, #1
 800040e:	3d01      	subne	r5, #1
 8000410:	e74e      	b.n	80002b0 <__adddf3+0x8c>
 8000412:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000416:	bf18      	it	ne
 8000418:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800041c:	d029      	beq.n	8000472 <__adddf3+0x24e>
 800041e:	ea94 0f05 	teq	r4, r5
 8000422:	bf08      	it	eq
 8000424:	ea90 0f02 	teqeq	r0, r2
 8000428:	d005      	beq.n	8000436 <__adddf3+0x212>
 800042a:	ea54 0c00 	orrs.w	ip, r4, r0
 800042e:	bf04      	itt	eq
 8000430:	4619      	moveq	r1, r3
 8000432:	4610      	moveq	r0, r2
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	ea91 0f03 	teq	r1, r3
 800043a:	bf1e      	ittt	ne
 800043c:	2100      	movne	r1, #0
 800043e:	2000      	movne	r0, #0
 8000440:	bd30      	popne	{r4, r5, pc}
 8000442:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000446:	d105      	bne.n	8000454 <__adddf3+0x230>
 8000448:	0040      	lsls	r0, r0, #1
 800044a:	4149      	adcs	r1, r1
 800044c:	bf28      	it	cs
 800044e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000452:	bd30      	pop	{r4, r5, pc}
 8000454:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000458:	bf3c      	itt	cc
 800045a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800045e:	bd30      	popcc	{r4, r5, pc}
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000476:	bf1a      	itte	ne
 8000478:	4619      	movne	r1, r3
 800047a:	4610      	movne	r0, r2
 800047c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000480:	bf1c      	itt	ne
 8000482:	460b      	movne	r3, r1
 8000484:	4602      	movne	r2, r0
 8000486:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800048a:	bf06      	itte	eq
 800048c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000490:	ea91 0f03 	teqeq	r1, r3
 8000494:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	bf00      	nop

0800049c <__aeabi_ui2d>:
 800049c:	f090 0f00 	teq	r0, #0
 80004a0:	bf04      	itt	eq
 80004a2:	2100      	moveq	r1, #0
 80004a4:	4770      	bxeq	lr
 80004a6:	b530      	push	{r4, r5, lr}
 80004a8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004ac:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004b0:	f04f 0500 	mov.w	r5, #0
 80004b4:	f04f 0100 	mov.w	r1, #0
 80004b8:	e750      	b.n	800035c <__adddf3+0x138>
 80004ba:	bf00      	nop

080004bc <__aeabi_i2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004d4:	bf48      	it	mi
 80004d6:	4240      	negmi	r0, r0
 80004d8:	f04f 0100 	mov.w	r1, #0
 80004dc:	e73e      	b.n	800035c <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_f2d>:
 80004e0:	0042      	lsls	r2, r0, #1
 80004e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004e6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ee:	bf1f      	itttt	ne
 80004f0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004f4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004f8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004fc:	4770      	bxne	lr
 80004fe:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000502:	bf08      	it	eq
 8000504:	4770      	bxeq	lr
 8000506:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800050a:	bf04      	itt	eq
 800050c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000520:	e71c      	b.n	800035c <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_ul2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	e00a      	b.n	800054a <__aeabi_l2d+0x16>

08000534 <__aeabi_l2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000542:	d502      	bpl.n	800054a <__aeabi_l2d+0x16>
 8000544:	4240      	negs	r0, r0
 8000546:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800054a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800054e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000552:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000556:	f43f aed8 	beq.w	800030a <__adddf3+0xe6>
 800055a:	f04f 0203 	mov.w	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000572:	f1c2 0320 	rsb	r3, r2, #32
 8000576:	fa00 fc03 	lsl.w	ip, r0, r3
 800057a:	fa20 f002 	lsr.w	r0, r0, r2
 800057e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000582:	ea40 000e 	orr.w	r0, r0, lr
 8000586:	fa21 f102 	lsr.w	r1, r1, r2
 800058a:	4414      	add	r4, r2
 800058c:	e6bd      	b.n	800030a <__adddf3+0xe6>
 800058e:	bf00      	nop

08000590 <__aeabi_dmul>:
 8000590:	b570      	push	{r4, r5, r6, lr}
 8000592:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000596:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800059a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800059e:	bf1d      	ittte	ne
 80005a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005a4:	ea94 0f0c 	teqne	r4, ip
 80005a8:	ea95 0f0c 	teqne	r5, ip
 80005ac:	f000 f8de 	bleq	800076c <__aeabi_dmul+0x1dc>
 80005b0:	442c      	add	r4, r5
 80005b2:	ea81 0603 	eor.w	r6, r1, r3
 80005b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005c2:	bf18      	it	ne
 80005c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005cc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005d0:	d038      	beq.n	8000644 <__aeabi_dmul+0xb4>
 80005d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005de:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005e6:	f04f 0600 	mov.w	r6, #0
 80005ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ee:	f09c 0f00 	teq	ip, #0
 80005f2:	bf18      	it	ne
 80005f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005fc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000600:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000604:	d204      	bcs.n	8000610 <__aeabi_dmul+0x80>
 8000606:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800060a:	416d      	adcs	r5, r5
 800060c:	eb46 0606 	adc.w	r6, r6, r6
 8000610:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000614:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000618:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800061c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000620:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000624:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000628:	bf88      	it	hi
 800062a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800062e:	d81e      	bhi.n	800066e <__aeabi_dmul+0xde>
 8000630:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000634:	bf08      	it	eq
 8000636:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800063a:	f150 0000 	adcs.w	r0, r0, #0
 800063e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000642:	bd70      	pop	{r4, r5, r6, pc}
 8000644:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000648:	ea46 0101 	orr.w	r1, r6, r1
 800064c:	ea40 0002 	orr.w	r0, r0, r2
 8000650:	ea81 0103 	eor.w	r1, r1, r3
 8000654:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000658:	bfc2      	ittt	gt
 800065a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800065e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000662:	bd70      	popgt	{r4, r5, r6, pc}
 8000664:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000668:	f04f 0e00 	mov.w	lr, #0
 800066c:	3c01      	subs	r4, #1
 800066e:	f300 80ab 	bgt.w	80007c8 <__aeabi_dmul+0x238>
 8000672:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000676:	bfde      	ittt	le
 8000678:	2000      	movle	r0, #0
 800067a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800067e:	bd70      	pople	{r4, r5, r6, pc}
 8000680:	f1c4 0400 	rsb	r4, r4, #0
 8000684:	3c20      	subs	r4, #32
 8000686:	da35      	bge.n	80006f4 <__aeabi_dmul+0x164>
 8000688:	340c      	adds	r4, #12
 800068a:	dc1b      	bgt.n	80006c4 <__aeabi_dmul+0x134>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f305 	lsl.w	r3, r0, r5
 8000698:	fa20 f004 	lsr.w	r0, r0, r4
 800069c:	fa01 f205 	lsl.w	r2, r1, r5
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b0:	fa21 f604 	lsr.w	r6, r1, r4
 80006b4:	eb42 0106 	adc.w	r1, r2, r6
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 040c 	rsb	r4, r4, #12
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f304 	lsl.w	r3, r0, r4
 80006d0:	fa20 f005 	lsr.w	r0, r0, r5
 80006d4:	fa01 f204 	lsl.w	r2, r1, r4
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e4:	f141 0100 	adc.w	r1, r1, #0
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f1c4 0520 	rsb	r5, r4, #32
 80006f8:	fa00 f205 	lsl.w	r2, r0, r5
 80006fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000700:	fa20 f304 	lsr.w	r3, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea43 0302 	orr.w	r3, r3, r2
 800070c:	fa21 f004 	lsr.w	r0, r1, r4
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	fa21 f204 	lsr.w	r2, r1, r4
 8000718:	ea20 0002 	bic.w	r0, r0, r2
 800071c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f094 0f00 	teq	r4, #0
 8000730:	d10f      	bne.n	8000752 <__aeabi_dmul+0x1c2>
 8000732:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000736:	0040      	lsls	r0, r0, #1
 8000738:	eb41 0101 	adc.w	r1, r1, r1
 800073c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000740:	bf08      	it	eq
 8000742:	3c01      	subeq	r4, #1
 8000744:	d0f7      	beq.n	8000736 <__aeabi_dmul+0x1a6>
 8000746:	ea41 0106 	orr.w	r1, r1, r6
 800074a:	f095 0f00 	teq	r5, #0
 800074e:	bf18      	it	ne
 8000750:	4770      	bxne	lr
 8000752:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000756:	0052      	lsls	r2, r2, #1
 8000758:	eb43 0303 	adc.w	r3, r3, r3
 800075c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000760:	bf08      	it	eq
 8000762:	3d01      	subeq	r5, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1c6>
 8000766:	ea43 0306 	orr.w	r3, r3, r6
 800076a:	4770      	bx	lr
 800076c:	ea94 0f0c 	teq	r4, ip
 8000770:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000774:	bf18      	it	ne
 8000776:	ea95 0f0c 	teqne	r5, ip
 800077a:	d00c      	beq.n	8000796 <__aeabi_dmul+0x206>
 800077c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000780:	bf18      	it	ne
 8000782:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000786:	d1d1      	bne.n	800072c <__aeabi_dmul+0x19c>
 8000788:	ea81 0103 	eor.w	r1, r1, r3
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000790:	f04f 0000 	mov.w	r0, #0
 8000794:	bd70      	pop	{r4, r5, r6, pc}
 8000796:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800079a:	bf06      	itte	eq
 800079c:	4610      	moveq	r0, r2
 800079e:	4619      	moveq	r1, r3
 80007a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a4:	d019      	beq.n	80007da <__aeabi_dmul+0x24a>
 80007a6:	ea94 0f0c 	teq	r4, ip
 80007aa:	d102      	bne.n	80007b2 <__aeabi_dmul+0x222>
 80007ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b0:	d113      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007b2:	ea95 0f0c 	teq	r5, ip
 80007b6:	d105      	bne.n	80007c4 <__aeabi_dmul+0x234>
 80007b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007bc:	bf1c      	itt	ne
 80007be:	4610      	movne	r0, r2
 80007c0:	4619      	movne	r1, r3
 80007c2:	d10a      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007c4:	ea81 0103 	eor.w	r1, r1, r3
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007d4:	f04f 0000 	mov.w	r0, #0
 80007d8:	bd70      	pop	{r4, r5, r6, pc}
 80007da:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007de:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007e2:	bd70      	pop	{r4, r5, r6, pc}

080007e4 <__aeabi_ddiv>:
 80007e4:	b570      	push	{r4, r5, r6, lr}
 80007e6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007ea:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007f2:	bf1d      	ittte	ne
 80007f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f8:	ea94 0f0c 	teqne	r4, ip
 80007fc:	ea95 0f0c 	teqne	r5, ip
 8000800:	f000 f8a7 	bleq	8000952 <__aeabi_ddiv+0x16e>
 8000804:	eba4 0405 	sub.w	r4, r4, r5
 8000808:	ea81 0e03 	eor.w	lr, r1, r3
 800080c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000810:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000814:	f000 8088 	beq.w	8000928 <__aeabi_ddiv+0x144>
 8000818:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800081c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000820:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000824:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000828:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800082c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000830:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000834:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000838:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800083c:	429d      	cmp	r5, r3
 800083e:	bf08      	it	eq
 8000840:	4296      	cmpeq	r6, r2
 8000842:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000846:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800084a:	d202      	bcs.n	8000852 <__aeabi_ddiv+0x6e>
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	1ab6      	subs	r6, r6, r2
 8000854:	eb65 0503 	sbc.w	r5, r5, r3
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000862:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 000c 	orrcs.w	r0, r0, ip
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008c4:	d018      	beq.n	80008f8 <__aeabi_ddiv+0x114>
 80008c6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ca:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ce:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008d2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008d6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008da:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008de:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008e2:	d1c0      	bne.n	8000866 <__aeabi_ddiv+0x82>
 80008e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008e8:	d10b      	bne.n	8000902 <__aeabi_ddiv+0x11e>
 80008ea:	ea41 0100 	orr.w	r1, r1, r0
 80008ee:	f04f 0000 	mov.w	r0, #0
 80008f2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008f6:	e7b6      	b.n	8000866 <__aeabi_ddiv+0x82>
 80008f8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008fc:	bf04      	itt	eq
 80008fe:	4301      	orreq	r1, r0
 8000900:	2000      	moveq	r0, #0
 8000902:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000906:	bf88      	it	hi
 8000908:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800090c:	f63f aeaf 	bhi.w	800066e <__aeabi_dmul+0xde>
 8000910:	ebb5 0c03 	subs.w	ip, r5, r3
 8000914:	bf04      	itt	eq
 8000916:	ebb6 0c02 	subseq.w	ip, r6, r2
 800091a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800091e:	f150 0000 	adcs.w	r0, r0, #0
 8000922:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000926:	bd70      	pop	{r4, r5, r6, pc}
 8000928:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800092c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000930:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000934:	bfc2      	ittt	gt
 8000936:	ebd4 050c 	rsbsgt	r5, r4, ip
 800093a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800093e:	bd70      	popgt	{r4, r5, r6, pc}
 8000940:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000944:	f04f 0e00 	mov.w	lr, #0
 8000948:	3c01      	subs	r4, #1
 800094a:	e690      	b.n	800066e <__aeabi_dmul+0xde>
 800094c:	ea45 0e06 	orr.w	lr, r5, r6
 8000950:	e68d      	b.n	800066e <__aeabi_dmul+0xde>
 8000952:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000956:	ea94 0f0c 	teq	r4, ip
 800095a:	bf08      	it	eq
 800095c:	ea95 0f0c 	teqeq	r5, ip
 8000960:	f43f af3b 	beq.w	80007da <__aeabi_dmul+0x24a>
 8000964:	ea94 0f0c 	teq	r4, ip
 8000968:	d10a      	bne.n	8000980 <__aeabi_ddiv+0x19c>
 800096a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800096e:	f47f af34 	bne.w	80007da <__aeabi_dmul+0x24a>
 8000972:	ea95 0f0c 	teq	r5, ip
 8000976:	f47f af25 	bne.w	80007c4 <__aeabi_dmul+0x234>
 800097a:	4610      	mov	r0, r2
 800097c:	4619      	mov	r1, r3
 800097e:	e72c      	b.n	80007da <__aeabi_dmul+0x24a>
 8000980:	ea95 0f0c 	teq	r5, ip
 8000984:	d106      	bne.n	8000994 <__aeabi_ddiv+0x1b0>
 8000986:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800098a:	f43f aefd 	beq.w	8000788 <__aeabi_dmul+0x1f8>
 800098e:	4610      	mov	r0, r2
 8000990:	4619      	mov	r1, r3
 8000992:	e722      	b.n	80007da <__aeabi_dmul+0x24a>
 8000994:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800099e:	f47f aec5 	bne.w	800072c <__aeabi_dmul+0x19c>
 80009a2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009a6:	f47f af0d 	bne.w	80007c4 <__aeabi_dmul+0x234>
 80009aa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ae:	f47f aeeb 	bne.w	8000788 <__aeabi_dmul+0x1f8>
 80009b2:	e712      	b.n	80007da <__aeabi_dmul+0x24a>

080009b4 <__gedf2>:
 80009b4:	f04f 3cff 	mov.w	ip, #4294967295
 80009b8:	e006      	b.n	80009c8 <__cmpdf2+0x4>
 80009ba:	bf00      	nop

080009bc <__ledf2>:
 80009bc:	f04f 0c01 	mov.w	ip, #1
 80009c0:	e002      	b.n	80009c8 <__cmpdf2+0x4>
 80009c2:	bf00      	nop

080009c4 <__cmpdf2>:
 80009c4:	f04f 0c01 	mov.w	ip, #1
 80009c8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009cc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009d0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009d8:	bf18      	it	ne
 80009da:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009de:	d01b      	beq.n	8000a18 <__cmpdf2+0x54>
 80009e0:	b001      	add	sp, #4
 80009e2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009e6:	bf0c      	ite	eq
 80009e8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ec:	ea91 0f03 	teqne	r1, r3
 80009f0:	bf02      	ittt	eq
 80009f2:	ea90 0f02 	teqeq	r0, r2
 80009f6:	2000      	moveq	r0, #0
 80009f8:	4770      	bxeq	lr
 80009fa:	f110 0f00 	cmn.w	r0, #0
 80009fe:	ea91 0f03 	teq	r1, r3
 8000a02:	bf58      	it	pl
 8000a04:	4299      	cmppl	r1, r3
 8000a06:	bf08      	it	eq
 8000a08:	4290      	cmpeq	r0, r2
 8000a0a:	bf2c      	ite	cs
 8000a0c:	17d8      	asrcs	r0, r3, #31
 8000a0e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a12:	f040 0001 	orr.w	r0, r0, #1
 8000a16:	4770      	bx	lr
 8000a18:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a1c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a20:	d102      	bne.n	8000a28 <__cmpdf2+0x64>
 8000a22:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a26:	d107      	bne.n	8000a38 <__cmpdf2+0x74>
 8000a28:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a2c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a30:	d1d6      	bne.n	80009e0 <__cmpdf2+0x1c>
 8000a32:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a36:	d0d3      	beq.n	80009e0 <__cmpdf2+0x1c>
 8000a38:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a3c:	4770      	bx	lr
 8000a3e:	bf00      	nop

08000a40 <__aeabi_cdrcmple>:
 8000a40:	4684      	mov	ip, r0
 8000a42:	4610      	mov	r0, r2
 8000a44:	4662      	mov	r2, ip
 8000a46:	468c      	mov	ip, r1
 8000a48:	4619      	mov	r1, r3
 8000a4a:	4663      	mov	r3, ip
 8000a4c:	e000      	b.n	8000a50 <__aeabi_cdcmpeq>
 8000a4e:	bf00      	nop

08000a50 <__aeabi_cdcmpeq>:
 8000a50:	b501      	push	{r0, lr}
 8000a52:	f7ff ffb7 	bl	80009c4 <__cmpdf2>
 8000a56:	2800      	cmp	r0, #0
 8000a58:	bf48      	it	mi
 8000a5a:	f110 0f00 	cmnmi.w	r0, #0
 8000a5e:	bd01      	pop	{r0, pc}

08000a60 <__aeabi_dcmpeq>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff fff4 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a68:	bf0c      	ite	eq
 8000a6a:	2001      	moveq	r0, #1
 8000a6c:	2000      	movne	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmplt>:
 8000a74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a78:	f7ff ffea 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a7c:	bf34      	ite	cc
 8000a7e:	2001      	movcc	r0, #1
 8000a80:	2000      	movcs	r0, #0
 8000a82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a86:	bf00      	nop

08000a88 <__aeabi_dcmple>:
 8000a88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a8c:	f7ff ffe0 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a90:	bf94      	ite	ls
 8000a92:	2001      	movls	r0, #1
 8000a94:	2000      	movhi	r0, #0
 8000a96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9a:	bf00      	nop

08000a9c <__aeabi_dcmpge>:
 8000a9c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa0:	f7ff ffce 	bl	8000a40 <__aeabi_cdrcmple>
 8000aa4:	bf94      	ite	ls
 8000aa6:	2001      	movls	r0, #1
 8000aa8:	2000      	movhi	r0, #0
 8000aaa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aae:	bf00      	nop

08000ab0 <__aeabi_dcmpgt>:
 8000ab0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab4:	f7ff ffc4 	bl	8000a40 <__aeabi_cdrcmple>
 8000ab8:	bf34      	ite	cc
 8000aba:	2001      	movcc	r0, #1
 8000abc:	2000      	movcs	r0, #0
 8000abe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac2:	bf00      	nop

08000ac4 <__aeabi_d2f>:
 8000ac4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ac8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000acc:	bf24      	itt	cs
 8000ace:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ad2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ad6:	d90d      	bls.n	8000af4 <__aeabi_d2f+0x30>
 8000ad8:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000adc:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000ae8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000aec:	bf08      	it	eq
 8000aee:	f020 0001 	biceq.w	r0, r0, #1
 8000af2:	4770      	bx	lr
 8000af4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000af8:	d121      	bne.n	8000b3e <__aeabi_d2f+0x7a>
 8000afa:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000afe:	bfbc      	itt	lt
 8000b00:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b04:	4770      	bxlt	lr
 8000b06:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b0a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b0e:	f1c2 0218 	rsb	r2, r2, #24
 8000b12:	f1c2 0c20 	rsb	ip, r2, #32
 8000b16:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1a:	fa20 f002 	lsr.w	r0, r0, r2
 8000b1e:	bf18      	it	ne
 8000b20:	f040 0001 	orrne.w	r0, r0, #1
 8000b24:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b28:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b2c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b30:	ea40 000c 	orr.w	r0, r0, ip
 8000b34:	fa23 f302 	lsr.w	r3, r3, r2
 8000b38:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b3c:	e7cc      	b.n	8000ad8 <__aeabi_d2f+0x14>
 8000b3e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b42:	d107      	bne.n	8000b54 <__aeabi_d2f+0x90>
 8000b44:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b48:	bf1e      	ittt	ne
 8000b4a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b4e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b52:	4770      	bxne	lr
 8000b54:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b58:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b5c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b60:	4770      	bx	lr
 8000b62:	bf00      	nop

08000b64 <__aeabi_uldivmod>:
 8000b64:	b953      	cbnz	r3, 8000b7c <__aeabi_uldivmod+0x18>
 8000b66:	b94a      	cbnz	r2, 8000b7c <__aeabi_uldivmod+0x18>
 8000b68:	2900      	cmp	r1, #0
 8000b6a:	bf08      	it	eq
 8000b6c:	2800      	cmpeq	r0, #0
 8000b6e:	bf1c      	itt	ne
 8000b70:	f04f 31ff 	movne.w	r1, #4294967295
 8000b74:	f04f 30ff 	movne.w	r0, #4294967295
 8000b78:	f000 b96e 	b.w	8000e58 <__aeabi_idiv0>
 8000b7c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b80:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b84:	f000 f806 	bl	8000b94 <__udivmoddi4>
 8000b88:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b8c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b90:	b004      	add	sp, #16
 8000b92:	4770      	bx	lr

08000b94 <__udivmoddi4>:
 8000b94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b98:	9d08      	ldr	r5, [sp, #32]
 8000b9a:	4604      	mov	r4, r0
 8000b9c:	468c      	mov	ip, r1
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	f040 8083 	bne.w	8000caa <__udivmoddi4+0x116>
 8000ba4:	428a      	cmp	r2, r1
 8000ba6:	4617      	mov	r7, r2
 8000ba8:	d947      	bls.n	8000c3a <__udivmoddi4+0xa6>
 8000baa:	fab2 f282 	clz	r2, r2
 8000bae:	b142      	cbz	r2, 8000bc2 <__udivmoddi4+0x2e>
 8000bb0:	f1c2 0020 	rsb	r0, r2, #32
 8000bb4:	fa24 f000 	lsr.w	r0, r4, r0
 8000bb8:	4091      	lsls	r1, r2
 8000bba:	4097      	lsls	r7, r2
 8000bbc:	ea40 0c01 	orr.w	ip, r0, r1
 8000bc0:	4094      	lsls	r4, r2
 8000bc2:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000bc6:	0c23      	lsrs	r3, r4, #16
 8000bc8:	fbbc f6f8 	udiv	r6, ip, r8
 8000bcc:	fa1f fe87 	uxth.w	lr, r7
 8000bd0:	fb08 c116 	mls	r1, r8, r6, ip
 8000bd4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000bd8:	fb06 f10e 	mul.w	r1, r6, lr
 8000bdc:	4299      	cmp	r1, r3
 8000bde:	d909      	bls.n	8000bf4 <__udivmoddi4+0x60>
 8000be0:	18fb      	adds	r3, r7, r3
 8000be2:	f106 30ff 	add.w	r0, r6, #4294967295
 8000be6:	f080 8119 	bcs.w	8000e1c <__udivmoddi4+0x288>
 8000bea:	4299      	cmp	r1, r3
 8000bec:	f240 8116 	bls.w	8000e1c <__udivmoddi4+0x288>
 8000bf0:	3e02      	subs	r6, #2
 8000bf2:	443b      	add	r3, r7
 8000bf4:	1a5b      	subs	r3, r3, r1
 8000bf6:	b2a4      	uxth	r4, r4
 8000bf8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000bfc:	fb08 3310 	mls	r3, r8, r0, r3
 8000c00:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c04:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c08:	45a6      	cmp	lr, r4
 8000c0a:	d909      	bls.n	8000c20 <__udivmoddi4+0x8c>
 8000c0c:	193c      	adds	r4, r7, r4
 8000c0e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c12:	f080 8105 	bcs.w	8000e20 <__udivmoddi4+0x28c>
 8000c16:	45a6      	cmp	lr, r4
 8000c18:	f240 8102 	bls.w	8000e20 <__udivmoddi4+0x28c>
 8000c1c:	3802      	subs	r0, #2
 8000c1e:	443c      	add	r4, r7
 8000c20:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c24:	eba4 040e 	sub.w	r4, r4, lr
 8000c28:	2600      	movs	r6, #0
 8000c2a:	b11d      	cbz	r5, 8000c34 <__udivmoddi4+0xa0>
 8000c2c:	40d4      	lsrs	r4, r2
 8000c2e:	2300      	movs	r3, #0
 8000c30:	e9c5 4300 	strd	r4, r3, [r5]
 8000c34:	4631      	mov	r1, r6
 8000c36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c3a:	b902      	cbnz	r2, 8000c3e <__udivmoddi4+0xaa>
 8000c3c:	deff      	udf	#255	; 0xff
 8000c3e:	fab2 f282 	clz	r2, r2
 8000c42:	2a00      	cmp	r2, #0
 8000c44:	d150      	bne.n	8000ce8 <__udivmoddi4+0x154>
 8000c46:	1bcb      	subs	r3, r1, r7
 8000c48:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c4c:	fa1f f887 	uxth.w	r8, r7
 8000c50:	2601      	movs	r6, #1
 8000c52:	fbb3 fcfe 	udiv	ip, r3, lr
 8000c56:	0c21      	lsrs	r1, r4, #16
 8000c58:	fb0e 331c 	mls	r3, lr, ip, r3
 8000c5c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c60:	fb08 f30c 	mul.w	r3, r8, ip
 8000c64:	428b      	cmp	r3, r1
 8000c66:	d907      	bls.n	8000c78 <__udivmoddi4+0xe4>
 8000c68:	1879      	adds	r1, r7, r1
 8000c6a:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000c6e:	d202      	bcs.n	8000c76 <__udivmoddi4+0xe2>
 8000c70:	428b      	cmp	r3, r1
 8000c72:	f200 80e9 	bhi.w	8000e48 <__udivmoddi4+0x2b4>
 8000c76:	4684      	mov	ip, r0
 8000c78:	1ac9      	subs	r1, r1, r3
 8000c7a:	b2a3      	uxth	r3, r4
 8000c7c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000c80:	fb0e 1110 	mls	r1, lr, r0, r1
 8000c84:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000c88:	fb08 f800 	mul.w	r8, r8, r0
 8000c8c:	45a0      	cmp	r8, r4
 8000c8e:	d907      	bls.n	8000ca0 <__udivmoddi4+0x10c>
 8000c90:	193c      	adds	r4, r7, r4
 8000c92:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c96:	d202      	bcs.n	8000c9e <__udivmoddi4+0x10a>
 8000c98:	45a0      	cmp	r8, r4
 8000c9a:	f200 80d9 	bhi.w	8000e50 <__udivmoddi4+0x2bc>
 8000c9e:	4618      	mov	r0, r3
 8000ca0:	eba4 0408 	sub.w	r4, r4, r8
 8000ca4:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000ca8:	e7bf      	b.n	8000c2a <__udivmoddi4+0x96>
 8000caa:	428b      	cmp	r3, r1
 8000cac:	d909      	bls.n	8000cc2 <__udivmoddi4+0x12e>
 8000cae:	2d00      	cmp	r5, #0
 8000cb0:	f000 80b1 	beq.w	8000e16 <__udivmoddi4+0x282>
 8000cb4:	2600      	movs	r6, #0
 8000cb6:	e9c5 0100 	strd	r0, r1, [r5]
 8000cba:	4630      	mov	r0, r6
 8000cbc:	4631      	mov	r1, r6
 8000cbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cc2:	fab3 f683 	clz	r6, r3
 8000cc6:	2e00      	cmp	r6, #0
 8000cc8:	d14a      	bne.n	8000d60 <__udivmoddi4+0x1cc>
 8000cca:	428b      	cmp	r3, r1
 8000ccc:	d302      	bcc.n	8000cd4 <__udivmoddi4+0x140>
 8000cce:	4282      	cmp	r2, r0
 8000cd0:	f200 80b8 	bhi.w	8000e44 <__udivmoddi4+0x2b0>
 8000cd4:	1a84      	subs	r4, r0, r2
 8000cd6:	eb61 0103 	sbc.w	r1, r1, r3
 8000cda:	2001      	movs	r0, #1
 8000cdc:	468c      	mov	ip, r1
 8000cde:	2d00      	cmp	r5, #0
 8000ce0:	d0a8      	beq.n	8000c34 <__udivmoddi4+0xa0>
 8000ce2:	e9c5 4c00 	strd	r4, ip, [r5]
 8000ce6:	e7a5      	b.n	8000c34 <__udivmoddi4+0xa0>
 8000ce8:	f1c2 0320 	rsb	r3, r2, #32
 8000cec:	fa20 f603 	lsr.w	r6, r0, r3
 8000cf0:	4097      	lsls	r7, r2
 8000cf2:	fa01 f002 	lsl.w	r0, r1, r2
 8000cf6:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cfa:	40d9      	lsrs	r1, r3
 8000cfc:	4330      	orrs	r0, r6
 8000cfe:	0c03      	lsrs	r3, r0, #16
 8000d00:	fbb1 f6fe 	udiv	r6, r1, lr
 8000d04:	fa1f f887 	uxth.w	r8, r7
 8000d08:	fb0e 1116 	mls	r1, lr, r6, r1
 8000d0c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d10:	fb06 f108 	mul.w	r1, r6, r8
 8000d14:	4299      	cmp	r1, r3
 8000d16:	fa04 f402 	lsl.w	r4, r4, r2
 8000d1a:	d909      	bls.n	8000d30 <__udivmoddi4+0x19c>
 8000d1c:	18fb      	adds	r3, r7, r3
 8000d1e:	f106 3cff 	add.w	ip, r6, #4294967295
 8000d22:	f080 808d 	bcs.w	8000e40 <__udivmoddi4+0x2ac>
 8000d26:	4299      	cmp	r1, r3
 8000d28:	f240 808a 	bls.w	8000e40 <__udivmoddi4+0x2ac>
 8000d2c:	3e02      	subs	r6, #2
 8000d2e:	443b      	add	r3, r7
 8000d30:	1a5b      	subs	r3, r3, r1
 8000d32:	b281      	uxth	r1, r0
 8000d34:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d38:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d3c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d40:	fb00 f308 	mul.w	r3, r0, r8
 8000d44:	428b      	cmp	r3, r1
 8000d46:	d907      	bls.n	8000d58 <__udivmoddi4+0x1c4>
 8000d48:	1879      	adds	r1, r7, r1
 8000d4a:	f100 3cff 	add.w	ip, r0, #4294967295
 8000d4e:	d273      	bcs.n	8000e38 <__udivmoddi4+0x2a4>
 8000d50:	428b      	cmp	r3, r1
 8000d52:	d971      	bls.n	8000e38 <__udivmoddi4+0x2a4>
 8000d54:	3802      	subs	r0, #2
 8000d56:	4439      	add	r1, r7
 8000d58:	1acb      	subs	r3, r1, r3
 8000d5a:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000d5e:	e778      	b.n	8000c52 <__udivmoddi4+0xbe>
 8000d60:	f1c6 0c20 	rsb	ip, r6, #32
 8000d64:	fa03 f406 	lsl.w	r4, r3, r6
 8000d68:	fa22 f30c 	lsr.w	r3, r2, ip
 8000d6c:	431c      	orrs	r4, r3
 8000d6e:	fa20 f70c 	lsr.w	r7, r0, ip
 8000d72:	fa01 f306 	lsl.w	r3, r1, r6
 8000d76:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000d7a:	fa21 f10c 	lsr.w	r1, r1, ip
 8000d7e:	431f      	orrs	r7, r3
 8000d80:	0c3b      	lsrs	r3, r7, #16
 8000d82:	fbb1 f9fe 	udiv	r9, r1, lr
 8000d86:	fa1f f884 	uxth.w	r8, r4
 8000d8a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000d8e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000d92:	fb09 fa08 	mul.w	sl, r9, r8
 8000d96:	458a      	cmp	sl, r1
 8000d98:	fa02 f206 	lsl.w	r2, r2, r6
 8000d9c:	fa00 f306 	lsl.w	r3, r0, r6
 8000da0:	d908      	bls.n	8000db4 <__udivmoddi4+0x220>
 8000da2:	1861      	adds	r1, r4, r1
 8000da4:	f109 30ff 	add.w	r0, r9, #4294967295
 8000da8:	d248      	bcs.n	8000e3c <__udivmoddi4+0x2a8>
 8000daa:	458a      	cmp	sl, r1
 8000dac:	d946      	bls.n	8000e3c <__udivmoddi4+0x2a8>
 8000dae:	f1a9 0902 	sub.w	r9, r9, #2
 8000db2:	4421      	add	r1, r4
 8000db4:	eba1 010a 	sub.w	r1, r1, sl
 8000db8:	b2bf      	uxth	r7, r7
 8000dba:	fbb1 f0fe 	udiv	r0, r1, lr
 8000dbe:	fb0e 1110 	mls	r1, lr, r0, r1
 8000dc2:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000dc6:	fb00 f808 	mul.w	r8, r0, r8
 8000dca:	45b8      	cmp	r8, r7
 8000dcc:	d907      	bls.n	8000dde <__udivmoddi4+0x24a>
 8000dce:	19e7      	adds	r7, r4, r7
 8000dd0:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dd4:	d22e      	bcs.n	8000e34 <__udivmoddi4+0x2a0>
 8000dd6:	45b8      	cmp	r8, r7
 8000dd8:	d92c      	bls.n	8000e34 <__udivmoddi4+0x2a0>
 8000dda:	3802      	subs	r0, #2
 8000ddc:	4427      	add	r7, r4
 8000dde:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000de2:	eba7 0708 	sub.w	r7, r7, r8
 8000de6:	fba0 8902 	umull	r8, r9, r0, r2
 8000dea:	454f      	cmp	r7, r9
 8000dec:	46c6      	mov	lr, r8
 8000dee:	4649      	mov	r1, r9
 8000df0:	d31a      	bcc.n	8000e28 <__udivmoddi4+0x294>
 8000df2:	d017      	beq.n	8000e24 <__udivmoddi4+0x290>
 8000df4:	b15d      	cbz	r5, 8000e0e <__udivmoddi4+0x27a>
 8000df6:	ebb3 020e 	subs.w	r2, r3, lr
 8000dfa:	eb67 0701 	sbc.w	r7, r7, r1
 8000dfe:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000e02:	40f2      	lsrs	r2, r6
 8000e04:	ea4c 0202 	orr.w	r2, ip, r2
 8000e08:	40f7      	lsrs	r7, r6
 8000e0a:	e9c5 2700 	strd	r2, r7, [r5]
 8000e0e:	2600      	movs	r6, #0
 8000e10:	4631      	mov	r1, r6
 8000e12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e16:	462e      	mov	r6, r5
 8000e18:	4628      	mov	r0, r5
 8000e1a:	e70b      	b.n	8000c34 <__udivmoddi4+0xa0>
 8000e1c:	4606      	mov	r6, r0
 8000e1e:	e6e9      	b.n	8000bf4 <__udivmoddi4+0x60>
 8000e20:	4618      	mov	r0, r3
 8000e22:	e6fd      	b.n	8000c20 <__udivmoddi4+0x8c>
 8000e24:	4543      	cmp	r3, r8
 8000e26:	d2e5      	bcs.n	8000df4 <__udivmoddi4+0x260>
 8000e28:	ebb8 0e02 	subs.w	lr, r8, r2
 8000e2c:	eb69 0104 	sbc.w	r1, r9, r4
 8000e30:	3801      	subs	r0, #1
 8000e32:	e7df      	b.n	8000df4 <__udivmoddi4+0x260>
 8000e34:	4608      	mov	r0, r1
 8000e36:	e7d2      	b.n	8000dde <__udivmoddi4+0x24a>
 8000e38:	4660      	mov	r0, ip
 8000e3a:	e78d      	b.n	8000d58 <__udivmoddi4+0x1c4>
 8000e3c:	4681      	mov	r9, r0
 8000e3e:	e7b9      	b.n	8000db4 <__udivmoddi4+0x220>
 8000e40:	4666      	mov	r6, ip
 8000e42:	e775      	b.n	8000d30 <__udivmoddi4+0x19c>
 8000e44:	4630      	mov	r0, r6
 8000e46:	e74a      	b.n	8000cde <__udivmoddi4+0x14a>
 8000e48:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e4c:	4439      	add	r1, r7
 8000e4e:	e713      	b.n	8000c78 <__udivmoddi4+0xe4>
 8000e50:	3802      	subs	r0, #2
 8000e52:	443c      	add	r4, r7
 8000e54:	e724      	b.n	8000ca0 <__udivmoddi4+0x10c>
 8000e56:	bf00      	nop

08000e58 <__aeabi_idiv0>:
 8000e58:	4770      	bx	lr
 8000e5a:	bf00      	nop
 8000e5c:	0000      	movs	r0, r0
	...

08000e60 <HAL_TIM_PeriodElapsedCallback>:
	}
}

 // When timer overflows, put corresponding signal on DAC
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
 {
 8000e60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}

	if (htim == &htim2) {
 8000e64:	4bbc      	ldr	r3, [pc, #752]	; (8001158 <HAL_TIM_PeriodElapsedCallback+0x2f8>)
 {
 8000e66:	ed2d 8b04 	vpush	{d8-d9}
	if (htim == &htim2) {
 8000e6a:	4298      	cmp	r0, r3
 {
 8000e6c:	b0a0      	sub	sp, #128	; 0x80
	if (htim == &htim2) {
 8000e6e:	f000 809d 	beq.w	8000fac <HAL_TIM_PeriodElapsedCallback+0x14c>
		Update_Wave_Shape();
 		Update_Env_Mult();
	}

	else if (htim == &htim6) {
 8000e72:	4bba      	ldr	r3, [pc, #744]	; (800115c <HAL_TIM_PeriodElapsedCallback+0x2fc>)
 8000e74:	4298      	cmp	r0, r3
 8000e76:	d00b      	beq.n	8000e90 <HAL_TIM_PeriodElapsedCallback+0x30>
 		PUT_TO_DAC(VOICE_SUM);
 		voices[0].lut_index++;
 		RST_INDEX(0);
 	}
 	else if (htim == &htim7) {
 8000e78:	4bb9      	ldr	r3, [pc, #740]	; (8001160 <HAL_TIM_PeriodElapsedCallback+0x300>)
 8000e7a:	4298      	cmp	r0, r3
 8000e7c:	d04f      	beq.n	8000f1e <HAL_TIM_PeriodElapsedCallback+0xbe>
 		PUT_TO_DAC(VOICE_SUM);
 		voices[1].lut_index++;
 		RST_INDEX(1);
 	}
 	else if (htim == &htim8) {
 8000e7e:	4bb9      	ldr	r3, [pc, #740]	; (8001164 <HAL_TIM_PeriodElapsedCallback+0x304>)
 8000e80:	4298      	cmp	r0, r3
 8000e82:	f000 80c0 	beq.w	8001006 <HAL_TIM_PeriodElapsedCallback+0x1a6>
 		PUT_TO_DAC(VOICE_SUM);
 		voices[2].lut_index++;
 		RST_INDEX(2);
 	}

 }
 8000e86:	b020      	add	sp, #128	; 0x80
 8000e88:	ecbd 8b04 	vpop	{d8-d9}
 8000e8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 		PUT_TO_DAC(VOICE_SUM);
 8000e90:	4ab5      	ldr	r2, [pc, #724]	; (8001168 <HAL_TIM_PeriodElapsedCallback+0x308>)
 8000e92:	4bb6      	ldr	r3, [pc, #728]	; (800116c <HAL_TIM_PeriodElapsedCallback+0x30c>)
 8000e94:	7e11      	ldrb	r1, [r2, #24]
 8000e96:	681c      	ldr	r4, [r3, #0]
 8000e98:	7d53      	ldrb	r3, [r2, #21]
 8000e9a:	f834 5011 	ldrh.w	r5, [r4, r1, lsl #1]
 8000e9e:	7911      	ldrb	r1, [r2, #4]
 8000ea0:	7850      	ldrb	r0, [r2, #1]
 8000ea2:	ed92 7a09 	vldr	s14, [r2, #36]	; 0x24
 8000ea6:	edd2 6a04 	vldr	s13, [r2, #16]
 8000eaa:	ed92 6a0e 	vldr	s12, [r2, #56]	; 0x38
 8000eae:	fb03 f305 	mul.w	r3, r3, r5
 8000eb2:	ee07 3a90 	vmov	s15, r3
 8000eb6:	f834 3011 	ldrh.w	r3, [r4, r1, lsl #1]
 8000eba:	f892 502c 	ldrb.w	r5, [r2, #44]	; 0x2c
 8000ebe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000ec2:	fb00 f003 	mul.w	r0, r0, r3
 8000ec6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000eca:	ee07 0a10 	vmov	s14, r0
 8000ece:	f834 5015 	ldrh.w	r5, [r4, r5, lsl #1]
 8000ed2:	f892 3029 	ldrb.w	r3, [r2, #41]	; 0x29
 8000ed6:	4ca6      	ldr	r4, [pc, #664]	; (8001170 <HAL_TIM_PeriodElapsedCallback+0x310>)
 8000ed8:	48a6      	ldr	r0, [pc, #664]	; (8001174 <HAL_TIM_PeriodElapsedCallback+0x314>)
 8000eda:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8000ede:	fb03 f305 	mul.w	r3, r3, r5
 8000ee2:	eee7 7a26 	vfma.f32	s15, s14, s13
 		voices[0].lut_index++;
 8000ee6:	3101      	adds	r1, #1
 8000ee8:	b2c9      	uxtb	r1, r1
 		PUT_TO_DAC(VOICE_SUM);
 8000eea:	ee07 3a10 	vmov	s14, r3
 8000eee:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8000ef2:	edd4 6a00 	vldr	s13, [r4]
 8000ef6:	eee7 7a06 	vfma.f32	s15, s14, s12
 		RST_INDEX(0);
 8000efa:	2980      	cmp	r1, #128	; 0x80
 		PUT_TO_DAC(VOICE_SUM);
 8000efc:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8000f00:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000f04:	ee17 3a90 	vmov	r3, s15
 8000f08:	b29b      	uxth	r3, r3
 8000f0a:	6083      	str	r3, [r0, #8]
 		RST_INDEX(0);
 8000f0c:	bf0a      	itet	eq
 8000f0e:	2300      	moveq	r3, #0
 		voices[0].lut_index++;
 8000f10:	7111      	strbne	r1, [r2, #4]
 		RST_INDEX(0);
 8000f12:	7113      	strbeq	r3, [r2, #4]
 }
 8000f14:	b020      	add	sp, #128	; 0x80
 8000f16:	ecbd 8b04 	vpop	{d8-d9}
 8000f1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 		PUT_TO_DAC(VOICE_SUM);
 8000f1e:	4a92      	ldr	r2, [pc, #584]	; (8001168 <HAL_TIM_PeriodElapsedCallback+0x308>)
 8000f20:	4b92      	ldr	r3, [pc, #584]	; (800116c <HAL_TIM_PeriodElapsedCallback+0x30c>)
 8000f22:	7e11      	ldrb	r1, [r2, #24]
 8000f24:	6818      	ldr	r0, [r3, #0]
 8000f26:	7d53      	ldrb	r3, [r2, #21]
 8000f28:	f830 5011 	ldrh.w	r5, [r0, r1, lsl #1]
 8000f2c:	7914      	ldrb	r4, [r2, #4]
 8000f2e:	edd2 5a09 	vldr	s11, [r2, #36]	; 0x24
 8000f32:	f830 4014 	ldrh.w	r4, [r0, r4, lsl #1]
 8000f36:	edd2 6a04 	vldr	s13, [r2, #16]
 8000f3a:	ed92 6a0e 	vldr	s12, [r2, #56]	; 0x38
 8000f3e:	fb03 f305 	mul.w	r3, r3, r5
 8000f42:	ee07 3a90 	vmov	s15, r3
 8000f46:	7853      	ldrb	r3, [r2, #1]
 8000f48:	fb03 f304 	mul.w	r3, r3, r4
 8000f4c:	f892 402c 	ldrb.w	r4, [r2, #44]	; 0x2c
 8000f50:	ee07 3a10 	vmov	s14, r3
 8000f54:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000f58:	f830 0014 	ldrh.w	r0, [r0, r4, lsl #1]
 8000f5c:	f892 3029 	ldrb.w	r3, [r2, #41]	; 0x29
 8000f60:	4c83      	ldr	r4, [pc, #524]	; (8001170 <HAL_TIM_PeriodElapsedCallback+0x310>)
 8000f62:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8000f66:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8000f6a:	fb03 f300 	mul.w	r3, r3, r0
 8000f6e:	eee7 7a26 	vfma.f32	s15, s14, s13
 		voices[1].lut_index++;
 8000f72:	3101      	adds	r1, #1
 8000f74:	b2c9      	uxtb	r1, r1
 		PUT_TO_DAC(VOICE_SUM);
 8000f76:	ee07 3a10 	vmov	s14, r3
 8000f7a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8000f7e:	edd4 6a00 	vldr	s13, [r4]
 8000f82:	487c      	ldr	r0, [pc, #496]	; (8001174 <HAL_TIM_PeriodElapsedCallback+0x314>)
 8000f84:	eee7 7a06 	vfma.f32	s15, s14, s12
 		RST_INDEX(1);
 8000f88:	2980      	cmp	r1, #128	; 0x80
 		PUT_TO_DAC(VOICE_SUM);
 8000f8a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8000f8e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000f92:	ee17 3a90 	vmov	r3, s15
 8000f96:	b29b      	uxth	r3, r3
 8000f98:	6083      	str	r3, [r0, #8]
 		RST_INDEX(1);
 8000f9a:	bf0a      	itet	eq
 8000f9c:	2300      	moveq	r3, #0
 		voices[1].lut_index++;
 8000f9e:	7611      	strbne	r1, [r2, #24]
 		RST_INDEX(1);
 8000fa0:	7613      	strbeq	r3, [r2, #24]
 }
 8000fa2:	b020      	add	sp, #128	; 0x80
 8000fa4:	ecbd 8b04 	vpop	{d8-d9}
 8000fa8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	HAL_ADC_Start(&hadc3);
 8000fac:	4872      	ldr	r0, [pc, #456]	; (8001178 <HAL_TIM_PeriodElapsedCallback+0x318>)
	AD_wave_sel = HAL_ADC_GetValue(&hadc3);
 8000fae:	4c73      	ldr	r4, [pc, #460]	; (800117c <HAL_TIM_PeriodElapsedCallback+0x31c>)
	HAL_ADC_Start(&hadc3);
 8000fb0:	f001 fe64 	bl	8002c7c <HAL_ADC_Start>
	AD_wave_sel = HAL_ADC_GetValue(&hadc3);
 8000fb4:	4870      	ldr	r0, [pc, #448]	; (8001178 <HAL_TIM_PeriodElapsedCallback+0x318>)
 8000fb6:	f001 f9a9 	bl	800230c <HAL_ADC_GetValue>
 8000fba:	4603      	mov	r3, r0
	HAL_ADC_Stop(&hadc3);
 8000fbc:	486e      	ldr	r0, [pc, #440]	; (8001178 <HAL_TIM_PeriodElapsedCallback+0x318>)
	AD_wave_sel = HAL_ADC_GetValue(&hadc3);
 8000fbe:	8023      	strh	r3, [r4, #0]
	HAL_ADC_Stop(&hadc3);
 8000fc0:	f001 ff1a 	bl	8002df8 <HAL_ADC_Stop>
	if (AD_wave_sel >= 0 && AD_wave_sel < 1024) {
 8000fc4:	8823      	ldrh	r3, [r4, #0]
 8000fc6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000fca:	d265      	bcs.n	8001098 <HAL_TIM_PeriodElapsedCallback+0x238>
	    lut = sin_lut;
 8000fcc:	4b67      	ldr	r3, [pc, #412]	; (800116c <HAL_TIM_PeriodElapsedCallback+0x30c>)
 8000fce:	4a6c      	ldr	r2, [pc, #432]	; (8001180 <HAL_TIM_PeriodElapsedCallback+0x320>)
 8000fd0:	601a      	str	r2, [r3, #0]
	 sConfig.Channel = channel;
 8000fd2:	4c6c      	ldr	r4, [pc, #432]	; (8001184 <HAL_TIM_PeriodElapsedCallback+0x324>)
	 if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000fd4:	486c      	ldr	r0, [pc, #432]	; (8001188 <HAL_TIM_PeriodElapsedCallback+0x328>)
	 ADC_ChannelConfTypeDef sConfig = {0};
 8000fd6:	2300      	movs	r3, #0
	 sConfig.Channel = channel;
 8000fd8:	2506      	movs	r5, #6
 8000fda:	f04f 0800 	mov.w	r8, #0
 8000fde:	f04f 097f 	mov.w	r9, #127	; 0x7f
	 if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000fe2:	a918      	add	r1, sp, #96	; 0x60
	 sConfig.Channel = channel;
 8000fe4:	2604      	movs	r6, #4
 8000fe6:	2700      	movs	r7, #0
 8000fe8:	e9cd 4518 	strd	r4, r5, [sp, #96]	; 0x60
 8000fec:	e9cd 891a 	strd	r8, r9, [sp, #104]	; 0x68
 8000ff0:	e9cd 671c 	strd	r6, r7, [sp, #112]	; 0x70
	 ADC_ChannelConfTypeDef sConfig = {0};
 8000ff4:	931f      	str	r3, [sp, #124]	; 0x7c
 8000ff6:	931e      	str	r3, [sp, #120]	; 0x78
	 if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ff8:	f001 fae8 	bl	80025cc <HAL_ADC_ConfigChannel>
 8000ffc:	4605      	mov	r5, r0
 8000ffe:	2800      	cmp	r0, #0
 8001000:	d058      	beq.n	80010b4 <HAL_TIM_PeriodElapsedCallback+0x254>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001002:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001004:	e7fe      	b.n	8001004 <HAL_TIM_PeriodElapsedCallback+0x1a4>
 		PUT_TO_DAC(VOICE_SUM);
 8001006:	4a58      	ldr	r2, [pc, #352]	; (8001168 <HAL_TIM_PeriodElapsedCallback+0x308>)
 8001008:	4b58      	ldr	r3, [pc, #352]	; (800116c <HAL_TIM_PeriodElapsedCallback+0x30c>)
 800100a:	7e11      	ldrb	r1, [r2, #24]
 800100c:	6818      	ldr	r0, [r3, #0]
 800100e:	7914      	ldrb	r4, [r2, #4]
 8001010:	f830 5011 	ldrh.w	r5, [r0, r1, lsl #1]
 8001014:	7d53      	ldrb	r3, [r2, #21]
 8001016:	f830 4014 	ldrh.w	r4, [r0, r4, lsl #1]
 800101a:	7851      	ldrb	r1, [r2, #1]
 800101c:	edd2 5a09 	vldr	s11, [r2, #36]	; 0x24
 8001020:	edd2 6a04 	vldr	s13, [r2, #16]
 8001024:	ed92 6a0e 	vldr	s12, [r2, #56]	; 0x38
 8001028:	fb03 f305 	mul.w	r3, r3, r5
 800102c:	ee07 3a90 	vmov	s15, r3
 8001030:	fb01 f304 	mul.w	r3, r1, r4
 8001034:	ee07 3a10 	vmov	s14, r3
 8001038:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
 800103c:	f892 1029 	ldrb.w	r1, [r2, #41]	; 0x29
 8001040:	f830 0013 	ldrh.w	r0, [r0, r3, lsl #1]
 8001044:	4c4a      	ldr	r4, [pc, #296]	; (8001170 <HAL_TIM_PeriodElapsedCallback+0x310>)
 8001046:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800104a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800104e:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8001052:	fb01 f100 	mul.w	r1, r1, r0
 8001056:	eee7 7a26 	vfma.f32	s15, s14, s13
 		voices[2].lut_index++;
 800105a:	3301      	adds	r3, #1
 		PUT_TO_DAC(VOICE_SUM);
 800105c:	4845      	ldr	r0, [pc, #276]	; (8001174 <HAL_TIM_PeriodElapsedCallback+0x314>)
 800105e:	edd4 6a00 	vldr	s13, [r4]
 8001062:	ee07 1a10 	vmov	s14, r1
 8001066:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 		voices[2].lut_index++;
 800106a:	b2d9      	uxtb	r1, r3
 		PUT_TO_DAC(VOICE_SUM);
 800106c:	eee7 7a06 	vfma.f32	s15, s14, s12
 		RST_INDEX(2);
 8001070:	2980      	cmp	r1, #128	; 0x80
 		PUT_TO_DAC(VOICE_SUM);
 8001072:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001076:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800107a:	ee17 3a90 	vmov	r3, s15
 800107e:	b29b      	uxth	r3, r3
 8001080:	6083      	str	r3, [r0, #8]
 		RST_INDEX(2);
 8001082:	bf0a      	itet	eq
 8001084:	2300      	moveq	r3, #0
 		voices[2].lut_index++;
 8001086:	f882 102c 	strbne.w	r1, [r2, #44]	; 0x2c
 		RST_INDEX(2);
 800108a:	f882 302c 	strbeq.w	r3, [r2, #44]	; 0x2c
 }
 800108e:	b020      	add	sp, #128	; 0x80
 8001090:	ecbd 8b04 	vpop	{d8-d9}
 8001094:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	else if (AD_wave_sel >= 1024 && AD_wave_sel < 2048) {
 8001098:	f5a3 6280 	sub.w	r2, r3, #1024	; 0x400
 800109c:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 80010a0:	d32a      	bcc.n	80010f8 <HAL_TIM_PeriodElapsedCallback+0x298>
	else if (AD_wave_sel >= 2048 && AD_wave_sel < 3072) {
 80010a2:	f5a3 6200 	sub.w	r2, r3, #2048	; 0x800
 80010a6:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 80010aa:	d24a      	bcs.n	8001142 <HAL_TIM_PeriodElapsedCallback+0x2e2>
	 	lut = saw_lut;
 80010ac:	4b2f      	ldr	r3, [pc, #188]	; (800116c <HAL_TIM_PeriodElapsedCallback+0x30c>)
 80010ae:	4a37      	ldr	r2, [pc, #220]	; (800118c <HAL_TIM_PeriodElapsedCallback+0x32c>)
 80010b0:	601a      	str	r2, [r3, #0]
 80010b2:	e78e      	b.n	8000fd2 <HAL_TIM_PeriodElapsedCallback+0x172>
	 HAL_ADC_Start(&hadc1);
 80010b4:	4834      	ldr	r0, [pc, #208]	; (8001188 <HAL_TIM_PeriodElapsedCallback+0x328>)
	 AD_ADSR[param] = HAL_ADC_GetValue(&hadc1);
 80010b6:	4c36      	ldr	r4, [pc, #216]	; (8001190 <HAL_TIM_PeriodElapsedCallback+0x330>)
	 HAL_ADC_Start(&hadc1);
 80010b8:	f001 fde0 	bl	8002c7c <HAL_ADC_Start>
	 HAL_ADC_PollForConversion(&hadc1, 1);
 80010bc:	2101      	movs	r1, #1
 80010be:	4832      	ldr	r0, [pc, #200]	; (8001188 <HAL_TIM_PeriodElapsedCallback+0x328>)
 80010c0:	f001 f882 	bl	80021c8 <HAL_ADC_PollForConversion>
	 AD_ADSR[param] = HAL_ADC_GetValue(&hadc1);
 80010c4:	4830      	ldr	r0, [pc, #192]	; (8001188 <HAL_TIM_PeriodElapsedCallback+0x328>)
 80010c6:	f001 f921 	bl	800230c <HAL_ADC_GetValue>
 80010ca:	4603      	mov	r3, r0
	 HAL_ADC_Stop(&hadc1);
 80010cc:	482e      	ldr	r0, [pc, #184]	; (8001188 <HAL_TIM_PeriodElapsedCallback+0x328>)
	 AD_ADSR[param] = HAL_ADC_GetValue(&hadc1);
 80010ce:	8023      	strh	r3, [r4, #0]
	 HAL_ADC_Stop(&hadc1);
 80010d0:	f001 fe92 	bl	8002df8 <HAL_ADC_Stop>
	 sConfig.Channel = channel;
 80010d4:	4a2f      	ldr	r2, [pc, #188]	; (8001194 <HAL_TIM_PeriodElapsedCallback+0x334>)
	 if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010d6:	482c      	ldr	r0, [pc, #176]	; (8001188 <HAL_TIM_PeriodElapsedCallback+0x328>)
	 sConfig.Channel = channel;
 80010d8:	2306      	movs	r3, #6
	 if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010da:	a910      	add	r1, sp, #64	; 0x40
	 ADC_ChannelConfTypeDef sConfig = {0};
 80010dc:	e9cd 5516 	strd	r5, r5, [sp, #88]	; 0x58
	 sConfig.Channel = channel;
 80010e0:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
 80010e4:	e9cd 6714 	strd	r6, r7, [sp, #80]	; 0x50
 80010e8:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
	 if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010ec:	f001 fa6e 	bl	80025cc <HAL_ADC_ConfigChannel>
 80010f0:	4605      	mov	r5, r0
 80010f2:	b128      	cbz	r0, 8001100 <HAL_TIM_PeriodElapsedCallback+0x2a0>
 80010f4:	b672      	cpsid	i
  while (1)
 80010f6:	e7fe      	b.n	80010f6 <HAL_TIM_PeriodElapsedCallback+0x296>
	 	lut = tri_lut;
 80010f8:	4b1c      	ldr	r3, [pc, #112]	; (800116c <HAL_TIM_PeriodElapsedCallback+0x30c>)
 80010fa:	4a27      	ldr	r2, [pc, #156]	; (8001198 <HAL_TIM_PeriodElapsedCallback+0x338>)
 80010fc:	601a      	str	r2, [r3, #0]
 80010fe:	e768      	b.n	8000fd2 <HAL_TIM_PeriodElapsedCallback+0x172>
	 HAL_ADC_Start(&hadc1);
 8001100:	4821      	ldr	r0, [pc, #132]	; (8001188 <HAL_TIM_PeriodElapsedCallback+0x328>)
 8001102:	f001 fdbb 	bl	8002c7c <HAL_ADC_Start>
	 HAL_ADC_PollForConversion(&hadc1, 1);
 8001106:	2101      	movs	r1, #1
 8001108:	481f      	ldr	r0, [pc, #124]	; (8001188 <HAL_TIM_PeriodElapsedCallback+0x328>)
 800110a:	f001 f85d 	bl	80021c8 <HAL_ADC_PollForConversion>
	 AD_ADSR[param] = HAL_ADC_GetValue(&hadc1);
 800110e:	481e      	ldr	r0, [pc, #120]	; (8001188 <HAL_TIM_PeriodElapsedCallback+0x328>)
 8001110:	f001 f8fc 	bl	800230c <HAL_ADC_GetValue>
 8001114:	4603      	mov	r3, r0
	 HAL_ADC_Stop(&hadc1);
 8001116:	481c      	ldr	r0, [pc, #112]	; (8001188 <HAL_TIM_PeriodElapsedCallback+0x328>)
	 AD_ADSR[param] = HAL_ADC_GetValue(&hadc1);
 8001118:	8063      	strh	r3, [r4, #2]
	 HAL_ADC_Stop(&hadc1);
 800111a:	f001 fe6d 	bl	8002df8 <HAL_ADC_Stop>
	 sConfig.Channel = channel;
 800111e:	4a1f      	ldr	r2, [pc, #124]	; (800119c <HAL_TIM_PeriodElapsedCallback+0x33c>)
	 if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001120:	4819      	ldr	r0, [pc, #100]	; (8001188 <HAL_TIM_PeriodElapsedCallback+0x328>)
	 sConfig.Channel = channel;
 8001122:	2306      	movs	r3, #6
	 if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001124:	a908      	add	r1, sp, #32
	 ADC_ChannelConfTypeDef sConfig = {0};
 8001126:	e9cd 550e 	strd	r5, r5, [sp, #56]	; 0x38
	 sConfig.Channel = channel;
 800112a:	e9cd 890a 	strd	r8, r9, [sp, #40]	; 0x28
 800112e:	e9cd 670c 	strd	r6, r7, [sp, #48]	; 0x30
 8001132:	e9cd 2308 	strd	r2, r3, [sp, #32]
	 if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001136:	f001 fa49 	bl	80025cc <HAL_ADC_ConfigChannel>
 800113a:	4605      	mov	r5, r0
 800113c:	b390      	cbz	r0, 80011a4 <HAL_TIM_PeriodElapsedCallback+0x344>
 800113e:	b672      	cpsid	i
  while (1)
 8001140:	e7fe      	b.n	8001140 <HAL_TIM_PeriodElapsedCallback+0x2e0>
	else if (AD_wave_sel >= 3072 && AD_wave_sel < 4096) {
 8001142:	f5a3 6340 	sub.w	r3, r3, #3072	; 0xc00
 8001146:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800114a:	f4bf af42 	bcs.w	8000fd2 <HAL_TIM_PeriodElapsedCallback+0x172>
		lut = sqr_lut;
 800114e:	4b07      	ldr	r3, [pc, #28]	; (800116c <HAL_TIM_PeriodElapsedCallback+0x30c>)
 8001150:	4a13      	ldr	r2, [pc, #76]	; (80011a0 <HAL_TIM_PeriodElapsedCallback+0x340>)
 8001152:	601a      	str	r2, [r3, #0]
 8001154:	e73d      	b.n	8000fd2 <HAL_TIM_PeriodElapsedCallback+0x172>
 8001156:	bf00      	nop
 8001158:	200006dc 	.word	0x200006dc
 800115c:	20000690 	.word	0x20000690
 8001160:	20000728 	.word	0x20000728
 8001164:	20000434 	.word	0x20000434
 8001168:	20000654 	.word	0x20000654
 800116c:	20000000 	.word	0x20000000
 8001170:	20000004 	.word	0x20000004
 8001174:	50000800 	.word	0x50000800
 8001178:	20000550 	.word	0x20000550
 800117c:	20000430 	.word	0x20000430
 8001180:	20000108 	.word	0x20000108
 8001184:	04300002 	.word	0x04300002
 8001188:	200004e4 	.word	0x200004e4
 800118c:	20000008 	.word	0x20000008
 8001190:	2000064c 	.word	0x2000064c
 8001194:	08600004 	.word	0x08600004
 8001198:	20000308 	.word	0x20000308
 800119c:	0c900008 	.word	0x0c900008
 80011a0:	20000208 	.word	0x20000208
	 HAL_ADC_Start(&hadc1);
 80011a4:	48ba      	ldr	r0, [pc, #744]	; (8001490 <HAL_TIM_PeriodElapsedCallback+0x630>)
 80011a6:	f001 fd69 	bl	8002c7c <HAL_ADC_Start>
	 HAL_ADC_PollForConversion(&hadc1, 1);
 80011aa:	2101      	movs	r1, #1
 80011ac:	48b8      	ldr	r0, [pc, #736]	; (8001490 <HAL_TIM_PeriodElapsedCallback+0x630>)
 80011ae:	f001 f80b 	bl	80021c8 <HAL_ADC_PollForConversion>
	 AD_ADSR[param] = HAL_ADC_GetValue(&hadc1);
 80011b2:	48b7      	ldr	r0, [pc, #732]	; (8001490 <HAL_TIM_PeriodElapsedCallback+0x630>)
 80011b4:	f001 f8aa 	bl	800230c <HAL_ADC_GetValue>
 80011b8:	4603      	mov	r3, r0
	 HAL_ADC_Stop(&hadc1);
 80011ba:	48b5      	ldr	r0, [pc, #724]	; (8001490 <HAL_TIM_PeriodElapsedCallback+0x630>)
	 AD_ADSR[param] = HAL_ADC_GetValue(&hadc1);
 80011bc:	80a3      	strh	r3, [r4, #4]
	 HAL_ADC_Stop(&hadc1);
 80011be:	f001 fe1b 	bl	8002df8 <HAL_ADC_Stop>
	 sConfig.Channel = channel;
 80011c2:	4ab4      	ldr	r2, [pc, #720]	; (8001494 <HAL_TIM_PeriodElapsedCallback+0x634>)
	 if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80011c4:	48b2      	ldr	r0, [pc, #712]	; (8001490 <HAL_TIM_PeriodElapsedCallback+0x630>)
	 sConfig.Channel = channel;
 80011c6:	2306      	movs	r3, #6
	 if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80011c8:	4669      	mov	r1, sp
	 ADC_ChannelConfTypeDef sConfig = {0};
 80011ca:	e9cd 5506 	strd	r5, r5, [sp, #24]
	 sConfig.Channel = channel;
 80011ce:	e9cd 8902 	strd	r8, r9, [sp, #8]
 80011d2:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80011d6:	e9cd 2300 	strd	r2, r3, [sp]
	 if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80011da:	f001 f9f7 	bl	80025cc <HAL_ADC_ConfigChannel>
 80011de:	b108      	cbz	r0, 80011e4 <HAL_TIM_PeriodElapsedCallback+0x384>
 80011e0:	b672      	cpsid	i
  while (1)
 80011e2:	e7fe      	b.n	80011e2 <HAL_TIM_PeriodElapsedCallback+0x382>
	 HAL_ADC_Start(&hadc1);
 80011e4:	48aa      	ldr	r0, [pc, #680]	; (8001490 <HAL_TIM_PeriodElapsedCallback+0x630>)
		switch(voices[i].state) {
 80011e6:	4dac      	ldr	r5, [pc, #688]	; (8001498 <HAL_TIM_PeriodElapsedCallback+0x638>)
	 HAL_ADC_Start(&hadc1);
 80011e8:	f001 fd48 	bl	8002c7c <HAL_ADC_Start>
	 HAL_ADC_PollForConversion(&hadc1, 1);
 80011ec:	2101      	movs	r1, #1
 80011ee:	48a8      	ldr	r0, [pc, #672]	; (8001490 <HAL_TIM_PeriodElapsedCallback+0x630>)
 80011f0:	f000 ffea 	bl	80021c8 <HAL_ADC_PollForConversion>
	 AD_ADSR[param] = HAL_ADC_GetValue(&hadc1);
 80011f4:	48a6      	ldr	r0, [pc, #664]	; (8001490 <HAL_TIM_PeriodElapsedCallback+0x630>)
 80011f6:	f001 f889 	bl	800230c <HAL_ADC_GetValue>
 80011fa:	4603      	mov	r3, r0
	 HAL_ADC_Stop(&hadc1);
 80011fc:	48a4      	ldr	r0, [pc, #656]	; (8001490 <HAL_TIM_PeriodElapsedCallback+0x630>)
	 AD_ADSR[param] = HAL_ADC_GetValue(&hadc1);
 80011fe:	80e3      	strh	r3, [r4, #6]
	 HAL_ADC_Stop(&hadc1);
 8001200:	f001 fdfa 	bl	8002df8 <HAL_ADC_Stop>
			voices[i].rate = SUSTAIN_NORM / RELEASE_VAL;
 8001204:	88a0      	ldrh	r0, [r4, #4]
 8001206:	f7ff f959 	bl	80004bc <__aeabi_i2d>
 800120a:	a39f      	add	r3, pc, #636	; (adr r3, 8001488 <HAL_TIM_PeriodElapsedCallback+0x628>)
 800120c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001210:	f7ff f9be 	bl	8000590 <__aeabi_dmul>
 8001214:	88e3      	ldrh	r3, [r4, #6]
 8001216:	4606      	mov	r6, r0
 8001218:	08d8      	lsrs	r0, r3, #3
 800121a:	460f      	mov	r7, r1
 800121c:	f7ff f94e 	bl	80004bc <__aeabi_i2d>
 8001220:	4602      	mov	r2, r0
 8001222:	460b      	mov	r3, r1
 8001224:	4630      	mov	r0, r6
 8001226:	4639      	mov	r1, r7
 8001228:	f7ff fadc 	bl	80007e4 <__aeabi_ddiv>
 800122c:	f7ff fc4a 	bl	8000ac4 <__aeabi_d2f>
			voices[i].env_val = SUSTAIN_NORM;
 8001230:	4639      	mov	r1, r7
			voices[i].rate = SUSTAIN_NORM / RELEASE_VAL;
 8001232:	4603      	mov	r3, r0
			voices[i].env_val = SUSTAIN_NORM;
 8001234:	4630      	mov	r0, r6
			voices[i].rate = SUSTAIN_NORM / RELEASE_VAL;
 8001236:	ee09 3a10 	vmov	s18, r3
			voices[i].env_val = SUSTAIN_NORM;
 800123a:	f7ff fc43 	bl	8000ac4 <__aeabi_d2f>
 800123e:	4682      	mov	sl, r0
			voices[i].rate = (DECAY_NORM - 1.0) / DECAY_VAL;
 8001240:	8860      	ldrh	r0, [r4, #2]
 8001242:	08c0      	lsrs	r0, r0, #3
 8001244:	f7ff f93a 	bl	80004bc <__aeabi_i2d>
 8001248:	a38f      	add	r3, pc, #572	; (adr r3, 8001488 <HAL_TIM_PeriodElapsedCallback+0x628>)
 800124a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800124e:	4680      	mov	r8, r0
 8001250:	4689      	mov	r9, r1
 8001252:	f7ff f99d 	bl	8000590 <__aeabi_dmul>
 8001256:	4b91      	ldr	r3, [pc, #580]	; (800149c <HAL_TIM_PeriodElapsedCallback+0x63c>)
 8001258:	2200      	movs	r2, #0
 800125a:	f7fe ffe1 	bl	8000220 <__aeabi_dsub>
 800125e:	4642      	mov	r2, r8
 8001260:	464b      	mov	r3, r9
 8001262:	f7ff fabf 	bl	80007e4 <__aeabi_ddiv>
 8001266:	f7ff fc2d 	bl	8000ac4 <__aeabi_d2f>
 800126a:	4603      	mov	r3, r0
			voices[i].rate = 1.0 / ATTACK_VAL;
 800126c:	8820      	ldrh	r0, [r4, #0]
 800126e:	08c0      	lsrs	r0, r0, #3
			voices[i].rate = (DECAY_NORM - 1.0) / DECAY_VAL;
 8001270:	ee08 3a10 	vmov	s16, r3
			voices[i].rate = 1.0 / ATTACK_VAL;
 8001274:	f7ff f922 	bl	80004bc <__aeabi_i2d>
 8001278:	460b      	mov	r3, r1
 800127a:	4602      	mov	r2, r0
 800127c:	4987      	ldr	r1, [pc, #540]	; (800149c <HAL_TIM_PeriodElapsedCallback+0x63c>)
 800127e:	2000      	movs	r0, #0
 8001280:	f7ff fab0 	bl	80007e4 <__aeabi_ddiv>
 8001284:	f7ff fc1e 	bl	8000ac4 <__aeabi_d2f>
 8001288:	7b2b      	ldrb	r3, [r5, #12]
 800128a:	ee08 0a90 	vmov	s17, r0
		switch(voices[i].state) {
 800128e:	2b03      	cmp	r3, #3
 8001290:	d813      	bhi.n	80012ba <HAL_TIM_PeriodElapsedCallback+0x45a>
 8001292:	e8df f003 	tbb	[pc, r3]
 8001296:	b7a8      	.short	0xb7a8
 8001298:	02a1      	.short	0x02a1
			if (voices[i].env_val <= 0.0) {
 800129a:	edd5 7a04 	vldr	s15, [r5, #16]
			voices[i].rate = SUSTAIN_NORM / RELEASE_VAL;
 800129e:	ed85 9a02 	vstr	s18, [r5, #8]
			if (voices[i].env_val <= 0.0) {
 80012a2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80012a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012aa:	f04f 0200 	mov.w	r2, #0
 80012ae:	f240 80d6 	bls.w	800145e <HAL_TIM_PeriodElapsedCallback+0x5fe>
				voices[i].env_val -= voices[i].rate;
 80012b2:	ee77 7ac9 	vsub.f32	s15, s15, s18
 80012b6:	edc5 7a04 	vstr	s15, [r5, #16]
		switch(voices[i].state) {
 80012ba:	f895 3020 	ldrb.w	r3, [r5, #32]
 80012be:	2b03      	cmp	r3, #3
 80012c0:	d813      	bhi.n	80012ea <HAL_TIM_PeriodElapsedCallback+0x48a>
 80012c2:	e8df f003 	tbb	[pc, r3]
 80012c6:	5b70      	.short	0x5b70
 80012c8:	0281      	.short	0x0281
			if (voices[i].env_val <= 0.0) {
 80012ca:	edd5 7a09 	vldr	s15, [r5, #36]	; 0x24
			voices[i].rate = SUSTAIN_NORM / RELEASE_VAL;
 80012ce:	ed85 9a07 	vstr	s18, [r5, #28]
			if (voices[i].env_val <= 0.0) {
 80012d2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80012d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012da:	f04f 0200 	mov.w	r2, #0
 80012de:	f240 80a5 	bls.w	800142c <HAL_TIM_PeriodElapsedCallback+0x5cc>
				voices[i].env_val -= voices[i].rate;
 80012e2:	ee77 7ac9 	vsub.f32	s15, s15, s18
 80012e6:	edc5 7a09 	vstr	s15, [r5, #36]	; 0x24
		switch(voices[i].state) {
 80012ea:	f895 3034 	ldrb.w	r3, [r5, #52]	; 0x34
 80012ee:	2b03      	cmp	r3, #3
 80012f0:	f63f adc9 	bhi.w	8000e86 <HAL_TIM_PeriodElapsedCallback+0x26>
 80012f4:	e8df f003 	tbb	[pc, r3]
 80012f8:	02131c31 	.word	0x02131c31
			if (voices[i].env_val <= 0.0) {
 80012fc:	edd5 7a0e 	vldr	s15, [r5, #56]	; 0x38
			voices[i].rate = SUSTAIN_NORM / RELEASE_VAL;
 8001300:	ed85 9a0c 	vstr	s18, [r5, #48]	; 0x30
			if (voices[i].env_val <= 0.0) {
 8001304:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001308:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800130c:	f04f 0200 	mov.w	r2, #0
 8001310:	f240 809b 	bls.w	800144a <HAL_TIM_PeriodElapsedCallback+0x5ea>
				voices[i].env_val -= voices[i].rate;
 8001314:	ee77 7ac9 	vsub.f32	s15, s15, s18
 8001318:	edc5 7a0e 	vstr	s15, [r5, #56]	; 0x38
	for (i = 0; i < 3; i++) {
 800131c:	e5b3      	b.n	8000e86 <HAL_TIM_PeriodElapsedCallback+0x26>
			if (voices[i].gate == OFF) {
 800131e:	f895 3028 	ldrb.w	r3, [r5, #40]	; 0x28
 8001322:	b913      	cbnz	r3, 800132a <HAL_TIM_PeriodElapsedCallback+0x4ca>
				voices[i].state = RELEASE;
 8001324:	2303      	movs	r3, #3
 8001326:	f885 3034 	strb.w	r3, [r5, #52]	; 0x34
			voices[i].env_val = SUSTAIN_NORM;
 800132a:	f8c5 a038 	str.w	sl, [r5, #56]	; 0x38
			break;
 800132e:	e5aa      	b.n	8000e86 <HAL_TIM_PeriodElapsedCallback+0x26>
			if (voices[i].env_val <= SUSTAIN_NORM) {
 8001330:	edd5 8a0e 	vldr	s17, [r5, #56]	; 0x38
			voices[i].rate = (DECAY_NORM - 1.0) / DECAY_VAL;
 8001334:	ed85 8a0c 	vstr	s16, [r5, #48]	; 0x30
			if (voices[i].env_val <= SUSTAIN_NORM) {
 8001338:	ee18 0a90 	vmov	r0, s17
 800133c:	f7ff f8d0 	bl	80004e0 <__aeabi_f2d>
 8001340:	4632      	mov	r2, r6
 8001342:	463b      	mov	r3, r7
 8001344:	f7ff fba0 	bl	8000a88 <__aeabi_dcmple>
 8001348:	2800      	cmp	r0, #0
 800134a:	f000 8091 	beq.w	8001470 <HAL_TIM_PeriodElapsedCallback+0x610>
				voices[i].state = SUSTAIN;
 800134e:	2302      	movs	r3, #2
				voices[i].env_val = SUSTAIN_NORM;
 8001350:	f8c5 a038 	str.w	sl, [r5, #56]	; 0x38
				voices[i].state = SUSTAIN;
 8001354:	f885 3034 	strb.w	r3, [r5, #52]	; 0x34
				voices[i].env_val = SUSTAIN_NORM;
 8001358:	e595      	b.n	8000e86 <HAL_TIM_PeriodElapsedCallback+0x26>
			if (voices[i].env_val >= 1.0) {
 800135a:	edd5 7a0e 	vldr	s15, [r5, #56]	; 0x38
			voices[i].rate = 1.0 / ATTACK_VAL;
 800135e:	edc5 8a0c 	vstr	s17, [r5, #48]	; 0x30
			if (voices[i].env_val >= 1.0) {
 8001362:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001366:	eef4 7ac7 	vcmpe.f32	s15, s14
 800136a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800136e:	db61      	blt.n	8001434 <HAL_TIM_PeriodElapsedCallback+0x5d4>
				voices[i].state = DECAY;
 8001370:	2301      	movs	r3, #1
				voices[i].env_val = 1.0;
 8001372:	ed85 7a0e 	vstr	s14, [r5, #56]	; 0x38
				voices[i].state = DECAY;
 8001376:	f885 3034 	strb.w	r3, [r5, #52]	; 0x34
				voices[i].env_val = 1.0;
 800137a:	e584      	b.n	8000e86 <HAL_TIM_PeriodElapsedCallback+0x26>
			if (voices[i].env_val <= SUSTAIN_NORM) {
 800137c:	edd5 9a09 	vldr	s19, [r5, #36]	; 0x24
			voices[i].rate = (DECAY_NORM - 1.0) / DECAY_VAL;
 8001380:	ed85 8a07 	vstr	s16, [r5, #28]
			if (voices[i].env_val <= SUSTAIN_NORM) {
 8001384:	ee19 0a90 	vmov	r0, s19
 8001388:	f7ff f8aa 	bl	80004e0 <__aeabi_f2d>
 800138c:	4602      	mov	r2, r0
 800138e:	460b      	mov	r3, r1
 8001390:	4630      	mov	r0, r6
 8001392:	4639      	mov	r1, r7
 8001394:	f7ff fb82 	bl	8000a9c <__aeabi_dcmpge>
 8001398:	2800      	cmp	r0, #0
 800139a:	d150      	bne.n	800143e <HAL_TIM_PeriodElapsedCallback+0x5de>
				voices[i].env_val += voices[i].rate;
 800139c:	ee78 9a29 	vadd.f32	s19, s16, s19
 80013a0:	edc5 9a09 	vstr	s19, [r5, #36]	; 0x24
 80013a4:	e7a1      	b.n	80012ea <HAL_TIM_PeriodElapsedCallback+0x48a>
			if (voices[i].env_val >= 1.0) {
 80013a6:	edd5 7a09 	vldr	s15, [r5, #36]	; 0x24
			voices[i].rate = 1.0 / ATTACK_VAL;
 80013aa:	edc5 8a07 	vstr	s17, [r5, #28]
			if (voices[i].env_val >= 1.0) {
 80013ae:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80013b2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80013b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013ba:	db54      	blt.n	8001466 <HAL_TIM_PeriodElapsedCallback+0x606>
				voices[i].state = DECAY;
 80013bc:	2301      	movs	r3, #1
				voices[i].env_val = 1.0;
 80013be:	ed85 7a09 	vstr	s14, [r5, #36]	; 0x24
				voices[i].state = DECAY;
 80013c2:	f885 3020 	strb.w	r3, [r5, #32]
				voices[i].env_val = 1.0;
 80013c6:	e790      	b.n	80012ea <HAL_TIM_PeriodElapsedCallback+0x48a>
			if (voices[i].gate == OFF) {
 80013c8:	7d2b      	ldrb	r3, [r5, #20]
 80013ca:	b913      	cbnz	r3, 80013d2 <HAL_TIM_PeriodElapsedCallback+0x572>
				voices[i].state = RELEASE;
 80013cc:	2303      	movs	r3, #3
 80013ce:	f885 3020 	strb.w	r3, [r5, #32]
			voices[i].env_val = SUSTAIN_NORM;
 80013d2:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
			break;
 80013d6:	e788      	b.n	80012ea <HAL_TIM_PeriodElapsedCallback+0x48a>
			if (voices[i].gate == OFF) {
 80013d8:	782b      	ldrb	r3, [r5, #0]
 80013da:	b90b      	cbnz	r3, 80013e0 <HAL_TIM_PeriodElapsedCallback+0x580>
				voices[i].state = RELEASE;
 80013dc:	2303      	movs	r3, #3
 80013de:	732b      	strb	r3, [r5, #12]
			voices[i].env_val = SUSTAIN_NORM;
 80013e0:	f8c5 a010 	str.w	sl, [r5, #16]
			break;
 80013e4:	e769      	b.n	80012ba <HAL_TIM_PeriodElapsedCallback+0x45a>
			if (voices[i].env_val >= 1.0) {
 80013e6:	edd5 7a04 	vldr	s15, [r5, #16]
			voices[i].rate = 1.0 / ATTACK_VAL;
 80013ea:	60a8      	str	r0, [r5, #8]
			if (voices[i].env_val >= 1.0) {
 80013ec:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80013f0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80013f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013f8:	db2c      	blt.n	8001454 <HAL_TIM_PeriodElapsedCallback+0x5f4>
				voices[i].state = DECAY;
 80013fa:	2301      	movs	r3, #1
				voices[i].env_val = 1.0;
 80013fc:	ed85 7a04 	vstr	s14, [r5, #16]
				voices[i].state = DECAY;
 8001400:	732b      	strb	r3, [r5, #12]
				voices[i].env_val = 1.0;
 8001402:	e75a      	b.n	80012ba <HAL_TIM_PeriodElapsedCallback+0x45a>
			if (voices[i].env_val <= SUSTAIN_NORM) {
 8001404:	edd5 9a04 	vldr	s19, [r5, #16]
			voices[i].rate = (DECAY_NORM - 1.0) / DECAY_VAL;
 8001408:	ed85 8a02 	vstr	s16, [r5, #8]
			if (voices[i].env_val <= SUSTAIN_NORM) {
 800140c:	ee19 0a90 	vmov	r0, s19
 8001410:	f7ff f866 	bl	80004e0 <__aeabi_f2d>
 8001414:	4602      	mov	r2, r0
 8001416:	460b      	mov	r3, r1
 8001418:	4630      	mov	r0, r6
 800141a:	4639      	mov	r1, r7
 800141c:	f7ff fb3e 	bl	8000a9c <__aeabi_dcmpge>
 8001420:	bb58      	cbnz	r0, 800147a <HAL_TIM_PeriodElapsedCallback+0x61a>
				voices[i].env_val += voices[i].rate;
 8001422:	ee78 9a29 	vadd.f32	s19, s16, s19
 8001426:	edc5 9a04 	vstr	s19, [r5, #16]
 800142a:	e746      	b.n	80012ba <HAL_TIM_PeriodElapsedCallback+0x45a>
				voices[i].status = OFF;
 800142c:	2300      	movs	r3, #0
				voices[i].env_val = 0.0;
 800142e:	626a      	str	r2, [r5, #36]	; 0x24
				voices[i].status = OFF;
 8001430:	756b      	strb	r3, [r5, #21]
				voices[i].env_val = 0.0;
 8001432:	e75a      	b.n	80012ea <HAL_TIM_PeriodElapsedCallback+0x48a>
				voices[i].env_val += voices[i].rate;
 8001434:	ee78 8aa7 	vadd.f32	s17, s17, s15
 8001438:	edc5 8a0e 	vstr	s17, [r5, #56]	; 0x38
 800143c:	e523      	b.n	8000e86 <HAL_TIM_PeriodElapsedCallback+0x26>
				voices[i].state = SUSTAIN;
 800143e:	2302      	movs	r3, #2
				voices[i].env_val = SUSTAIN_NORM;
 8001440:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
				voices[i].state = SUSTAIN;
 8001444:	f885 3020 	strb.w	r3, [r5, #32]
				voices[i].env_val = SUSTAIN_NORM;
 8001448:	e74f      	b.n	80012ea <HAL_TIM_PeriodElapsedCallback+0x48a>
				voices[i].status = OFF;
 800144a:	2300      	movs	r3, #0
				voices[i].env_val = 0.0;
 800144c:	63aa      	str	r2, [r5, #56]	; 0x38
				voices[i].status = OFF;
 800144e:	f885 3029 	strb.w	r3, [r5, #41]	; 0x29
				voices[i].env_val = 0.0;
 8001452:	e518      	b.n	8000e86 <HAL_TIM_PeriodElapsedCallback+0x26>
				voices[i].env_val += voices[i].rate;
 8001454:	ee78 7aa7 	vadd.f32	s15, s17, s15
 8001458:	edc5 7a04 	vstr	s15, [r5, #16]
 800145c:	e72d      	b.n	80012ba <HAL_TIM_PeriodElapsedCallback+0x45a>
				voices[i].status = OFF;
 800145e:	2300      	movs	r3, #0
				voices[i].env_val = 0.0;
 8001460:	612a      	str	r2, [r5, #16]
				voices[i].status = OFF;
 8001462:	706b      	strb	r3, [r5, #1]
				voices[i].env_val = 0.0;
 8001464:	e729      	b.n	80012ba <HAL_TIM_PeriodElapsedCallback+0x45a>
				voices[i].env_val += voices[i].rate;
 8001466:	ee78 7aa7 	vadd.f32	s15, s17, s15
 800146a:	edc5 7a09 	vstr	s15, [r5, #36]	; 0x24
 800146e:	e73c      	b.n	80012ea <HAL_TIM_PeriodElapsedCallback+0x48a>
				voices[i].env_val += voices[i].rate;
 8001470:	ee38 8a28 	vadd.f32	s16, s16, s17
 8001474:	ed85 8a0e 	vstr	s16, [r5, #56]	; 0x38
 8001478:	e505      	b.n	8000e86 <HAL_TIM_PeriodElapsedCallback+0x26>
				voices[i].state = SUSTAIN;
 800147a:	2302      	movs	r3, #2
				voices[i].env_val = SUSTAIN_NORM;
 800147c:	f8c5 a010 	str.w	sl, [r5, #16]
				voices[i].state = SUSTAIN;
 8001480:	732b      	strb	r3, [r5, #12]
				voices[i].env_val = SUSTAIN_NORM;
 8001482:	e71a      	b.n	80012ba <HAL_TIM_PeriodElapsedCallback+0x45a>
 8001484:	f3af 8000 	nop.w
 8001488:	a19c4774 	.word	0xa19c4774
 800148c:	3f2ffffa 	.word	0x3f2ffffa
 8001490:	200004e4 	.word	0x200004e4
 8001494:	10c00010 	.word	0x10c00010
 8001498:	20000654 	.word	0x20000654
 800149c:	3ff00000 	.word	0x3ff00000

080014a0 <HAL_UART_RxCpltCallback>:
 {
 80014a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 	if ((midi_tmp[0] == 0x90) && (notes_on <= 2)) {
 80014a2:	485d      	ldr	r0, [pc, #372]	; (8001618 <HAL_UART_RxCpltCallback+0x178>)
 80014a4:	7803      	ldrb	r3, [r0, #0]
 80014a6:	2b90      	cmp	r3, #144	; 0x90
 80014a8:	d041      	beq.n	800152e <HAL_UART_RxCpltCallback+0x8e>
 	else if ((midi_tmp[0] == 0x80)) {
 80014aa:	2b80      	cmp	r3, #128	; 0x80
 80014ac:	d021      	beq.n	80014f2 <HAL_UART_RxCpltCallback+0x52>
 80014ae:	4b5b      	ldr	r3, [pc, #364]	; (800161c <HAL_UART_RxCpltCallback+0x17c>)
 80014b0:	495b      	ldr	r1, [pc, #364]	; (8001620 <HAL_UART_RxCpltCallback+0x180>)
 80014b2:	781a      	ldrb	r2, [r3, #0]
 	switch (STATUS_SUM) {
 80014b4:	784b      	ldrb	r3, [r1, #1]
 80014b6:	7d4c      	ldrb	r4, [r1, #21]
 80014b8:	f891 0029 	ldrb.w	r0, [r1, #41]	; 0x29
 80014bc:	4423      	add	r3, r4
 80014be:	4403      	add	r3, r0
 80014c0:	2b02      	cmp	r3, #2
 80014c2:	f000 8082 	beq.w	80015ca <HAL_UART_RxCpltCallback+0x12a>
 80014c6:	2b03      	cmp	r3, #3
 80014c8:	d062      	beq.n	8001590 <HAL_UART_RxCpltCallback+0xf0>
 80014ca:	2b01      	cmp	r3, #1
 80014cc:	d054      	beq.n	8001578 <HAL_UART_RxCpltCallback+0xd8>
 		multiplier = 1.0;
 80014ce:	4b55      	ldr	r3, [pc, #340]	; (8001624 <HAL_UART_RxCpltCallback+0x184>)
 80014d0:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 80014d4:	6019      	str	r1, [r3, #0]
	if (notes_on > 0) {
 80014d6:	b322      	cbz	r2, 8001522 <HAL_UART_RxCpltCallback+0x82>
		MIDI_IN_LED_ON;
 80014d8:	4853      	ldr	r0, [pc, #332]	; (8001628 <HAL_UART_RxCpltCallback+0x188>)
 80014da:	2201      	movs	r2, #1
 80014dc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80014e0:	f002 f8fe 	bl	80036e0 <HAL_GPIO_WritePin>
 }
 80014e4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 	HAL_UART_Receive_IT(&huart1, midi_tmp, 3);
 80014e8:	494b      	ldr	r1, [pc, #300]	; (8001618 <HAL_UART_RxCpltCallback+0x178>)
 80014ea:	4850      	ldr	r0, [pc, #320]	; (800162c <HAL_UART_RxCpltCallback+0x18c>)
 80014ec:	2203      	movs	r2, #3
 80014ee:	f003 b9e3 	b.w	80048b8 <HAL_UART_Receive_IT>
 			midi_msg[i] = midi_tmp[i];
 80014f2:	4a4f      	ldr	r2, [pc, #316]	; (8001630 <HAL_UART_RxCpltCallback+0x190>)
 80014f4:	7844      	ldrb	r4, [r0, #1]
 80014f6:	7880      	ldrb	r0, [r0, #2]
 			if (voices[i].note == NOTE) {
 80014f8:	4d4e      	ldr	r5, [pc, #312]	; (8001634 <HAL_UART_RxCpltCallback+0x194>)
 			midi_msg[i] = midi_tmp[i];
 80014fa:	7090      	strb	r0, [r2, #2]
 			if (voices[i].note == NOTE) {
 80014fc:	4948      	ldr	r1, [pc, #288]	; (8001620 <HAL_UART_RxCpltCallback+0x180>)
 			midi_msg[i] = midi_tmp[i];
 80014fe:	7013      	strb	r3, [r2, #0]
 			if (voices[i].note == NOTE) {
 8001500:	1c60      	adds	r0, r4, #1
 			midi_msg[i] = midi_tmp[i];
 8001502:	7054      	strb	r4, [r2, #1]
 			if (voices[i].note == NOTE) {
 8001504:	f835 3010 	ldrh.w	r3, [r5, r0, lsl #1]
 8001508:	884d      	ldrh	r5, [r1, #2]
 800150a:	4844      	ldr	r0, [pc, #272]	; (800161c <HAL_UART_RxCpltCallback+0x17c>)
 800150c:	429d      	cmp	r5, r3
 800150e:	7802      	ldrb	r2, [r0, #0]
 8001510:	d07d      	beq.n	800160e <HAL_UART_RxCpltCallback+0x16e>
 8001512:	8acc      	ldrh	r4, [r1, #22]
 8001514:	429c      	cmp	r4, r3
 8001516:	d075      	beq.n	8001604 <HAL_UART_RxCpltCallback+0x164>
 8001518:	8d4c      	ldrh	r4, [r1, #42]	; 0x2a
 800151a:	429c      	cmp	r4, r3
 800151c:	d06b      	beq.n	80015f6 <HAL_UART_RxCpltCallback+0x156>
 		for (i = 0; i < 3; i++) {
 800151e:	7002      	strb	r2, [r0, #0]
 8001520:	e7c8      	b.n	80014b4 <HAL_UART_RxCpltCallback+0x14>
		MIDI_IN_LED_OFF;
 8001522:	4841      	ldr	r0, [pc, #260]	; (8001628 <HAL_UART_RxCpltCallback+0x188>)
 8001524:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001528:	f002 f8da 	bl	80036e0 <HAL_GPIO_WritePin>
 800152c:	e7da      	b.n	80014e4 <HAL_UART_RxCpltCallback+0x44>
 	if ((midi_tmp[0] == 0x90) && (notes_on <= 2)) {
 800152e:	4c3b      	ldr	r4, [pc, #236]	; (800161c <HAL_UART_RxCpltCallback+0x17c>)
 8001530:	7822      	ldrb	r2, [r4, #0]
 8001532:	2a02      	cmp	r2, #2
 8001534:	d85d      	bhi.n	80015f2 <HAL_UART_RxCpltCallback+0x152>
 			midi_msg[i] = midi_tmp[i];
 8001536:	7846      	ldrb	r6, [r0, #1]
 8001538:	7887      	ldrb	r7, [r0, #2]
 		voices[notes_on].env_val = 0;
 800153a:	4939      	ldr	r1, [pc, #228]	; (8001620 <HAL_UART_RxCpltCallback+0x180>)
 		voices[notes_on].note = NOTE;
 800153c:	f8df c0f4 	ldr.w	ip, [pc, #244]	; 8001634 <HAL_UART_RxCpltCallback+0x194>
 8001540:	1c70      	adds	r0, r6, #1
 		voices[notes_on].env_val = 0;
 8001542:	eb02 0582 	add.w	r5, r2, r2, lsl #2
 		notes_on++;
 8001546:	3201      	adds	r2, #1
 		voices[notes_on].note = NOTE;
 8001548:	f83c c010 	ldrh.w	ip, [ip, r0, lsl #1]
 		notes_on++;
 800154c:	b2d2      	uxtb	r2, r2
 		voices[notes_on].env_val = 0;
 800154e:	eb01 0085 	add.w	r0, r1, r5, lsl #2
 		notes_on++;
 8001552:	7022      	strb	r2, [r4, #0]
 		voices[notes_on].env_val = 0;
 8001554:	f04f 0e00 	mov.w	lr, #0
 		voices[notes_on].gate = ON;
 8001558:	f240 1401 	movw	r4, #257	; 0x101
 		voices[notes_on].env_val = 0;
 800155c:	f8c0 e010 	str.w	lr, [r0, #16]
 		voices[notes_on].gate = ON;
 8001560:	f821 4025 	strh.w	r4, [r1, r5, lsl #2]
 			midi_msg[i] = midi_tmp[i];
 8001564:	4c32      	ldr	r4, [pc, #200]	; (8001630 <HAL_UART_RxCpltCallback+0x190>)
 		voices[notes_on].note = NOTE;
 8001566:	f8a0 c002 	strh.w	ip, [r0, #2]
 		voices[notes_on].state = ATTACK;
 800156a:	2500      	movs	r5, #0
 			midi_msg[i] = midi_tmp[i];
 800156c:	7066      	strb	r6, [r4, #1]
 800156e:	7023      	strb	r3, [r4, #0]
 8001570:	70a7      	strb	r7, [r4, #2]
 		voices[notes_on].state = ATTACK;
 8001572:	7305      	strb	r5, [r0, #12]
 		voices[notes_on].lut_index = 0;
 8001574:	7105      	strb	r5, [r0, #4]
 	if ((midi_tmp[0] == 0x90) && (notes_on <= 2)) {
 8001576:	e79d      	b.n	80014b4 <HAL_UART_RxCpltCallback+0x14>
 		TIM6->ARR = ARR_VAL(voices[0].note);
 8001578:	8849      	ldrh	r1, [r1, #2]
 800157a:	4c2f      	ldr	r4, [pc, #188]	; (8001638 <HAL_UART_RxCpltCallback+0x198>)
 		multiplier = 3.0;
 800157c:	4829      	ldr	r0, [pc, #164]	; (8001624 <HAL_UART_RxCpltCallback+0x184>)
 		TIM6->ARR = ARR_VAL(voices[0].note);
 800157e:	4b2f      	ldr	r3, [pc, #188]	; (800163c <HAL_UART_RxCpltCallback+0x19c>)
 8001580:	01c9      	lsls	r1, r1, #7
 8001582:	fbb3 f3f1 	udiv	r3, r3, r1
 		multiplier = 3.0;
 8001586:	492e      	ldr	r1, [pc, #184]	; (8001640 <HAL_UART_RxCpltCallback+0x1a0>)
 		TIM6->ARR = ARR_VAL(voices[0].note);
 8001588:	3b01      	subs	r3, #1
 800158a:	62e3      	str	r3, [r4, #44]	; 0x2c
 		multiplier = 3.0;
 800158c:	6001      	str	r1, [r0, #0]
 		break;
 800158e:	e7a2      	b.n	80014d6 <HAL_UART_RxCpltCallback+0x36>
 		TIM6->ARR = ARR_VAL(voices[0].note);
 8001590:	884c      	ldrh	r4, [r1, #2]
 		TIM7->ARR = ARR_VAL(voices[1].note);
 8001592:	8ac8      	ldrh	r0, [r1, #22]
 		TIM6->ARR = ARR_VAL(voices[0].note);
 8001594:	4f28      	ldr	r7, [pc, #160]	; (8001638 <HAL_UART_RxCpltCallback+0x198>)
 		TIM8->ARR = ARR_VAL(voices[2].note);
 8001596:	f8b1 c02a 	ldrh.w	ip, [r1, #42]	; 0x2a
 		TIM6->ARR = ARR_VAL(voices[0].note);
 800159a:	4b28      	ldr	r3, [pc, #160]	; (800163c <HAL_UART_RxCpltCallback+0x19c>)
 		TIM7->ARR = ARR_VAL(voices[1].note);
 800159c:	4e29      	ldr	r6, [pc, #164]	; (8001644 <HAL_UART_RxCpltCallback+0x1a4>)
 		TIM8->ARR = ARR_VAL(voices[2].note);
 800159e:	4d2a      	ldr	r5, [pc, #168]	; (8001648 <HAL_UART_RxCpltCallback+0x1a8>)
 		TIM6->ARR = ARR_VAL(voices[0].note);
 80015a0:	01e4      	lsls	r4, r4, #7
 		TIM7->ARR = ARR_VAL(voices[1].note);
 80015a2:	01c1      	lsls	r1, r0, #7
 		TIM6->ARR = ARR_VAL(voices[0].note);
 80015a4:	fbb3 f0f4 	udiv	r0, r3, r4
 80015a8:	3801      	subs	r0, #1
 80015aa:	62f8      	str	r0, [r7, #44]	; 0x2c
 		TIM7->ARR = ARR_VAL(voices[1].note);
 80015ac:	fbb3 f1f1 	udiv	r1, r3, r1
 		multiplier = 1.0;
 80015b0:	481c      	ldr	r0, [pc, #112]	; (8001624 <HAL_UART_RxCpltCallback+0x184>)
 		TIM7->ARR = ARR_VAL(voices[1].note);
 80015b2:	3901      	subs	r1, #1
 80015b4:	62f1      	str	r1, [r6, #44]	; 0x2c
 		TIM8->ARR = ARR_VAL(voices[2].note);
 80015b6:	ea4f 14cc 	mov.w	r4, ip, lsl #7
 		multiplier = 1.0;
 80015ba:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 		TIM8->ARR = ARR_VAL(voices[2].note);
 80015be:	fbb3 f3f4 	udiv	r3, r3, r4
 80015c2:	3b01      	subs	r3, #1
 80015c4:	62eb      	str	r3, [r5, #44]	; 0x2c
 		multiplier = 1.0;
 80015c6:	6001      	str	r1, [r0, #0]
 		break;
 80015c8:	e785      	b.n	80014d6 <HAL_UART_RxCpltCallback+0x36>
 		TIM6->ARR = ARR_VAL(voices[0].note);
 80015ca:	884b      	ldrh	r3, [r1, #2]
 		TIM7->ARR = ARR_VAL(voices[1].note);
 80015cc:	8ac8      	ldrh	r0, [r1, #22]
 		TIM6->ARR = ARR_VAL(voices[0].note);
 80015ce:	4e1a      	ldr	r6, [pc, #104]	; (8001638 <HAL_UART_RxCpltCallback+0x198>)
 80015d0:	491a      	ldr	r1, [pc, #104]	; (800163c <HAL_UART_RxCpltCallback+0x19c>)
 		TIM7->ARR = ARR_VAL(voices[1].note);
 80015d2:	4d1c      	ldr	r5, [pc, #112]	; (8001644 <HAL_UART_RxCpltCallback+0x1a4>)
 		multiplier = 1.5;
 80015d4:	4c13      	ldr	r4, [pc, #76]	; (8001624 <HAL_UART_RxCpltCallback+0x184>)
 		TIM6->ARR = ARR_VAL(voices[0].note);
 80015d6:	01db      	lsls	r3, r3, #7
 80015d8:	fbb1 f3f3 	udiv	r3, r1, r3
 80015dc:	3b01      	subs	r3, #1
 80015de:	62f3      	str	r3, [r6, #44]	; 0x2c
 		TIM7->ARR = ARR_VAL(voices[1].note);
 80015e0:	01c0      	lsls	r0, r0, #7
 		multiplier = 1.5;
 80015e2:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 		TIM7->ARR = ARR_VAL(voices[1].note);
 80015e6:	fbb1 f1f0 	udiv	r1, r1, r0
 80015ea:	3901      	subs	r1, #1
 80015ec:	62e9      	str	r1, [r5, #44]	; 0x2c
 		multiplier = 1.5;
 80015ee:	6023      	str	r3, [r4, #0]
 		break;
 80015f0:	e771      	b.n	80014d6 <HAL_UART_RxCpltCallback+0x36>
 80015f2:	490b      	ldr	r1, [pc, #44]	; (8001620 <HAL_UART_RxCpltCallback+0x180>)
 80015f4:	e75e      	b.n	80014b4 <HAL_UART_RxCpltCallback+0x14>
 				notes_on--;
 80015f6:	3a01      	subs	r2, #1
 				voices[i].gate = OFF;
 80015f8:	2300      	movs	r3, #0
 				notes_on--;
 80015fa:	b2d2      	uxtb	r2, r2
 				voices[i].gate = OFF;
 80015fc:	f881 3028 	strb.w	r3, [r1, #40]	; 0x28
 		for (i = 0; i < 3; i++) {
 8001600:	7002      	strb	r2, [r0, #0]
 8001602:	e757      	b.n	80014b4 <HAL_UART_RxCpltCallback+0x14>
 				notes_on--;
 8001604:	3a01      	subs	r2, #1
 				voices[i].gate = OFF;
 8001606:	2400      	movs	r4, #0
 				notes_on--;
 8001608:	b2d2      	uxtb	r2, r2
 				voices[i].gate = OFF;
 800160a:	750c      	strb	r4, [r1, #20]
 				notes_on--;
 800160c:	e784      	b.n	8001518 <HAL_UART_RxCpltCallback+0x78>
 800160e:	3a01      	subs	r2, #1
 				voices[i].gate = OFF;
 8001610:	2400      	movs	r4, #0
 				notes_on--;
 8001612:	b2d2      	uxtb	r2, r2
 				voices[i].gate = OFF;
 8001614:	700c      	strb	r4, [r1, #0]
 				notes_on--;
 8001616:	e77c      	b.n	8001512 <HAL_UART_RxCpltCallback+0x72>
 8001618:	20000774 	.word	0x20000774
 800161c:	20000432 	.word	0x20000432
 8001620:	20000654 	.word	0x20000654
 8001624:	20000004 	.word	0x20000004
 8001628:	48000400 	.word	0x48000400
 800162c:	200005bc 	.word	0x200005bc
 8001630:	200004e0 	.word	0x200004e0
 8001634:	080057a8 	.word	0x080057a8
 8001638:	40001000 	.word	0x40001000
 800163c:	0a21fe80 	.word	0x0a21fe80
 8001640:	40400000 	.word	0x40400000
 8001644:	40001400 	.word	0x40001400
 8001648:	40013400 	.word	0x40013400

0800164c <SystemClock_Config>:
{
 800164c:	b530      	push	{r4, r5, lr}
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800164e:	2100      	movs	r1, #0
{
 8001650:	b0ab      	sub	sp, #172	; 0xac
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001652:	460c      	mov	r4, r1
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001654:	2238      	movs	r2, #56	; 0x38
 8001656:	a806      	add	r0, sp, #24
 8001658:	f004 f892 	bl	8005780 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800165c:	4621      	mov	r1, r4
 800165e:	2254      	movs	r2, #84	; 0x54
 8001660:	a814      	add	r0, sp, #80	; 0x50
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001662:	e9cd 4400 	strd	r4, r4, [sp]
 8001666:	e9cd 4402 	strd	r4, r4, [sp, #8]
 800166a:	9404      	str	r4, [sp, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800166c:	f004 f888 	bl	8005780 <memset>
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8001670:	4620      	mov	r0, r4
 8001672:	f002 f83b 	bl	80036ec <HAL_PWREx_ControlVoltageScaling>
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8001676:	2404      	movs	r4, #4
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001678:	2302      	movs	r3, #2
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800167a:	f44f 7580 	mov.w	r5, #256	; 0x100
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800167e:	2140      	movs	r1, #64	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 85;
 8001680:	2255      	movs	r2, #85	; 0x55
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001682:	a806      	add	r0, sp, #24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001684:	e9cd 330d 	strd	r3, r3, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001688:	e9cd 3311 	strd	r3, r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800168c:	e9cd 5109 	strd	r5, r1, [sp, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLN = 85;
 8001690:	e9cd 420f 	strd	r4, r2, [sp, #60]	; 0x3c
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001694:	9306      	str	r3, [sp, #24]
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001696:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001698:	f002 f8ae 	bl	80037f8 <HAL_RCC_OscConfig>
 800169c:	b108      	cbz	r0, 80016a2 <SystemClock_Config+0x56>
 800169e:	b672      	cpsid	i
  while (1)
 80016a0:	e7fe      	b.n	80016a0 <SystemClock_Config+0x54>
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80016a2:	4603      	mov	r3, r0
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80016a4:	4621      	mov	r1, r4
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80016a6:	2503      	movs	r5, #3
 80016a8:	240f      	movs	r4, #15
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80016aa:	9304      	str	r3, [sp, #16]
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80016ac:	2200      	movs	r2, #0
 80016ae:	2300      	movs	r3, #0
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80016b0:	4668      	mov	r0, sp
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80016b2:	e9cd 4500 	strd	r4, r5, [sp]
 80016b6:	e9cd 2302 	strd	r2, r3, [sp, #8]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80016ba:	f002 fb21 	bl	8003d00 <HAL_RCC_ClockConfig>
 80016be:	b108      	cbz	r0, 80016c4 <SystemClock_Config+0x78>
 80016c0:	b672      	cpsid	i
  while (1)
 80016c2:	e7fe      	b.n	80016c2 <SystemClock_Config+0x76>
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_ADC12
 80016c4:	4c08      	ldr	r4, [pc, #32]	; (80016e8 <SystemClock_Config+0x9c>)
 80016c6:	2500      	movs	r5, #0
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 80016c8:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  PeriphClkInit.Adc345ClockSelection = RCC_ADC345CLKSOURCE_SYSCLK;
 80016cc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80016d0:	a814      	add	r0, sp, #80	; 0x50
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_ADC12
 80016d2:	e9cd 4514 	strd	r4, r5, [sp, #80]	; 0x50
  PeriphClkInit.Adc345ClockSelection = RCC_ADC345CLKSOURCE_SYSCLK;
 80016d6:	e9cd 2325 	strd	r2, r3, [sp, #148]	; 0x94
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80016da:	f002 fc4d 	bl	8003f78 <HAL_RCCEx_PeriphCLKConfig>
 80016de:	b108      	cbz	r0, 80016e4 <SystemClock_Config+0x98>
 80016e0:	b672      	cpsid	i
  while (1)
 80016e2:	e7fe      	b.n	80016e2 <SystemClock_Config+0x96>
}
 80016e4:	b02b      	add	sp, #172	; 0xac
 80016e6:	bd30      	pop	{r4, r5, pc}
 80016e8:	00018001 	.word	0x00018001

080016ec <main>:
{
 80016ec:	b580      	push	{r7, lr}
		voices[i].gate = OFF;
 80016ee:	2400      	movs	r4, #0
{
 80016f0:	b092      	sub	sp, #72	; 0x48
	HAL_Init();
 80016f2:	f000 fc0d 	bl	8001f10 <HAL_Init>
	SystemClock_Config();
 80016f6:	f7ff ffa9 	bl	800164c <SystemClock_Config>
		voices[i].gate = OFF;
 80016fa:	4ba8      	ldr	r3, [pc, #672]	; (800199c <main+0x2b0>)
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80016fc:	4aa8      	ldr	r2, [pc, #672]	; (80019a0 <main+0x2b4>)
		voices[i].gate = OFF;
 80016fe:	801c      	strh	r4, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001700:	e9cd 4406 	strd	r4, r4, [sp, #24]
 8001704:	e9cd 4408 	strd	r4, r4, [sp, #32]
 8001708:	940a      	str	r4, [sp, #40]	; 0x28
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800170a:	6cd1      	ldr	r1, [r2, #76]	; 0x4c
		voices[i].lut_index = 0;
 800170c:	711c      	strb	r4, [r3, #4]
		voices[i].env_val = 0.0;
 800170e:	2500      	movs	r5, #0
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001710:	f041 0101 	orr.w	r1, r1, #1
		voices[i].env_val = 0.0;
 8001714:	611d      	str	r5, [r3, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001716:	64d1      	str	r1, [r2, #76]	; 0x4c
 8001718:	6cd1      	ldr	r1, [r2, #76]	; 0x4c
		voices[i].gate = OFF;
 800171a:	829c      	strh	r4, [r3, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800171c:	f001 0101 	and.w	r1, r1, #1
 8001720:	9100      	str	r1, [sp, #0]
 8001722:	9900      	ldr	r1, [sp, #0]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001724:	6cd1      	ldr	r1, [r2, #76]	; 0x4c
		voices[i].lut_index = 0;
 8001726:	761c      	strb	r4, [r3, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001728:	f041 0102 	orr.w	r1, r1, #2
 800172c:	64d1      	str	r1, [r2, #76]	; 0x4c
 800172e:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_RESET);
 8001730:	489c      	ldr	r0, [pc, #624]	; (80019a4 <main+0x2b8>)
		voices[i].env_val = 0.0;
 8001732:	625d      	str	r5, [r3, #36]	; 0x24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001734:	f002 0202 	and.w	r2, r2, #2
 8001738:	9201      	str	r2, [sp, #4]
		voices[i].env_val = 0.0;
 800173a:	639d      	str	r5, [r3, #56]	; 0x38
		voices[i].gate = OFF;
 800173c:	851c      	strh	r4, [r3, #40]	; 0x28
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_RESET);
 800173e:	4622      	mov	r2, r4
 8001740:	f44f 6100 	mov.w	r1, #2048	; 0x800
		voices[i].lut_index = 0;
 8001744:	f883 402c 	strb.w	r4, [r3, #44]	; 0x2c
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001748:	9e01      	ldr	r6, [sp, #4]
  hdac1.Instance = DAC1;
 800174a:	4d97      	ldr	r5, [pc, #604]	; (80019a8 <main+0x2bc>)
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_RESET);
 800174c:	f001 ffc8 	bl	80036e0 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001750:	2600      	movs	r6, #0
 8001752:	2301      	movs	r3, #1
 8001754:	f44f 6200 	mov.w	r2, #2048	; 0x800
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001758:	4892      	ldr	r0, [pc, #584]	; (80019a4 <main+0x2b8>)
 800175a:	a906      	add	r1, sp, #24
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 800175c:	2700      	movs	r7, #0
 800175e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8001762:	e9cd 6708 	strd	r6, r7, [sp, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001766:	f001 fec7 	bl	80034f8 <HAL_GPIO_Init>
  DAC_ChannelConfTypeDef sConfig = {0};
 800176a:	4621      	mov	r1, r4
 800176c:	a806      	add	r0, sp, #24
 800176e:	2230      	movs	r2, #48	; 0x30
 8001770:	f004 f806 	bl	8005780 <memset>
  hdac1.Instance = DAC1;
 8001774:	4b8d      	ldr	r3, [pc, #564]	; (80019ac <main+0x2c0>)
 8001776:	602b      	str	r3, [r5, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8001778:	4628      	mov	r0, r5
 800177a:	f001 fcdf 	bl	800313c <HAL_DAC_Init>
 800177e:	b108      	cbz	r0, 8001784 <main+0x98>
 8001780:	b672      	cpsid	i
  while (1)
 8001782:	e7fe      	b.n	8001782 <main+0x96>
  sConfig.DAC_SignedFormat = DISABLE;
 8001784:	4602      	mov	r2, r0
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 8001786:	2302      	movs	r3, #2
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8001788:	4628      	mov	r0, r5
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 800178a:	2404      	movs	r4, #4
 800178c:	2500      	movs	r5, #0
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 800178e:	a906      	add	r1, sp, #24
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 8001790:	9306      	str	r3, [sp, #24]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8001792:	e9cd 6708 	strd	r6, r7, [sp, #32]
 8001796:	e9cd 670a 	strd	r6, r7, [sp, #40]	; 0x28
 800179a:	e9cd 450c 	strd	r4, r5, [sp, #48]	; 0x30
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 800179e:	f8ad 201c 	strh.w	r2, [sp, #28]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80017a2:	f001 fd4b 	bl	800323c <HAL_DAC_ConfigChannel>
 80017a6:	4603      	mov	r3, r0
 80017a8:	b9b0      	cbnz	r0, 80017d8 <main+0xec>
  huart1.Instance = USART1;
 80017aa:	4c81      	ldr	r4, [pc, #516]	; (80019b0 <main+0x2c4>)
 80017ac:	4981      	ldr	r1, [pc, #516]	; (80019b4 <main+0x2c8>)
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80017ae:	60a0      	str	r0, [r4, #8]
  huart1.Init.BaudRate = 31250;
 80017b0:	f647 2212 	movw	r2, #31250	; 0x7a12
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80017b4:	4620      	mov	r0, r4
  huart1.Init.Mode = UART_MODE_RX;
 80017b6:	2704      	movs	r7, #4
  huart1.Init.BaudRate = 31250;
 80017b8:	e9c4 1200 	strd	r1, r2, [r4]
  huart1.Init.Parity = UART_PARITY_NONE;
 80017bc:	e9c4 3303 	strd	r3, r3, [r4, #12]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80017c0:	e9c4 3306 	strd	r3, r3, [r4, #24]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80017c4:	e9c4 3308 	strd	r3, r3, [r4, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80017c8:	62a3      	str	r3, [r4, #40]	; 0x28
  huart1.Init.Mode = UART_MODE_RX;
 80017ca:	6167      	str	r7, [r4, #20]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80017cc:	f003 fd3c 	bl	8005248 <HAL_UART_Init>
 80017d0:	4601      	mov	r1, r0
 80017d2:	b118      	cbz	r0, 80017dc <main+0xf0>
 80017d4:	b672      	cpsid	i
  while (1)
 80017d6:	e7fe      	b.n	80017d6 <main+0xea>
 80017d8:	b672      	cpsid	i
 80017da:	e7fe      	b.n	80017da <main+0xee>
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80017dc:	4620      	mov	r0, r4
 80017de:	f003 ff2f 	bl	8005640 <HAL_UARTEx_SetTxFifoThreshold>
 80017e2:	4601      	mov	r1, r0
 80017e4:	b108      	cbz	r0, 80017ea <main+0xfe>
 80017e6:	b672      	cpsid	i
  while (1)
 80017e8:	e7fe      	b.n	80017e8 <main+0xfc>
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80017ea:	4620      	mov	r0, r4
 80017ec:	f003 ff66 	bl	80056bc <HAL_UARTEx_SetRxFifoThreshold>
 80017f0:	b108      	cbz	r0, 80017f6 <main+0x10a>
 80017f2:	b672      	cpsid	i
  while (1)
 80017f4:	e7fe      	b.n	80017f4 <main+0x108>
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80017f6:	4620      	mov	r0, r4
 80017f8:	f003 ff04 	bl	8005604 <HAL_UARTEx_DisableFifoMode>
 80017fc:	4603      	mov	r3, r0
 80017fe:	b108      	cbz	r0, 8001804 <main+0x118>
 8001800:	b672      	cpsid	i
  while (1)
 8001802:	e7fe      	b.n	8001802 <main+0x116>
  hadc1.Instance = ADC1;
 8001804:	4c6c      	ldr	r4, [pc, #432]	; (80019b8 <main+0x2cc>)
  ADC_MultiModeTypeDef multimode = {0};
 8001806:	9006      	str	r0, [sp, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001808:	f44f 7880 	mov.w	r8, #256	; 0x100
  hadc1.Instance = ADC1;
 800180c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001810:	4620      	mov	r0, r4
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001812:	f44f 3940 	mov.w	r9, #196608	; 0x30000
  hadc1.Init.NbrOfConversion = 1;
 8001816:	2601      	movs	r6, #1
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001818:	f8a4 801c 	strh.w	r8, [r4, #28]
  ADC_MultiModeTypeDef multimode = {0};
 800181c:	e9cd 3307 	strd	r3, r3, [sp, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001820:	e9c4 3302 	strd	r3, r3, [r4, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001824:	e9c4 3304 	strd	r3, r3, [r4, #16]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001828:	e9c4 330b 	strd	r3, r3, [r4, #44]	; 0x2c
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800182c:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001830:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001834:	63e3      	str	r3, [r4, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8001836:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800183a:	e9c4 2900 	strd	r2, r9, [r4]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800183e:	61a7      	str	r7, [r4, #24]
  hadc1.Init.NbrOfConversion = 1;
 8001840:	6226      	str	r6, [r4, #32]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001842:	f000 fb99 	bl	8001f78 <HAL_ADC_Init>
 8001846:	4603      	mov	r3, r0
 8001848:	b108      	cbz	r0, 800184e <main+0x162>
 800184a:	b672      	cpsid	i
  while (1)
 800184c:	e7fe      	b.n	800184c <main+0x160>
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800184e:	4620      	mov	r0, r4
 8001850:	a906      	add	r1, sp, #24
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001852:	9306      	str	r3, [sp, #24]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001854:	f001 fb4c 	bl	8002ef0 <HAL_ADCEx_MultiModeConfigChannel>
 8001858:	4605      	mov	r5, r0
 800185a:	b108      	cbz	r0, 8001860 <main+0x174>
 800185c:	b672      	cpsid	i
  while (1)
 800185e:	e7fe      	b.n	800185e <main+0x172>
  hadc3.Instance = ADC3;
 8001860:	4c56      	ldr	r4, [pc, #344]	; (80019bc <main+0x2d0>)
  ADC_MultiModeTypeDef multimode = {0};
 8001862:	9002      	str	r0, [sp, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001864:	4601      	mov	r1, r0
 8001866:	2220      	movs	r2, #32
 8001868:	a806      	add	r0, sp, #24
  ADC_MultiModeTypeDef multimode = {0};
 800186a:	e9cd 5503 	strd	r5, r5, [sp, #12]
  ADC_ChannelConfTypeDef sConfig = {0};
 800186e:	f003 ff87 	bl	8005780 <memset>
  hadc3.Instance = ADC3;
 8001872:	4b53      	ldr	r3, [pc, #332]	; (80019c0 <main+0x2d4>)
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8001874:	f8a4 801c 	strh.w	r8, [r4, #28]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8001878:	4620      	mov	r0, r4
  hadc3.Instance = ADC3;
 800187a:	6023      	str	r3, [r4, #0]
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800187c:	e9c4 5502 	strd	r5, r5, [r4, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001880:	e9c4 5504 	strd	r5, r5, [r4, #16]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001884:	e9c4 550b 	strd	r5, r5, [r4, #44]	; 0x2c
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001888:	f8c4 9004 	str.w	r9, [r4, #4]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800188c:	61a7      	str	r7, [r4, #24]
  hadc3.Init.NbrOfConversion = 1;
 800188e:	6226      	str	r6, [r4, #32]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8001890:	f884 5024 	strb.w	r5, [r4, #36]	; 0x24
  hadc3.Init.DMAContinuousRequests = ENABLE;
 8001894:	f884 6038 	strb.w	r6, [r4, #56]	; 0x38
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001898:	63e5      	str	r5, [r4, #60]	; 0x3c
  hadc3.Init.OversamplingMode = DISABLE;
 800189a:	f884 5040 	strb.w	r5, [r4, #64]	; 0x40
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 800189e:	f000 fb6b 	bl	8001f78 <HAL_ADC_Init>
 80018a2:	4603      	mov	r3, r0
 80018a4:	b108      	cbz	r0, 80018aa <main+0x1be>
 80018a6:	b672      	cpsid	i
  while (1)
 80018a8:	e7fe      	b.n	80018a8 <main+0x1bc>
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc3, &multimode) != HAL_OK)
 80018aa:	4620      	mov	r0, r4
 80018ac:	a902      	add	r1, sp, #8
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80018ae:	9302      	str	r3, [sp, #8]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc3, &multimode) != HAL_OK)
 80018b0:	f001 fb1e 	bl	8002ef0 <HAL_ADCEx_MultiModeConfigChannel>
 80018b4:	b108      	cbz	r0, 80018ba <main+0x1ce>
 80018b6:	b672      	cpsid	i
  while (1)
 80018b8:	e7fe      	b.n	80018b8 <main+0x1cc>
  sConfig.Channel = ADC_CHANNEL_1;
 80018ba:	4a42      	ldr	r2, [pc, #264]	; (80019c4 <main+0x2d8>)
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80018bc:	483f      	ldr	r0, [pc, #252]	; (80019bc <main+0x2d0>)
  sConfig.Channel = ADC_CHANNEL_1;
 80018be:	2306      	movs	r3, #6
 80018c0:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80018c4:	2200      	movs	r2, #0
 80018c6:	237f      	movs	r3, #127	; 0x7f
 80018c8:	e9cd 2308 	strd	r2, r3, [sp, #32]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80018cc:	a906      	add	r1, sp, #24
  sConfig.Channel = ADC_CHANNEL_1;
 80018ce:	2204      	movs	r2, #4
 80018d0:	2300      	movs	r3, #0
 80018d2:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80018d6:	f000 fe79 	bl	80025cc <HAL_ADC_ConfigChannel>
 80018da:	b108      	cbz	r0, 80018e0 <main+0x1f4>
 80018dc:	b672      	cpsid	i
  while (1)
 80018de:	e7fe      	b.n	80018de <main+0x1f2>
  htim2.Instance = TIM2;
 80018e0:	4c39      	ldr	r4, [pc, #228]	; (80019c8 <main+0x2dc>)
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80018e2:	9006      	str	r0, [sp, #24]
 80018e4:	e9cd 0007 	strd	r0, r0, [sp, #28]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80018e8:	e9cd 0002 	strd	r0, r0, [sp, #8]
  htim2.Instance = TIM2;
 80018ec:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  htim2.Init.Prescaler = 99;
 80018f0:	2263      	movs	r2, #99	; 0x63
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80018f2:	9009      	str	r0, [sp, #36]	; 0x24
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80018f4:	9004      	str	r0, [sp, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018f6:	60a0      	str	r0, [r4, #8]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80018f8:	6120      	str	r0, [r4, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80018fa:	61a0      	str	r0, [r4, #24]
  htim2.Init.Period = 16999;
 80018fc:	f244 2367 	movw	r3, #16999	; 0x4267
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001900:	4620      	mov	r0, r4
  htim2.Instance = TIM2;
 8001902:	6021      	str	r1, [r4, #0]
  htim2.Init.Prescaler = 99;
 8001904:	6062      	str	r2, [r4, #4]
  htim2.Init.Period = 16999;
 8001906:	60e3      	str	r3, [r4, #12]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001908:	f002 fcbe 	bl	8004288 <HAL_TIM_Base_Init>
 800190c:	b108      	cbz	r0, 8001912 <main+0x226>
 800190e:	b672      	cpsid	i
  while (1)
 8001910:	e7fe      	b.n	8001910 <main+0x224>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001912:	f44f 5580 	mov.w	r5, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001916:	a906      	add	r1, sp, #24
 8001918:	4620      	mov	r0, r4
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800191a:	9506      	str	r5, [sp, #24]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800191c:	f002 fd8e 	bl	800443c <HAL_TIM_ConfigClockSource>
 8001920:	4603      	mov	r3, r0
 8001922:	b108      	cbz	r0, 8001928 <main+0x23c>
 8001924:	b672      	cpsid	i
  while (1)
 8001926:	e7fe      	b.n	8001926 <main+0x23a>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001928:	4620      	mov	r0, r4
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800192a:	2720      	movs	r7, #32
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800192c:	a902      	add	r1, sp, #8
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800192e:	9304      	str	r3, [sp, #16]
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001930:	9702      	str	r7, [sp, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001932:	f002 ff4f 	bl	80047d4 <HAL_TIMEx_MasterConfigSynchronization>
 8001936:	4603      	mov	r3, r0
 8001938:	b108      	cbz	r0, 800193e <main+0x252>
 800193a:	b672      	cpsid	i
  while (1)
 800193c:	e7fe      	b.n	800193c <main+0x250>
  htim6.Instance = TIM6;
 800193e:	4c23      	ldr	r4, [pc, #140]	; (80019cc <main+0x2e0>)
 8001940:	4a23      	ldr	r2, [pc, #140]	; (80019d0 <main+0x2e4>)
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001942:	9006      	str	r0, [sp, #24]
  htim6.Init.Period = 65535;
 8001944:	f64f 76ff 	movw	r6, #65535	; 0xffff
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001948:	4620      	mov	r0, r4
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800194a:	e9cd 3307 	strd	r3, r3, [sp, #28]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800194e:	e9c4 3301 	strd	r3, r3, [r4, #4]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001952:	61a3      	str	r3, [r4, #24]
  htim6.Instance = TIM6;
 8001954:	6022      	str	r2, [r4, #0]
  htim6.Init.Period = 65535;
 8001956:	60e6      	str	r6, [r4, #12]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001958:	f002 fc96 	bl	8004288 <HAL_TIM_Base_Init>
 800195c:	4603      	mov	r3, r0
 800195e:	b108      	cbz	r0, 8001964 <main+0x278>
 8001960:	b672      	cpsid	i
  while (1)
 8001962:	e7fe      	b.n	8001962 <main+0x276>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001964:	4620      	mov	r0, r4
 8001966:	a906      	add	r1, sp, #24
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001968:	9308      	str	r3, [sp, #32]
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800196a:	9706      	str	r7, [sp, #24]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800196c:	f002 ff32 	bl	80047d4 <HAL_TIMEx_MasterConfigSynchronization>
 8001970:	4603      	mov	r3, r0
 8001972:	b108      	cbz	r0, 8001978 <main+0x28c>
 8001974:	b672      	cpsid	i
  while (1)
 8001976:	e7fe      	b.n	8001976 <main+0x28a>
  htim7.Instance = TIM7;
 8001978:	4c16      	ldr	r4, [pc, #88]	; (80019d4 <main+0x2e8>)
 800197a:	4a17      	ldr	r2, [pc, #92]	; (80019d8 <main+0x2ec>)
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800197c:	9006      	str	r0, [sp, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 800197e:	4620      	mov	r0, r4
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001980:	e9cd 3307 	strd	r3, r3, [sp, #28]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001984:	e9c4 3301 	strd	r3, r3, [r4, #4]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001988:	61a3      	str	r3, [r4, #24]
  htim7.Init.Period = 65535;
 800198a:	60e6      	str	r6, [r4, #12]
  htim7.Instance = TIM7;
 800198c:	6022      	str	r2, [r4, #0]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 800198e:	f002 fc7b 	bl	8004288 <HAL_TIM_Base_Init>
 8001992:	4603      	mov	r3, r0
 8001994:	b310      	cbz	r0, 80019dc <main+0x2f0>
 8001996:	b672      	cpsid	i
  while (1)
 8001998:	e7fe      	b.n	8001998 <main+0x2ac>
 800199a:	bf00      	nop
 800199c:	20000654 	.word	0x20000654
 80019a0:	40021000 	.word	0x40021000
 80019a4:	48000400 	.word	0x48000400
 80019a8:	20000480 	.word	0x20000480
 80019ac:	50000800 	.word	0x50000800
 80019b0:	200005bc 	.word	0x200005bc
 80019b4:	40013800 	.word	0x40013800
 80019b8:	200004e4 	.word	0x200004e4
 80019bc:	20000550 	.word	0x20000550
 80019c0:	50000400 	.word	0x50000400
 80019c4:	04300002 	.word	0x04300002
 80019c8:	200006dc 	.word	0x200006dc
 80019cc:	20000690 	.word	0x20000690
 80019d0:	40001000 	.word	0x40001000
 80019d4:	20000728 	.word	0x20000728
 80019d8:	40001400 	.word	0x40001400
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80019dc:	4620      	mov	r0, r4
 80019de:	a906      	add	r1, sp, #24
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80019e0:	9308      	str	r3, [sp, #32]
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80019e2:	9706      	str	r7, [sp, #24]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80019e4:	f002 fef6 	bl	80047d4 <HAL_TIMEx_MasterConfigSynchronization>
 80019e8:	4603      	mov	r3, r0
 80019ea:	b108      	cbz	r0, 80019f0 <main+0x304>
 80019ec:	b672      	cpsid	i
  while (1)
 80019ee:	e7fe      	b.n	80019ee <main+0x302>
  htim8.Instance = TIM8;
 80019f0:	4c24      	ldr	r4, [pc, #144]	; (8001a84 <main+0x398>)
 80019f2:	4a25      	ldr	r2, [pc, #148]	; (8001a88 <main+0x39c>)
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80019f4:	9004      	str	r0, [sp, #16]
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80019f6:	e9cd 0006 	strd	r0, r0, [sp, #24]
 80019fa:	e9cd 0008 	strd	r0, r0, [sp, #32]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80019fe:	e9cd 0002 	strd	r0, r0, [sp, #8]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a02:	e9c4 0001 	strd	r0, r0, [r4, #4]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8001a06:	4620      	mov	r0, r4
  htim8.Init.RepetitionCounter = 0;
 8001a08:	e9c4 3304 	strd	r3, r3, [r4, #16]
  htim8.Init.Period = 65535;
 8001a0c:	60e6      	str	r6, [r4, #12]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a0e:	61a3      	str	r3, [r4, #24]
  htim8.Instance = TIM8;
 8001a10:	6022      	str	r2, [r4, #0]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8001a12:	f002 fc39 	bl	8004288 <HAL_TIM_Base_Init>
 8001a16:	b108      	cbz	r0, 8001a1c <main+0x330>
 8001a18:	b672      	cpsid	i
  while (1)
 8001a1a:	e7fe      	b.n	8001a1a <main+0x32e>
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8001a1c:	a906      	add	r1, sp, #24
 8001a1e:	4620      	mov	r0, r4
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001a20:	9506      	str	r5, [sp, #24]
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8001a22:	f002 fd0b 	bl	800443c <HAL_TIM_ConfigClockSource>
 8001a26:	b108      	cbz	r0, 8001a2c <main+0x340>
 8001a28:	b672      	cpsid	i
  while (1)
 8001a2a:	e7fe      	b.n	8001a2a <main+0x33e>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001a2c:	2220      	movs	r2, #32
 8001a2e:	2300      	movs	r3, #0
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a30:	2400      	movs	r4, #0
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001a32:	4814      	ldr	r0, [pc, #80]	; (8001a84 <main+0x398>)
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a34:	9404      	str	r4, [sp, #16]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001a36:	a902      	add	r1, sp, #8
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001a38:	e9cd 2302 	strd	r2, r3, [sp, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001a3c:	f002 feca 	bl	80047d4 <HAL_TIMEx_MasterConfigSynchronization>
 8001a40:	4604      	mov	r4, r0
 8001a42:	b108      	cbz	r0, 8001a48 <main+0x35c>
 8001a44:	b672      	cpsid	i
  while (1)
 8001a46:	e7fe      	b.n	8001a46 <main+0x35a>
	HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 8001a48:	217f      	movs	r1, #127	; 0x7f
 8001a4a:	4810      	ldr	r0, [pc, #64]	; (8001a8c <main+0x3a0>)
 8001a4c:	f001 f9f8 	bl	8002e40 <HAL_ADCEx_Calibration_Start>
	HAL_ADCEx_Calibration_Start(&hadc3, ADC_SINGLE_ENDED);
 8001a50:	217f      	movs	r1, #127	; 0x7f
 8001a52:	480f      	ldr	r0, [pc, #60]	; (8001a90 <main+0x3a4>)
 8001a54:	f001 f9f4 	bl	8002e40 <HAL_ADCEx_Calibration_Start>
	HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 8001a58:	4621      	mov	r1, r4
 8001a5a:	480e      	ldr	r0, [pc, #56]	; (8001a94 <main+0x3a8>)
 8001a5c:	f001 fb84 	bl	8003168 <HAL_DAC_Start>
	HAL_TIM_Base_Start_IT(&htim2);
 8001a60:	480d      	ldr	r0, [pc, #52]	; (8001a98 <main+0x3ac>)
 8001a62:	f002 fca9 	bl	80043b8 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim6);
 8001a66:	480d      	ldr	r0, [pc, #52]	; (8001a9c <main+0x3b0>)
 8001a68:	f002 fca6 	bl	80043b8 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim7);
 8001a6c:	480c      	ldr	r0, [pc, #48]	; (8001aa0 <main+0x3b4>)
 8001a6e:	f002 fca3 	bl	80043b8 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim8);
 8001a72:	4804      	ldr	r0, [pc, #16]	; (8001a84 <main+0x398>)
 8001a74:	f002 fca0 	bl	80043b8 <HAL_TIM_Base_Start_IT>
 	HAL_UART_Receive_IT(&huart1, midi_tmp, NUM_MIDI_BYTES);
 8001a78:	490a      	ldr	r1, [pc, #40]	; (8001aa4 <main+0x3b8>)
 8001a7a:	480b      	ldr	r0, [pc, #44]	; (8001aa8 <main+0x3bc>)
 8001a7c:	2203      	movs	r2, #3
 8001a7e:	f002 ff1b 	bl	80048b8 <HAL_UART_Receive_IT>
 	while (1);
 8001a82:	e7fe      	b.n	8001a82 <main+0x396>
 8001a84:	20000434 	.word	0x20000434
 8001a88:	40013400 	.word	0x40013400
 8001a8c:	200004e4 	.word	0x200004e4
 8001a90:	20000550 	.word	0x20000550
 8001a94:	20000480 	.word	0x20000480
 8001a98:	200006dc 	.word	0x200006dc
 8001a9c:	20000690 	.word	0x20000690
 8001aa0:	20000728 	.word	0x20000728
 8001aa4:	20000774 	.word	0x20000774
 8001aa8:	200005bc 	.word	0x200005bc

08001aac <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001aac:	4b0b      	ldr	r3, [pc, #44]	; (8001adc <HAL_MspInit+0x30>)
 8001aae:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001ab0:	f042 0201 	orr.w	r2, r2, #1
 8001ab4:	661a      	str	r2, [r3, #96]	; 0x60
 8001ab6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
{
 8001ab8:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001aba:	f002 0201 	and.w	r2, r2, #1
 8001abe:	9200      	str	r2, [sp, #0]
 8001ac0:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ac2:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001ac4:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001ac8:	659a      	str	r2, [r3, #88]	; 0x58
 8001aca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001acc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ad0:	9301      	str	r3, [sp, #4]
 8001ad2:	9b01      	ldr	r3, [sp, #4]
  HAL_PWREx_DisableUCPDDeadBattery();

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001ad4:	b002      	add	sp, #8
  HAL_PWREx_DisableUCPDDeadBattery();
 8001ad6:	f001 be87 	b.w	80037e8 <HAL_PWREx_DisableUCPDDeadBattery>
 8001ada:	bf00      	nop
 8001adc:	40021000 	.word	0x40021000

08001ae0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001ae0:	b530      	push	{r4, r5, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(hadc->Instance==ADC1)
 8001ae2:	6803      	ldr	r3, [r0, #0]
{
 8001ae4:	b08b      	sub	sp, #44	; 0x2c
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ae6:	2400      	movs	r4, #0
  if(hadc->Instance==ADC1)
 8001ae8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001aec:	e9cd 4404 	strd	r4, r4, [sp, #16]
 8001af0:	e9cd 4406 	strd	r4, r4, [sp, #24]
 8001af4:	9408      	str	r4, [sp, #32]
  if(hadc->Instance==ADC1)
 8001af6:	d004      	beq.n	8001b02 <HAL_ADC_MspInit+0x22>
*/
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
  else if(hadc->Instance==ADC3)
 8001af8:	4a26      	ldr	r2, [pc, #152]	; (8001b94 <HAL_ADC_MspInit+0xb4>)
 8001afa:	4293      	cmp	r3, r2
 8001afc:	d023      	beq.n	8001b46 <HAL_ADC_MspInit+0x66>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8001afe:	b00b      	add	sp, #44	; 0x2c
 8001b00:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_ADC12_CLK_ENABLE();
 8001b02:	f103 4370 	add.w	r3, r3, #4026531840	; 0xf0000000
 8001b06:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b0a:	a904      	add	r1, sp, #16
    __HAL_RCC_ADC12_CLK_ENABLE();
 8001b0c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001b0e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001b12:	64da      	str	r2, [r3, #76]	; 0x4c
 8001b14:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001b16:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8001b1a:	9200      	str	r2, [sp, #0]
 8001b1c:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b1e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001b20:	f042 0201 	orr.w	r2, r2, #1
 8001b24:	64da      	str	r2, [r3, #76]	; 0x4c
 8001b26:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b28:	9406      	str	r4, [sp, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b2a:	f003 0301 	and.w	r3, r3, #1
 8001b2e:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8001b30:	220f      	movs	r2, #15
 8001b32:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b34:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8001b38:	e9cd 2304 	strd	r2, r3, [sp, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b3c:	9c01      	ldr	r4, [sp, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b3e:	f001 fcdb 	bl	80034f8 <HAL_GPIO_Init>
}
 8001b42:	b00b      	add	sp, #44	; 0x2c
 8001b44:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_ADC345_CLK_ENABLE();
 8001b46:	4b14      	ldr	r3, [pc, #80]	; (8001b98 <HAL_ADC_MspInit+0xb8>)
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b48:	4814      	ldr	r0, [pc, #80]	; (8001b9c <HAL_ADC_MspInit+0xbc>)
    __HAL_RCC_ADC345_CLK_ENABLE();
 8001b4a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001b4c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001b50:	64da      	str	r2, [r3, #76]	; 0x4c
 8001b52:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001b54:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8001b58:	9202      	str	r2, [sp, #8]
 8001b5a:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b5c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001b5e:	f042 0202 	orr.w	r2, r2, #2
 8001b62:	64da      	str	r2, [r3, #76]	; 0x4c
 8001b64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b66:	9406      	str	r4, [sp, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b68:	f003 0302 	and.w	r3, r3, #2
 8001b6c:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b6e:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001b70:	2303      	movs	r3, #3
 8001b72:	2202      	movs	r2, #2
 8001b74:	e9cd 2304 	strd	r2, r3, [sp, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b78:	9d03      	ldr	r5, [sp, #12]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b7a:	f001 fcbd 	bl	80034f8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ADC3_IRQn, 0, 0);
 8001b7e:	4622      	mov	r2, r4
 8001b80:	4621      	mov	r1, r4
 8001b82:	202f      	movs	r0, #47	; 0x2f
 8001b84:	f001 fa7a 	bl	800307c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC3_IRQn);
 8001b88:	202f      	movs	r0, #47	; 0x2f
 8001b8a:	f001 faaf 	bl	80030ec <HAL_NVIC_EnableIRQ>
}
 8001b8e:	b00b      	add	sp, #44	; 0x2c
 8001b90:	bd30      	pop	{r4, r5, pc}
 8001b92:	bf00      	nop
 8001b94:	50000400 	.word	0x50000400
 8001b98:	40021000 	.word	0x40021000
 8001b9c:	48000400 	.word	0x48000400

08001ba0 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8001ba0:	b530      	push	{r4, r5, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(hdac->Instance==DAC1)
 8001ba2:	6802      	ldr	r2, [r0, #0]
 8001ba4:	4b1a      	ldr	r3, [pc, #104]	; (8001c10 <HAL_DAC_MspInit+0x70>)
{
 8001ba6:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ba8:	2400      	movs	r4, #0
  if(hdac->Instance==DAC1)
 8001baa:	429a      	cmp	r2, r3
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bac:	e9cd 4402 	strd	r4, r4, [sp, #8]
 8001bb0:	e9cd 4404 	strd	r4, r4, [sp, #16]
 8001bb4:	9406      	str	r4, [sp, #24]
  if(hdac->Instance==DAC1)
 8001bb6:	d001      	beq.n	8001bbc <HAL_DAC_MspInit+0x1c>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 8001bb8:	b009      	add	sp, #36	; 0x24
 8001bba:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_DAC1_CLK_ENABLE();
 8001bbc:	f103 4370 	add.w	r3, r3, #4026531840	; 0xf0000000
 8001bc0:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bc4:	a902      	add	r1, sp, #8
    __HAL_RCC_DAC1_CLK_ENABLE();
 8001bc6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001bc8:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001bcc:	64da      	str	r2, [r3, #76]	; 0x4c
 8001bce:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001bd0:	f402 3280 	and.w	r2, r2, #65536	; 0x10000
 8001bd4:	9200      	str	r2, [sp, #0]
 8001bd6:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bd8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001bda:	f042 0201 	orr.w	r2, r2, #1
 8001bde:	64da      	str	r2, [r3, #76]	; 0x4c
 8001be0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001be2:	9404      	str	r4, [sp, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001be4:	f003 0301 	and.w	r3, r3, #1
 8001be8:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001bea:	2210      	movs	r2, #16
 8001bec:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001bf2:	e9cd 2302 	strd	r2, r3, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bf6:	9d01      	ldr	r5, [sp, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bf8:	f001 fc7e 	bl	80034f8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8001bfc:	4622      	mov	r2, r4
 8001bfe:	4621      	mov	r1, r4
 8001c00:	2036      	movs	r0, #54	; 0x36
 8001c02:	f001 fa3b 	bl	800307c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001c06:	2036      	movs	r0, #54	; 0x36
 8001c08:	f001 fa70 	bl	80030ec <HAL_NVIC_EnableIRQ>
}
 8001c0c:	b009      	add	sp, #36	; 0x24
 8001c0e:	bd30      	pop	{r4, r5, pc}
 8001c10:	50000800 	.word	0x50000800

08001c14 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001c14:	b500      	push	{lr}
  if(htim_base->Instance==TIM2)
 8001c16:	6803      	ldr	r3, [r0, #0]
 8001c18:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
{
 8001c1c:	b087      	sub	sp, #28
  if(htim_base->Instance==TIM2)
 8001c1e:	d023      	beq.n	8001c68 <HAL_TIM_Base_MspInit+0x54>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
  else if(htim_base->Instance==TIM5)
 8001c20:	4a3a      	ldr	r2, [pc, #232]	; (8001d0c <HAL_TIM_Base_MspInit+0xf8>)
 8001c22:	4293      	cmp	r3, r2
 8001c24:	d036      	beq.n	8001c94 <HAL_TIM_Base_MspInit+0x80>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
  else if(htim_base->Instance==TIM6)
 8001c26:	4a3a      	ldr	r2, [pc, #232]	; (8001d10 <HAL_TIM_Base_MspInit+0xfc>)
 8001c28:	4293      	cmp	r3, r2
 8001c2a:	d048      	beq.n	8001cbe <HAL_TIM_Base_MspInit+0xaa>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
  else if(htim_base->Instance==TIM7)
 8001c2c:	4a39      	ldr	r2, [pc, #228]	; (8001d14 <HAL_TIM_Base_MspInit+0x100>)
 8001c2e:	4293      	cmp	r3, r2
 8001c30:	d005      	beq.n	8001c3e <HAL_TIM_Base_MspInit+0x2a>
    HAL_NVIC_EnableIRQ(TIM7_DAC_IRQn);
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
  else if(htim_base->Instance==TIM8)
 8001c32:	4a39      	ldr	r2, [pc, #228]	; (8001d18 <HAL_TIM_Base_MspInit+0x104>)
 8001c34:	4293      	cmp	r3, r2
 8001c36:	d057      	beq.n	8001ce8 <HAL_TIM_Base_MspInit+0xd4>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8001c38:	b007      	add	sp, #28
 8001c3a:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_TIM7_CLK_ENABLE();
 8001c3e:	4b37      	ldr	r3, [pc, #220]	; (8001d1c <HAL_TIM_Base_MspInit+0x108>)
 8001c40:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001c42:	f042 0220 	orr.w	r2, r2, #32
 8001c46:	659a      	str	r2, [r3, #88]	; 0x58
 8001c48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
    HAL_NVIC_SetPriority(TIM7_DAC_IRQn, 0, 0);
 8001c4a:	2200      	movs	r2, #0
    __HAL_RCC_TIM7_CLK_ENABLE();
 8001c4c:	f003 0320 	and.w	r3, r3, #32
 8001c50:	9304      	str	r3, [sp, #16]
    HAL_NVIC_SetPriority(TIM7_DAC_IRQn, 0, 0);
 8001c52:	2037      	movs	r0, #55	; 0x37
 8001c54:	4611      	mov	r1, r2
    __HAL_RCC_TIM7_CLK_ENABLE();
 8001c56:	9b04      	ldr	r3, [sp, #16]
    HAL_NVIC_SetPriority(TIM7_DAC_IRQn, 0, 0);
 8001c58:	f001 fa10 	bl	800307c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_DAC_IRQn);
 8001c5c:	2037      	movs	r0, #55	; 0x37
}
 8001c5e:	b007      	add	sp, #28
 8001c60:	f85d eb04 	ldr.w	lr, [sp], #4
    HAL_NVIC_EnableIRQ(TIM8_UP_IRQn);
 8001c64:	f001 ba42 	b.w	80030ec <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001c68:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001c6c:	201c      	movs	r0, #28
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001c6e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001c70:	f042 0201 	orr.w	r2, r2, #1
 8001c74:	659a      	str	r2, [r3, #88]	; 0x58
 8001c76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001c78:	2200      	movs	r2, #0
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001c7a:	f003 0301 	and.w	r3, r3, #1
 8001c7e:	9301      	str	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001c80:	4611      	mov	r1, r2
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001c82:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001c84:	f001 f9fa 	bl	800307c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001c88:	201c      	movs	r0, #28
}
 8001c8a:	b007      	add	sp, #28
 8001c8c:	f85d eb04 	ldr.w	lr, [sp], #4
    HAL_NVIC_EnableIRQ(TIM8_UP_IRQn);
 8001c90:	f001 ba2c 	b.w	80030ec <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001c94:	4b21      	ldr	r3, [pc, #132]	; (8001d1c <HAL_TIM_Base_MspInit+0x108>)
 8001c96:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001c98:	f042 0208 	orr.w	r2, r2, #8
 8001c9c:	659a      	str	r2, [r3, #88]	; 0x58
 8001c9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8001ca0:	2200      	movs	r2, #0
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001ca2:	f003 0308 	and.w	r3, r3, #8
 8001ca6:	9302      	str	r3, [sp, #8]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8001ca8:	4611      	mov	r1, r2
 8001caa:	2032      	movs	r0, #50	; 0x32
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001cac:	9b02      	ldr	r3, [sp, #8]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8001cae:	f001 f9e5 	bl	800307c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8001cb2:	2032      	movs	r0, #50	; 0x32
}
 8001cb4:	b007      	add	sp, #28
 8001cb6:	f85d eb04 	ldr.w	lr, [sp], #4
    HAL_NVIC_EnableIRQ(TIM8_UP_IRQn);
 8001cba:	f001 ba17 	b.w	80030ec <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001cbe:	4b17      	ldr	r3, [pc, #92]	; (8001d1c <HAL_TIM_Base_MspInit+0x108>)
 8001cc0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001cc2:	f042 0210 	orr.w	r2, r2, #16
 8001cc6:	659a      	str	r2, [r3, #88]	; 0x58
 8001cc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8001cca:	2200      	movs	r2, #0
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001ccc:	f003 0310 	and.w	r3, r3, #16
 8001cd0:	9303      	str	r3, [sp, #12]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8001cd2:	4611      	mov	r1, r2
 8001cd4:	2036      	movs	r0, #54	; 0x36
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001cd6:	9b03      	ldr	r3, [sp, #12]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8001cd8:	f001 f9d0 	bl	800307c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001cdc:	2036      	movs	r0, #54	; 0x36
}
 8001cde:	b007      	add	sp, #28
 8001ce0:	f85d eb04 	ldr.w	lr, [sp], #4
    HAL_NVIC_EnableIRQ(TIM8_UP_IRQn);
 8001ce4:	f001 ba02 	b.w	80030ec <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8001ce8:	4b0c      	ldr	r3, [pc, #48]	; (8001d1c <HAL_TIM_Base_MspInit+0x108>)
 8001cea:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001cec:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001cf0:	661a      	str	r2, [r3, #96]	; 0x60
 8001cf2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
    HAL_NVIC_SetPriority(TIM8_UP_IRQn, 0, 0);
 8001cf4:	2200      	movs	r2, #0
    __HAL_RCC_TIM8_CLK_ENABLE();
 8001cf6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001cfa:	9305      	str	r3, [sp, #20]
    HAL_NVIC_SetPriority(TIM8_UP_IRQn, 0, 0);
 8001cfc:	202c      	movs	r0, #44	; 0x2c
 8001cfe:	4611      	mov	r1, r2
    __HAL_RCC_TIM8_CLK_ENABLE();
 8001d00:	9b05      	ldr	r3, [sp, #20]
    HAL_NVIC_SetPriority(TIM8_UP_IRQn, 0, 0);
 8001d02:	f001 f9bb 	bl	800307c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_IRQn);
 8001d06:	202c      	movs	r0, #44	; 0x2c
 8001d08:	e7a9      	b.n	8001c5e <HAL_TIM_Base_MspInit+0x4a>
 8001d0a:	bf00      	nop
 8001d0c:	40000c00 	.word	0x40000c00
 8001d10:	40001000 	.word	0x40001000
 8001d14:	40001400 	.word	0x40001400
 8001d18:	40013400 	.word	0x40013400
 8001d1c:	40021000 	.word	0x40021000

08001d20 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001d20:	b5f0      	push	{r4, r5, r6, r7, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(huart->Instance==USART1)
 8001d22:	6802      	ldr	r2, [r0, #0]
 8001d24:	4b26      	ldr	r3, [pc, #152]	; (8001dc0 <HAL_UART_MspInit+0xa0>)
{
 8001d26:	b08b      	sub	sp, #44	; 0x2c
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d28:	2400      	movs	r4, #0
  if(huart->Instance==USART1)
 8001d2a:	429a      	cmp	r2, r3
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d2c:	e9cd 4404 	strd	r4, r4, [sp, #16]
 8001d30:	e9cd 4406 	strd	r4, r4, [sp, #24]
 8001d34:	9408      	str	r4, [sp, #32]
  if(huart->Instance==USART1)
 8001d36:	d001      	beq.n	8001d3c <HAL_UART_MspInit+0x1c>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001d38:	b00b      	add	sp, #44	; 0x2c
 8001d3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_USART1_CLK_ENABLE();
 8001d3c:	f503 4358 	add.w	r3, r3, #55296	; 0xd800
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001d40:	2600      	movs	r6, #0
    __HAL_RCC_USART1_CLK_ENABLE();
 8001d42:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001d44:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001d48:	661a      	str	r2, [r3, #96]	; 0x60
 8001d4a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001d4c:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8001d50:	9201      	str	r2, [sp, #4]
 8001d52:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d54:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001d56:	f042 0201 	orr.w	r2, r2, #1
 8001d5a:	64da      	str	r2, [r3, #76]	; 0x4c
 8001d5c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001d5e:	f002 0201 	and.w	r2, r2, #1
 8001d62:	9202      	str	r2, [sp, #8]
 8001d64:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d66:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001d68:	f042 0202 	orr.w	r2, r2, #2
 8001d6c:	64da      	str	r2, [r3, #76]	; 0x4c
 8001d6e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d70:	f003 0302 	and.w	r3, r3, #2
 8001d74:	9303      	str	r3, [sp, #12]
 8001d76:	9803      	ldr	r0, [sp, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001d78:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001d7c:	2302      	movs	r3, #2
 8001d7e:	2700      	movs	r7, #0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001d80:	2507      	movs	r5, #7
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d82:	a904      	add	r1, sp, #16
 8001d84:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001d88:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8001d8c:	e9cd 6706 	strd	r6, r7, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001d90:	9508      	str	r5, [sp, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d92:	f001 fbb1 	bl	80034f8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001d96:	2302      	movs	r3, #2
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d98:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001d9a:	2240      	movs	r2, #64	; 0x40
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d9c:	4809      	ldr	r0, [pc, #36]	; (8001dc4 <HAL_UART_MspInit+0xa4>)
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001d9e:	9508      	str	r5, [sp, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001da0:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8001da4:	e9cd 6706 	strd	r6, r7, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001da8:	f001 fba6 	bl	80034f8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001dac:	4622      	mov	r2, r4
 8001dae:	4621      	mov	r1, r4
 8001db0:	2025      	movs	r0, #37	; 0x25
 8001db2:	f001 f963 	bl	800307c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001db6:	2025      	movs	r0, #37	; 0x25
 8001db8:	f001 f998 	bl	80030ec <HAL_NVIC_EnableIRQ>
}
 8001dbc:	b00b      	add	sp, #44	; 0x2c
 8001dbe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001dc0:	40013800 	.word	0x40013800
 8001dc4:	48000400 	.word	0x48000400

08001dc8 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001dc8:	e7fe      	b.n	8001dc8 <NMI_Handler>
 8001dca:	bf00      	nop

08001dcc <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001dcc:	e7fe      	b.n	8001dcc <HardFault_Handler>
 8001dce:	bf00      	nop

08001dd0 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001dd0:	e7fe      	b.n	8001dd0 <MemManage_Handler>
 8001dd2:	bf00      	nop

08001dd4 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001dd4:	e7fe      	b.n	8001dd4 <BusFault_Handler>
 8001dd6:	bf00      	nop

08001dd8 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001dd8:	e7fe      	b.n	8001dd8 <UsageFault_Handler>
 8001dda:	bf00      	nop

08001ddc <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001ddc:	4770      	bx	lr
 8001dde:	bf00      	nop

08001de0 <DebugMon_Handler>:
 8001de0:	4770      	bx	lr
 8001de2:	bf00      	nop

08001de4 <PendSV_Handler>:
 8001de4:	4770      	bx	lr
 8001de6:	bf00      	nop

08001de8 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001de8:	f000 b8a2 	b.w	8001f30 <HAL_IncTick>

08001dec <DMA1_Channel1_IRQHandler>:
 8001dec:	4770      	bx	lr
 8001dee:	bf00      	nop

08001df0 <DMA1_Channel3_IRQHandler>:
 8001df0:	4770      	bx	lr
 8001df2:	bf00      	nop

08001df4 <DMA1_Channel5_IRQHandler>:
 8001df4:	4770      	bx	lr
 8001df6:	bf00      	nop

08001df8 <TIM2_IRQHandler>:
void TIM2_IRQHandler(void)
{
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001df8:	4801      	ldr	r0, [pc, #4]	; (8001e00 <TIM2_IRQHandler+0x8>)
 8001dfa:	f002 bbf1 	b.w	80045e0 <HAL_TIM_IRQHandler>
 8001dfe:	bf00      	nop
 8001e00:	200006dc 	.word	0x200006dc

08001e04 <USART1_IRQHandler>:
void USART1_IRQHandler(void)
{
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001e04:	4801      	ldr	r0, [pc, #4]	; (8001e0c <USART1_IRQHandler+0x8>)
 8001e06:	f002 be11 	b.w	8004a2c <HAL_UART_IRQHandler>
 8001e0a:	bf00      	nop
 8001e0c:	200005bc 	.word	0x200005bc

08001e10 <TIM8_UP_IRQHandler>:
void TIM8_UP_IRQHandler(void)
{
  /* USER CODE BEGIN TIM8_UP_IRQn 0 */

  /* USER CODE END TIM8_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8001e10:	4801      	ldr	r0, [pc, #4]	; (8001e18 <TIM8_UP_IRQHandler+0x8>)
 8001e12:	f002 bbe5 	b.w	80045e0 <HAL_TIM_IRQHandler>
 8001e16:	bf00      	nop
 8001e18:	20000434 	.word	0x20000434

08001e1c <ADC3_IRQHandler>:
void ADC3_IRQHandler(void)
{
  /* USER CODE BEGIN ADC3_IRQn 0 */

  /* USER CODE END ADC3_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc3);
 8001e1c:	4801      	ldr	r0, [pc, #4]	; (8001e24 <ADC3_IRQHandler+0x8>)
 8001e1e:	f000 ba7f 	b.w	8002320 <HAL_ADC_IRQHandler>
 8001e22:	bf00      	nop
 8001e24:	20000550 	.word	0x20000550

08001e28 <TIM5_IRQHandler>:
void TIM5_IRQHandler(void)
{
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8001e28:	4801      	ldr	r0, [pc, #4]	; (8001e30 <TIM5_IRQHandler+0x8>)
 8001e2a:	f002 bbd9 	b.w	80045e0 <HAL_TIM_IRQHandler>
 8001e2e:	bf00      	nop
 8001e30:	20000494 	.word	0x20000494

08001e34 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC3 channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001e34:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001e36:	4804      	ldr	r0, [pc, #16]	; (8001e48 <TIM6_DAC_IRQHandler+0x14>)
 8001e38:	f002 fbd2 	bl	80045e0 <HAL_TIM_IRQHandler>

  HAL_DAC_IRQHandler(&hdac1);
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001e3c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_DAC_IRQHandler(&hdac1);
 8001e40:	4802      	ldr	r0, [pc, #8]	; (8001e4c <TIM6_DAC_IRQHandler+0x18>)
 8001e42:	f001 b9c7 	b.w	80031d4 <HAL_DAC_IRQHandler>
 8001e46:	bf00      	nop
 8001e48:	20000690 	.word	0x20000690
 8001e4c:	20000480 	.word	0x20000480

08001e50 <TIM7_DAC_IRQHandler>:
void TIM7_DAC_IRQHandler(void)
{
  /* USER CODE BEGIN TIM7_DAC_IRQn 0 */

  /* USER CODE END TIM7_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8001e50:	4801      	ldr	r0, [pc, #4]	; (8001e58 <TIM7_DAC_IRQHandler+0x8>)
 8001e52:	f002 bbc5 	b.w	80045e0 <HAL_TIM_IRQHandler>
 8001e56:	bf00      	nop
 8001e58:	20000728 	.word	0x20000728

08001e5c <SystemInit>:

void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001e5c:	4a03      	ldr	r2, [pc, #12]	; (8001e6c <SystemInit+0x10>)
 8001e5e:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8001e62:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001e66:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001e6a:	4770      	bx	lr
 8001e6c:	e000ed00 	.word	0xe000ed00

08001e70 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001e70:	480d      	ldr	r0, [pc, #52]	; (8001ea8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001e72:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001e74:	480d      	ldr	r0, [pc, #52]	; (8001eac <LoopForever+0x6>)
  ldr r1, =_edata
 8001e76:	490e      	ldr	r1, [pc, #56]	; (8001eb0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001e78:	4a0e      	ldr	r2, [pc, #56]	; (8001eb4 <LoopForever+0xe>)
  movs r3, #0
 8001e7a:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001e7c:	e002      	b.n	8001e84 <LoopCopyDataInit>

08001e7e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001e7e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001e80:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001e82:	3304      	adds	r3, #4

08001e84 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001e84:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001e86:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001e88:	d3f9      	bcc.n	8001e7e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001e8a:	4a0b      	ldr	r2, [pc, #44]	; (8001eb8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001e8c:	4c0b      	ldr	r4, [pc, #44]	; (8001ebc <LoopForever+0x16>)
  movs r3, #0
 8001e8e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001e90:	e001      	b.n	8001e96 <LoopFillZerobss>

08001e92 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001e92:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001e94:	3204      	adds	r2, #4

08001e96 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001e96:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001e98:	d3fb      	bcc.n	8001e92 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001e9a:	f7ff ffdf 	bl	8001e5c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001e9e:	f003 fc4b 	bl	8005738 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001ea2:	f7ff fc23 	bl	80016ec <main>

08001ea6 <LoopForever>:

LoopForever:
    b LoopForever
 8001ea6:	e7fe      	b.n	8001ea6 <LoopForever>
  ldr   r0, =_estack
 8001ea8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001eac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001eb0:	20000414 	.word	0x20000414
  ldr r2, =_sidata
 8001eb4:	080058d8 	.word	0x080058d8
  ldr r2, =_sbss
 8001eb8:	20000414 	.word	0x20000414
  ldr r4, =_ebss
 8001ebc:	2000077c 	.word	0x2000077c

08001ec0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001ec0:	e7fe      	b.n	8001ec0 <ADC1_2_IRQHandler>
	...

08001ec4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ec4:	b538      	push	{r3, r4, r5, lr}
  HAL_StatusTypeDef  status = HAL_OK;

  if (uwTickFreq != 0U)
 8001ec6:	4b0f      	ldr	r3, [pc, #60]	; (8001f04 <HAL_InitTick+0x40>)
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	b90b      	cbnz	r3, 8001ed0 <HAL_InitTick+0xc>
      status = HAL_ERROR;
    }
  }
  else
  {
    status = HAL_ERROR;
 8001ecc:	2001      	movs	r0, #1
  }

  /* Return function status */
  return status;
}
 8001ece:	bd38      	pop	{r3, r4, r5, pc}
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001ed0:	490d      	ldr	r1, [pc, #52]	; (8001f08 <HAL_InitTick+0x44>)
 8001ed2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001ed6:	4605      	mov	r5, r0
 8001ed8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001edc:	6808      	ldr	r0, [r1, #0]
 8001ede:	fbb0 f0f3 	udiv	r0, r0, r3
 8001ee2:	f001 f911 	bl	8003108 <HAL_SYSTICK_Config>
 8001ee6:	4604      	mov	r4, r0
 8001ee8:	2800      	cmp	r0, #0
 8001eea:	d1ef      	bne.n	8001ecc <HAL_InitTick+0x8>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001eec:	2d0f      	cmp	r5, #15
 8001eee:	d8ed      	bhi.n	8001ecc <HAL_InitTick+0x8>
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001ef0:	4602      	mov	r2, r0
 8001ef2:	4629      	mov	r1, r5
 8001ef4:	f04f 30ff 	mov.w	r0, #4294967295
 8001ef8:	f001 f8c0 	bl	800307c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001efc:	4b03      	ldr	r3, [pc, #12]	; (8001f0c <HAL_InitTick+0x48>)
 8001efe:	4620      	mov	r0, r4
 8001f00:	601d      	str	r5, [r3, #0]
}
 8001f02:	bd38      	pop	{r3, r4, r5, pc}
 8001f04:	2000040c 	.word	0x2000040c
 8001f08:	20000408 	.word	0x20000408
 8001f0c:	20000410 	.word	0x20000410

08001f10 <HAL_Init>:
{
 8001f10:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f12:	2003      	movs	r0, #3
 8001f14:	f001 f89e 	bl	8003054 <HAL_NVIC_SetPriorityGrouping>
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001f18:	2000      	movs	r0, #0
 8001f1a:	f7ff ffd3 	bl	8001ec4 <HAL_InitTick>
 8001f1e:	b110      	cbz	r0, 8001f26 <HAL_Init+0x16>
    status = HAL_ERROR;
 8001f20:	2401      	movs	r4, #1
}
 8001f22:	4620      	mov	r0, r4
 8001f24:	bd10      	pop	{r4, pc}
 8001f26:	4604      	mov	r4, r0
    HAL_MspInit();
 8001f28:	f7ff fdc0 	bl	8001aac <HAL_MspInit>
}
 8001f2c:	4620      	mov	r0, r4
 8001f2e:	bd10      	pop	{r4, pc}

08001f30 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8001f30:	4a03      	ldr	r2, [pc, #12]	; (8001f40 <HAL_IncTick+0x10>)
 8001f32:	4904      	ldr	r1, [pc, #16]	; (8001f44 <HAL_IncTick+0x14>)
 8001f34:	6813      	ldr	r3, [r2, #0]
 8001f36:	6809      	ldr	r1, [r1, #0]
 8001f38:	440b      	add	r3, r1
 8001f3a:	6013      	str	r3, [r2, #0]
}
 8001f3c:	4770      	bx	lr
 8001f3e:	bf00      	nop
 8001f40:	20000778 	.word	0x20000778
 8001f44:	2000040c 	.word	0x2000040c

08001f48 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8001f48:	4b01      	ldr	r3, [pc, #4]	; (8001f50 <HAL_GetTick+0x8>)
 8001f4a:	6818      	ldr	r0, [r3, #0]
}
 8001f4c:	4770      	bx	lr
 8001f4e:	bf00      	nop
 8001f50:	20000778 	.word	0x20000778

08001f54 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001f54:	b538      	push	{r3, r4, r5, lr}
 8001f56:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8001f58:	f7ff fff6 	bl	8001f48 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001f5c:	1c63      	adds	r3, r4, #1
  uint32_t tickstart = HAL_GetTick();
 8001f5e:	4605      	mov	r5, r0
  if (wait < HAL_MAX_DELAY)
 8001f60:	d002      	beq.n	8001f68 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 8001f62:	4b04      	ldr	r3, [pc, #16]	; (8001f74 <HAL_Delay+0x20>)
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001f68:	f7ff ffee 	bl	8001f48 <HAL_GetTick>
 8001f6c:	1b43      	subs	r3, r0, r5
 8001f6e:	42a3      	cmp	r3, r4
 8001f70:	d3fa      	bcc.n	8001f68 <HAL_Delay+0x14>
  {
  }
}
 8001f72:	bd38      	pop	{r3, r4, r5, pc}
 8001f74:	2000040c 	.word	0x2000040c

08001f78 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001f78:	b570      	push	{r4, r5, r6, lr}
 8001f7a:	b082      	sub	sp, #8
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001f7c:	2300      	movs	r3, #0
 8001f7e:	9301      	str	r3, [sp, #4]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001f80:	2800      	cmp	r0, #0
 8001f82:	f000 80d6 	beq.w	8002132 <HAL_ADC_Init+0x1ba>
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001f86:	6dc5      	ldr	r5, [r0, #92]	; 0x5c
 8001f88:	4604      	mov	r4, r0
 8001f8a:	2d00      	cmp	r5, #0
 8001f8c:	f000 809f 	beq.w	80020ce <HAL_ADC_Init+0x156>
    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001f90:	6822      	ldr	r2, [r4, #0]
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001f92:	6893      	ldr	r3, [r2, #8]
 8001f94:	0099      	lsls	r1, r3, #2
 8001f96:	d505      	bpl.n	8001fa4 <HAL_ADC_Init+0x2c>
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001f98:	6893      	ldr	r3, [r2, #8]
 8001f9a:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8001f9e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001fa2:	6093      	str	r3, [r2, #8]
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001fa4:	6893      	ldr	r3, [r2, #8]
 8001fa6:	00db      	lsls	r3, r3, #3
 8001fa8:	d419      	bmi.n	8001fde <HAL_ADC_Init+0x66>
    LL_ADC_EnableInternalRegulator(hadc->Instance);

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001faa:	4b7f      	ldr	r3, [pc, #508]	; (80021a8 <HAL_ADC_Init+0x230>)
 8001fac:	487f      	ldr	r0, [pc, #508]	; (80021ac <HAL_ADC_Init+0x234>)
 8001fae:	681b      	ldr	r3, [r3, #0]
  MODIFY_REG(ADCx->CR,
 8001fb0:	6891      	ldr	r1, [r2, #8]
 8001fb2:	099b      	lsrs	r3, r3, #6
 8001fb4:	fba0 0303 	umull	r0, r3, r0, r3
 8001fb8:	099b      	lsrs	r3, r3, #6
 8001fba:	f021 4110 	bic.w	r1, r1, #2415919104	; 0x90000000
 8001fbe:	3301      	adds	r3, #1
 8001fc0:	f021 013f 	bic.w	r1, r1, #63	; 0x3f
 8001fc4:	005b      	lsls	r3, r3, #1
 8001fc6:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 8001fca:	6091      	str	r1, [r2, #8]
 8001fcc:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 8001fce:	9b01      	ldr	r3, [sp, #4]
 8001fd0:	b12b      	cbz	r3, 8001fde <HAL_ADC_Init+0x66>
    {
      wait_loop_index--;
 8001fd2:	9b01      	ldr	r3, [sp, #4]
 8001fd4:	3b01      	subs	r3, #1
 8001fd6:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 8001fd8:	9b01      	ldr	r3, [sp, #4]
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d1f9      	bne.n	8001fd2 <HAL_ADC_Init+0x5a>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001fde:	6893      	ldr	r3, [r2, #8]
 8001fe0:	00de      	lsls	r6, r3, #3
 8001fe2:	d466      	bmi.n	80020b2 <HAL_ADC_Init+0x13a>
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001fe4:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8001fe6:	f043 0310 	orr.w	r3, r3, #16
 8001fea:	65e3      	str	r3, [r4, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001fec:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8001fee:	f043 0301 	orr.w	r3, r3, #1
 8001ff2:	6623      	str	r3, [r4, #96]	; 0x60
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001ff4:	6893      	ldr	r3, [r2, #8]
 8001ff6:	f013 0f04 	tst.w	r3, #4

    tmp_hal_status = HAL_ERROR;
 8001ffa:	f04f 0001 	mov.w	r0, #1
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001ffe:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8002000:	d15e      	bne.n	80020c0 <HAL_ADC_Init+0x148>
 8002002:	06dd      	lsls	r5, r3, #27
 8002004:	d45c      	bmi.n	80020c0 <HAL_ADC_Init+0x148>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002006:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8002008:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 800200c:	f043 0302 	orr.w	r3, r3, #2
 8002010:	65e3      	str	r3, [r4, #92]	; 0x5c
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002012:	6893      	ldr	r3, [r2, #8]
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002014:	07d9      	lsls	r1, r3, #31
 8002016:	d419      	bmi.n	800204c <HAL_ADC_Init+0xd4>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002018:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
 800201c:	f000 80a1 	beq.w	8002162 <HAL_ADC_Init+0x1ea>
 8002020:	4b63      	ldr	r3, [pc, #396]	; (80021b0 <HAL_ADC_Init+0x238>)
 8002022:	429a      	cmp	r2, r3
 8002024:	f000 80a6 	beq.w	8002174 <HAL_ADC_Init+0x1fc>
 8002028:	4d62      	ldr	r5, [pc, #392]	; (80021b4 <HAL_ADC_Init+0x23c>)
 800202a:	4963      	ldr	r1, [pc, #396]	; (80021b8 <HAL_ADC_Init+0x240>)
 800202c:	68ad      	ldr	r5, [r5, #8]
 800202e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002032:	689b      	ldr	r3, [r3, #8]
 8002034:	6889      	ldr	r1, [r1, #8]
 8002036:	432b      	orrs	r3, r5
 8002038:	430b      	orrs	r3, r1
 800203a:	07db      	lsls	r3, r3, #31
 800203c:	d406      	bmi.n	800204c <HAL_ADC_Init+0xd4>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800203e:	495f      	ldr	r1, [pc, #380]	; (80021bc <HAL_ADC_Init+0x244>)
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002040:	688b      	ldr	r3, [r1, #8]
 8002042:	6865      	ldr	r5, [r4, #4]
 8002044:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 8002048:	432b      	orrs	r3, r5
 800204a:	608b      	str	r3, [r1, #8]
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
                hadc->Init.Overrun                                                     |
                hadc->Init.DataAlign                                                   |
 800204c:	e9d4 1502 	ldrd	r1, r5, [r4, #8]
 8002050:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002052:	432b      	orrs	r3, r5
 8002054:	430b      	orrs	r3, r1
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002056:	7f65      	ldrb	r5, [r4, #29]
                hadc->Init.Resolution                                                  |
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002058:	f894 1024 	ldrb.w	r1, [r4, #36]	; 0x24
                hadc->Init.DataAlign                                                   |
 800205c:	ea43 3345 	orr.w	r3, r3, r5, lsl #13

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002060:	2901      	cmp	r1, #1
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002062:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002066:	d05f      	beq.n	8002128 <HAL_ADC_Init+0x1b0>
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002068:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800206a:	b121      	cbz	r1, 8002076 <HAL_ADC_Init+0xfe>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
                  | hadc->Init.ExternalTrigConvEdge
 800206c:	6b25      	ldr	r5, [r4, #48]	; 0x30
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800206e:	f401 7178 	and.w	r1, r1, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8002072:	4329      	orrs	r1, r5
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002074:	430b      	orrs	r3, r1
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8002076:	68d6      	ldr	r6, [r2, #12]
 8002078:	4951      	ldr	r1, [pc, #324]	; (80021c0 <HAL_ADC_Init+0x248>)

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 800207a:	6b65      	ldr	r5, [r4, #52]	; 0x34
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 800207c:	4031      	ands	r1, r6
 800207e:	430b      	orrs	r3, r1
 8002080:	60d3      	str	r3, [r2, #12]
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8002082:	6913      	ldr	r3, [r2, #16]
 8002084:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8002088:	432b      	orrs	r3, r5
 800208a:	6113      	str	r3, [r2, #16]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800208c:	6893      	ldr	r3, [r2, #8]
 800208e:	075e      	lsls	r6, r3, #29
 8002090:	d523      	bpl.n	80020da <HAL_ADC_Init+0x162>
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002092:	6893      	ldr	r3, [r2, #8]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002094:	6963      	ldr	r3, [r4, #20]
 8002096:	2b01      	cmp	r3, #1
 8002098:	d04e      	beq.n	8002138 <HAL_ADC_Init+0x1c0>
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800209a:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800209c:	f023 030f 	bic.w	r3, r3, #15
 80020a0:	6313      	str	r3, [r2, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80020a2:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80020a4:	f023 0303 	bic.w	r3, r3, #3
 80020a8:	f043 0301 	orr.w	r3, r3, #1
 80020ac:	65e3      	str	r3, [r4, #92]	; 0x5c
    tmp_hal_status = HAL_ERROR;
  }

  /* Return function status */
  return tmp_hal_status;
}
 80020ae:	b002      	add	sp, #8
 80020b0:	bd70      	pop	{r4, r5, r6, pc}
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80020b2:	6893      	ldr	r3, [r2, #8]
 80020b4:	f013 0f04 	tst.w	r3, #4
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80020b8:	f04f 0000 	mov.w	r0, #0
  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80020bc:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80020be:	d0a0      	beq.n	8002002 <HAL_ADC_Init+0x8a>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80020c0:	6de3      	ldr	r3, [r4, #92]	; 0x5c
    tmp_hal_status = HAL_ERROR;
 80020c2:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80020c4:	f043 0310 	orr.w	r3, r3, #16
 80020c8:	65e3      	str	r3, [r4, #92]	; 0x5c
}
 80020ca:	b002      	add	sp, #8
 80020cc:	bd70      	pop	{r4, r5, r6, pc}
    HAL_ADC_MspInit(hadc);
 80020ce:	f7ff fd07 	bl	8001ae0 <HAL_ADC_MspInit>
    ADC_CLEAR_ERRORCODE(hadc);
 80020d2:	6625      	str	r5, [r4, #96]	; 0x60
    hadc->Lock = HAL_UNLOCKED;
 80020d4:	f884 5058 	strb.w	r5, [r4, #88]	; 0x58
 80020d8:	e75a      	b.n	8001f90 <HAL_ADC_Init+0x18>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80020da:	6893      	ldr	r3, [r2, #8]
 80020dc:	071d      	lsls	r5, r3, #28
 80020de:	d4d9      	bmi.n	8002094 <HAL_ADC_Init+0x11c>
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80020e0:	68d1      	ldr	r1, [r2, #12]
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80020e2:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80020e6:	7f26      	ldrb	r6, [r4, #28]
      if (hadc->Init.GainCompensation != 0UL)
 80020e8:	6925      	ldr	r5, [r4, #16]
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80020ea:	f421 4180 	bic.w	r1, r1, #16384	; 0x4000
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80020ee:	005b      	lsls	r3, r3, #1
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80020f0:	f021 0102 	bic.w	r1, r1, #2
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80020f4:	ea43 3386 	orr.w	r3, r3, r6, lsl #14
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80020f8:	430b      	orrs	r3, r1
 80020fa:	60d3      	str	r3, [r2, #12]
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80020fc:	6913      	ldr	r3, [r2, #16]
      if (hadc->Init.GainCompensation != 0UL)
 80020fe:	bb1d      	cbnz	r5, 8002148 <HAL_ADC_Init+0x1d0>
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002100:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002104:	6113      	str	r3, [r2, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8002106:	f8d2 30c0 	ldr.w	r3, [r2, #192]	; 0xc0
 800210a:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800210e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002112:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      if (hadc->Init.OversamplingMode == ENABLE)
 8002116:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 800211a:	2b01      	cmp	r3, #1
 800211c:	d033      	beq.n	8002186 <HAL_ADC_Init+0x20e>
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800211e:	6913      	ldr	r3, [r2, #16]
 8002120:	f023 0301 	bic.w	r3, r3, #1
 8002124:	6113      	str	r3, [r2, #16]
 8002126:	e7b5      	b.n	8002094 <HAL_ADC_Init+0x11c>
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002128:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 800212a:	3901      	subs	r1, #1
 800212c:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
 8002130:	e79a      	b.n	8002068 <HAL_ADC_Init+0xf0>
    return HAL_ERROR;
 8002132:	2001      	movs	r0, #1
}
 8002134:	b002      	add	sp, #8
 8002136:	bd70      	pop	{r4, r5, r6, pc}
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002138:	6b11      	ldr	r1, [r2, #48]	; 0x30
 800213a:	6a23      	ldr	r3, [r4, #32]
 800213c:	f021 010f 	bic.w	r1, r1, #15
 8002140:	3b01      	subs	r3, #1
 8002142:	430b      	orrs	r3, r1
 8002144:	6313      	str	r3, [r2, #48]	; 0x30
 8002146:	e7ac      	b.n	80020a2 <HAL_ADC_Init+0x12a>
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002148:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800214c:	6113      	str	r3, [r2, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 800214e:	f8d2 30c0 	ldr.w	r3, [r2, #192]	; 0xc0
 8002152:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002156:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800215a:	432b      	orrs	r3, r5
 800215c:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 8002160:	e7d9      	b.n	8002116 <HAL_ADC_Init+0x19e>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002162:	4913      	ldr	r1, [pc, #76]	; (80021b0 <HAL_ADC_Init+0x238>)
 8002164:	6893      	ldr	r3, [r2, #8]
 8002166:	6889      	ldr	r1, [r1, #8]
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002168:	430b      	orrs	r3, r1
 800216a:	07d9      	lsls	r1, r3, #31
 800216c:	f53f af6e 	bmi.w	800204c <HAL_ADC_Init+0xd4>
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002170:	4914      	ldr	r1, [pc, #80]	; (80021c4 <HAL_ADC_Init+0x24c>)
 8002172:	e765      	b.n	8002040 <HAL_ADC_Init+0xc8>
 8002174:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002178:	689b      	ldr	r3, [r3, #8]
 800217a:	6891      	ldr	r1, [r2, #8]
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800217c:	430b      	orrs	r3, r1
 800217e:	07db      	lsls	r3, r3, #31
 8002180:	f53f af64 	bmi.w	800204c <HAL_ADC_Init+0xd4>
 8002184:	e7f4      	b.n	8002170 <HAL_ADC_Init+0x1f8>
        MODIFY_REG(hadc->Instance->CFGR2,
 8002186:	e9d4 3611 	ldrd	r3, r6, [r4, #68]	; 0x44
 800218a:	6911      	ldr	r1, [r2, #16]
 800218c:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 800218e:	f421 61ff 	bic.w	r1, r1, #2040	; 0x7f8
 8002192:	f021 0104 	bic.w	r1, r1, #4
 8002196:	4333      	orrs	r3, r6
 8002198:	430b      	orrs	r3, r1
 800219a:	6d21      	ldr	r1, [r4, #80]	; 0x50
 800219c:	432b      	orrs	r3, r5
 800219e:	430b      	orrs	r3, r1
 80021a0:	f043 0301 	orr.w	r3, r3, #1
 80021a4:	6113      	str	r3, [r2, #16]
 80021a6:	e775      	b.n	8002094 <HAL_ADC_Init+0x11c>
 80021a8:	20000408 	.word	0x20000408
 80021ac:	053e2d63 	.word	0x053e2d63
 80021b0:	50000100 	.word	0x50000100
 80021b4:	50000400 	.word	0x50000400
 80021b8:	50000600 	.word	0x50000600
 80021bc:	50000700 	.word	0x50000700
 80021c0:	fff04007 	.word	0xfff04007
 80021c4:	50000300 	.word	0x50000300

080021c8 <HAL_ADC_PollForConversion>:
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80021c8:	6803      	ldr	r3, [r0, #0]
 80021ca:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
{
 80021ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80021d2:	4605      	mov	r5, r0
 80021d4:	460e      	mov	r6, r1
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80021d6:	d06f      	beq.n	80022b8 <HAL_ADC_PollForConversion+0xf0>
 80021d8:	4848      	ldr	r0, [pc, #288]	; (80022fc <HAL_ADC_PollForConversion+0x134>)
 80021da:	4a49      	ldr	r2, [pc, #292]	; (8002300 <HAL_ADC_PollForConversion+0x138>)
 80021dc:	4949      	ldr	r1, [pc, #292]	; (8002304 <HAL_ADC_PollForConversion+0x13c>)
 80021de:	4283      	cmp	r3, r0
 80021e0:	bf18      	it	ne
 80021e2:	460a      	movne	r2, r1

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 80021e4:	69ac      	ldr	r4, [r5, #24]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80021e6:	6897      	ldr	r7, [r2, #8]
 80021e8:	2c08      	cmp	r4, #8
 80021ea:	f007 071f 	and.w	r7, r7, #31
 80021ee:	d00a      	beq.n	8002206 <HAL_ADC_PollForConversion+0x3e>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80021f0:	2f09      	cmp	r7, #9
 80021f2:	d863      	bhi.n	80022bc <HAL_ADC_PollForConversion+0xf4>
 80021f4:	f240 2221 	movw	r2, #545	; 0x221
 80021f8:	40fa      	lsrs	r2, r7
 80021fa:	07d1      	lsls	r1, r2, #31
 80021fc:	d55e      	bpl.n	80022bc <HAL_ADC_PollForConversion+0xf4>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
       )
    {
      /* Check ADC DMA mode in independent mode on ADC group regular */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 80021fe:	68db      	ldr	r3, [r3, #12]
 8002200:	07da      	lsls	r2, r3, #31
 8002202:	d469      	bmi.n	80022d8 <HAL_ADC_PollForConversion+0x110>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
        return HAL_ERROR;
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8002204:	2404      	movs	r4, #4
    }
#endif
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8002206:	f7ff fe9f 	bl	8001f48 <HAL_GetTick>
 800220a:	682a      	ldr	r2, [r5, #0]
 800220c:	4680      	mov	r8, r0

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 800220e:	1c73      	adds	r3, r6, #1
 8002210:	d12c      	bne.n	800226c <HAL_ADC_PollForConversion+0xa4>
 8002212:	6813      	ldr	r3, [r2, #0]
 8002214:	421c      	tst	r4, r3
 8002216:	d0fc      	beq.n	8002212 <HAL_ADC_PollForConversion+0x4a>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002218:	6deb      	ldr	r3, [r5, #92]	; 0x5c
 800221a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800221e:	65eb      	str	r3, [r5, #92]	; 0x5c
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8002220:	68d3      	ldr	r3, [r2, #12]
 8002222:	f413 6f40 	tst.w	r3, #3072	; 0xc00
 8002226:	d10f      	bne.n	8002248 <HAL_ADC_PollForConversion+0x80>

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8002228:	7f6b      	ldrb	r3, [r5, #29]
 800222a:	b96b      	cbnz	r3, 8002248 <HAL_ADC_PollForConversion+0x80>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800222c:	6813      	ldr	r3, [r2, #0]
 800222e:	0718      	lsls	r0, r3, #28
 8002230:	d50a      	bpl.n	8002248 <HAL_ADC_PollForConversion+0x80>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002232:	6deb      	ldr	r3, [r5, #92]	; 0x5c
 8002234:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002238:	65eb      	str	r3, [r5, #92]	; 0x5c

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800223a:	6deb      	ldr	r3, [r5, #92]	; 0x5c
 800223c:	04d9      	lsls	r1, r3, #19
 800223e:	d403      	bmi.n	8002248 <HAL_ADC_PollForConversion+0x80>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002240:	6deb      	ldr	r3, [r5, #92]	; 0x5c
 8002242:	f043 0301 	orr.w	r3, r3, #1
 8002246:	65eb      	str	r3, [r5, #92]	; 0x5c

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
#if defined(ADC_MULTIMODE_SUPPORT)
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002248:	4b2c      	ldr	r3, [pc, #176]	; (80022fc <HAL_ADC_PollForConversion+0x134>)
 800224a:	429a      	cmp	r2, r3
 800224c:	d029      	beq.n	80022a2 <HAL_ADC_PollForConversion+0xda>
 800224e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002252:	429a      	cmp	r2, r3
 8002254:	d04e      	beq.n	80022f4 <HAL_ADC_PollForConversion+0x12c>
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8002256:	2c08      	cmp	r4, #8
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002258:	68d0      	ldr	r0, [r2, #12]
  if (tmp_Flag_End == ADC_FLAG_EOS)
 800225a:	d029      	beq.n	80022b0 <HAL_ADC_PollForConversion+0xe8>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 800225c:	f410 4080 	ands.w	r0, r0, #16384	; 0x4000
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002260:	bf06      	itte	eq
 8002262:	230c      	moveq	r3, #12
 8002264:	6013      	streq	r3, [r2, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8002266:	2000      	movne	r0, #0
}
 8002268:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 800226c:	6813      	ldr	r3, [r2, #0]
 800226e:	4223      	tst	r3, r4
 8002270:	d1d2      	bne.n	8002218 <HAL_ADC_PollForConversion+0x50>
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8002272:	f7ff fe69 	bl	8001f48 <HAL_GetTick>
 8002276:	eba0 0008 	sub.w	r0, r0, r8
 800227a:	42b0      	cmp	r0, r6
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 800227c:	682a      	ldr	r2, [r5, #0]
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 800227e:	d90a      	bls.n	8002296 <HAL_ADC_PollForConversion+0xce>
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002280:	6813      	ldr	r3, [r2, #0]
 8002282:	4023      	ands	r3, r4
 8002284:	d1c3      	bne.n	800220e <HAL_ADC_PollForConversion+0x46>
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002286:	6dea      	ldr	r2, [r5, #92]	; 0x5c
          __HAL_UNLOCK(hadc);
 8002288:	f885 3058 	strb.w	r3, [r5, #88]	; 0x58
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800228c:	f042 0204 	orr.w	r2, r2, #4
 8002290:	65ea      	str	r2, [r5, #92]	; 0x5c
          return HAL_TIMEOUT;
 8002292:	2003      	movs	r0, #3
 8002294:	e7e8      	b.n	8002268 <HAL_ADC_PollForConversion+0xa0>
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8002296:	2e00      	cmp	r6, #0
 8002298:	d1b9      	bne.n	800220e <HAL_ADC_PollForConversion+0x46>
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 800229a:	6813      	ldr	r3, [r2, #0]
 800229c:	4023      	ands	r3, r4
 800229e:	d1b6      	bne.n	800220e <HAL_ADC_PollForConversion+0x46>
 80022a0:	e7f1      	b.n	8002286 <HAL_ADC_PollForConversion+0xbe>
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80022a2:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80022a6:	2f09      	cmp	r7, #9
 80022a8:	d91d      	bls.n	80022e6 <HAL_ADC_PollForConversion+0x11e>
  if (tmp_Flag_End == ADC_FLAG_EOS)
 80022aa:	2c08      	cmp	r4, #8
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80022ac:	68c8      	ldr	r0, [r1, #12]
  if (tmp_Flag_End == ADC_FLAG_EOS)
 80022ae:	d1d5      	bne.n	800225c <HAL_ADC_PollForConversion+0x94>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 80022b0:	6014      	str	r4, [r2, #0]
  return HAL_OK;
 80022b2:	2000      	movs	r0, #0
}
 80022b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80022b8:	4a11      	ldr	r2, [pc, #68]	; (8002300 <HAL_ADC_PollForConversion+0x138>)
 80022ba:	e793      	b.n	80021e4 <HAL_ADC_PollForConversion+0x1c>
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 80022bc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80022c0:	d01a      	beq.n	80022f8 <HAL_ADC_PollForConversion+0x130>
 80022c2:	480e      	ldr	r0, [pc, #56]	; (80022fc <HAL_ADC_PollForConversion+0x134>)
 80022c4:	4a0e      	ldr	r2, [pc, #56]	; (8002300 <HAL_ADC_PollForConversion+0x138>)
 80022c6:	490f      	ldr	r1, [pc, #60]	; (8002304 <HAL_ADC_PollForConversion+0x13c>)
 80022c8:	4283      	cmp	r3, r0
 80022ca:	bf0c      	ite	eq
 80022cc:	4613      	moveq	r3, r2
 80022ce:	460b      	movne	r3, r1
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 80022d0:	689b      	ldr	r3, [r3, #8]
 80022d2:	f413 4f60 	tst.w	r3, #57344	; 0xe000
 80022d6:	d095      	beq.n	8002204 <HAL_ADC_PollForConversion+0x3c>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80022d8:	6deb      	ldr	r3, [r5, #92]	; 0x5c
 80022da:	f043 0320 	orr.w	r3, r3, #32
 80022de:	65eb      	str	r3, [r5, #92]	; 0x5c
        return HAL_ERROR;
 80022e0:	2001      	movs	r0, #1
}
 80022e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80022e6:	f240 2321 	movw	r3, #545	; 0x221
 80022ea:	fa23 f707 	lsr.w	r7, r3, r7
 80022ee:	07fb      	lsls	r3, r7, #31
 80022f0:	d5db      	bpl.n	80022aa <HAL_ADC_PollForConversion+0xe2>
 80022f2:	e7b0      	b.n	8002256 <HAL_ADC_PollForConversion+0x8e>
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80022f4:	4904      	ldr	r1, [pc, #16]	; (8002308 <HAL_ADC_PollForConversion+0x140>)
 80022f6:	e7d6      	b.n	80022a6 <HAL_ADC_PollForConversion+0xde>
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 80022f8:	4b01      	ldr	r3, [pc, #4]	; (8002300 <HAL_ADC_PollForConversion+0x138>)
 80022fa:	e7e9      	b.n	80022d0 <HAL_ADC_PollForConversion+0x108>
 80022fc:	50000100 	.word	0x50000100
 8002300:	50000300 	.word	0x50000300
 8002304:	50000700 	.word	0x50000700
 8002308:	50000400 	.word	0x50000400

0800230c <HAL_ADC_GetValue>:

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 800230c:	6803      	ldr	r3, [r0, #0]
 800230e:	6c18      	ldr	r0, [r3, #64]	; 0x40
}
 8002310:	4770      	bx	lr
 8002312:	bf00      	nop

08002314 <HAL_ADC_ConvCpltCallback>:
 8002314:	4770      	bx	lr
 8002316:	bf00      	nop

08002318 <HAL_ADC_LevelOutOfWindowCallback>:
 8002318:	4770      	bx	lr
 800231a:	bf00      	nop

0800231c <HAL_ADC_ErrorCallback>:
 800231c:	4770      	bx	lr
 800231e:	bf00      	nop

08002320 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8002320:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
  uint32_t tmp_isr = hadc->Instance->ISR;
 8002322:	6803      	ldr	r3, [r0, #0]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002324:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
  uint32_t tmp_isr = hadc->Instance->ISR;
 8002328:	681e      	ldr	r6, [r3, #0]
  uint32_t tmp_ier = hadc->Instance->IER;
 800232a:	685f      	ldr	r7, [r3, #4]
{
 800232c:	4604      	mov	r4, r0
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800232e:	f000 80d2 	beq.w	80024d6 <HAL_ADC_IRQHandler+0x1b6>
 8002332:	48a2      	ldr	r0, [pc, #648]	; (80025bc <HAL_ADC_IRQHandler+0x29c>)
 8002334:	4aa2      	ldr	r2, [pc, #648]	; (80025c0 <HAL_ADC_IRQHandler+0x2a0>)
 8002336:	49a3      	ldr	r1, [pc, #652]	; (80025c4 <HAL_ADC_IRQHandler+0x2a4>)
 8002338:	4283      	cmp	r3, r0
 800233a:	bf08      	it	eq
 800233c:	460a      	moveq	r2, r1
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 800233e:	6895      	ldr	r5, [r2, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8002340:	07b1      	lsls	r1, r6, #30
 8002342:	f005 051f 	and.w	r5, r5, #31
 8002346:	d502      	bpl.n	800234e <HAL_ADC_IRQHandler+0x2e>
 8002348:	07ba      	lsls	r2, r7, #30
 800234a:	f100 80b6 	bmi.w	80024ba <HAL_ADC_IRQHandler+0x19a>
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 800234e:	0770      	lsls	r0, r6, #29
 8002350:	f140 8086 	bpl.w	8002460 <HAL_ADC_IRQHandler+0x140>
 8002354:	0779      	lsls	r1, r7, #29
 8002356:	f140 8083 	bpl.w	8002460 <HAL_ADC_IRQHandler+0x140>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800235a:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 800235c:	06d1      	lsls	r1, r2, #27
 800235e:	d403      	bmi.n	8002368 <HAL_ADC_IRQHandler+0x48>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002360:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8002362:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002366:	65e2      	str	r2, [r4, #92]	; 0x5c
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8002368:	68da      	ldr	r2, [r3, #12]
 800236a:	f412 6f40 	tst.w	r2, #3072	; 0xc00
 800236e:	d121      	bne.n	80023b4 <HAL_ADC_IRQHandler+0x94>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002370:	4a92      	ldr	r2, [pc, #584]	; (80025bc <HAL_ADC_IRQHandler+0x29c>)
 8002372:	4293      	cmp	r3, r2
 8002374:	f000 80ec 	beq.w	8002550 <HAL_ADC_IRQHandler+0x230>
 8002378:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800237c:	4293      	cmp	r3, r2
 800237e:	f000 810f 	beq.w	80025a0 <HAL_ADC_IRQHandler+0x280>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002382:	68da      	ldr	r2, [r3, #12]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8002384:	0490      	lsls	r0, r2, #18
 8002386:	d415      	bmi.n	80023b4 <HAL_ADC_IRQHandler+0x94>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8002388:	681a      	ldr	r2, [r3, #0]
 800238a:	0711      	lsls	r1, r2, #28
 800238c:	d512      	bpl.n	80023b4 <HAL_ADC_IRQHandler+0x94>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800238e:	689a      	ldr	r2, [r3, #8]
 8002390:	0752      	lsls	r2, r2, #29
 8002392:	f100 80fc 	bmi.w	800258e <HAL_ADC_IRQHandler+0x26e>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8002396:	685a      	ldr	r2, [r3, #4]
 8002398:	f022 020c 	bic.w	r2, r2, #12
 800239c:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800239e:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80023a0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80023a4:	65e3      	str	r3, [r4, #92]	; 0x5c

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80023a6:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80023a8:	04db      	lsls	r3, r3, #19
 80023aa:	d403      	bmi.n	80023b4 <HAL_ADC_IRQHandler+0x94>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80023ac:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80023ae:	f043 0301 	orr.w	r3, r3, #1
 80023b2:	65e3      	str	r3, [r4, #92]	; 0x5c
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80023b4:	4620      	mov	r0, r4
 80023b6:	f7ff ffad 	bl	8002314 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80023ba:	6823      	ldr	r3, [r4, #0]
 80023bc:	220c      	movs	r2, #12
 80023be:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 80023c0:	06b0      	lsls	r0, r6, #26
 80023c2:	d554      	bpl.n	800246e <HAL_ADC_IRQHandler+0x14e>
 80023c4:	06b9      	lsls	r1, r7, #26
 80023c6:	d552      	bpl.n	800246e <HAL_ADC_IRQHandler+0x14e>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80023c8:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 80023ca:	06d1      	lsls	r1, r2, #27
 80023cc:	d403      	bmi.n	80023d6 <HAL_ADC_IRQHandler+0xb6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80023ce:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 80023d0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80023d4:	65e2      	str	r2, [r4, #92]	; 0x5c
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80023d6:	4979      	ldr	r1, [pc, #484]	; (80025bc <HAL_ADC_IRQHandler+0x29c>)
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 80023d8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80023da:	68d8      	ldr	r0, [r3, #12]
 80023dc:	428b      	cmp	r3, r1
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 80023de:	f402 72c0 	and.w	r2, r2, #384	; 0x180
 80023e2:	f000 80bb 	beq.w	800255c <HAL_ADC_IRQHandler+0x23c>
 80023e6:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80023ea:	428b      	cmp	r3, r1
 80023ec:	f000 80c2 	beq.w	8002574 <HAL_ADC_IRQHandler+0x254>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80023f0:	68d9      	ldr	r1, [r3, #12]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 80023f2:	b9d2      	cbnz	r2, 800242a <HAL_ADC_IRQHandler+0x10a>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 80023f4:	018a      	lsls	r2, r1, #6
 80023f6:	f100 80a3 	bmi.w	8002540 <HAL_ADC_IRQHandler+0x220>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 80023fa:	681a      	ldr	r2, [r3, #0]
 80023fc:	0650      	lsls	r0, r2, #25
 80023fe:	d514      	bpl.n	800242a <HAL_ADC_IRQHandler+0x10a>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8002400:	0289      	lsls	r1, r1, #10
 8002402:	d412      	bmi.n	800242a <HAL_ADC_IRQHandler+0x10a>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002404:	689a      	ldr	r2, [r3, #8]
 8002406:	0712      	lsls	r2, r2, #28
 8002408:	f100 80ce 	bmi.w	80025a8 <HAL_ADC_IRQHandler+0x288>
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 800240c:	685a      	ldr	r2, [r3, #4]
 800240e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002412:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8002414:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8002416:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800241a:	65e3      	str	r3, [r4, #92]	; 0x5c

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 800241c:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800241e:	05d8      	lsls	r0, r3, #23
 8002420:	d403      	bmi.n	800242a <HAL_ADC_IRQHandler+0x10a>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002422:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8002424:	f043 0301 	orr.w	r3, r3, #1
 8002428:	65e3      	str	r3, [r4, #92]	; 0x5c
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800242a:	4620      	mov	r0, r4
 800242c:	f000 fd56 	bl	8002edc <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8002430:	6823      	ldr	r3, [r4, #0]
 8002432:	2260      	movs	r2, #96	; 0x60
 8002434:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8002436:	0631      	lsls	r1, r6, #24
 8002438:	d501      	bpl.n	800243e <HAL_ADC_IRQHandler+0x11e>
 800243a:	063a      	lsls	r2, r7, #24
 800243c:	d459      	bmi.n	80024f2 <HAL_ADC_IRQHandler+0x1d2>
    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 800243e:	05f0      	lsls	r0, r6, #23
 8002440:	d501      	bpl.n	8002446 <HAL_ADC_IRQHandler+0x126>
 8002442:	05f9      	lsls	r1, r7, #23
 8002444:	d460      	bmi.n	8002508 <HAL_ADC_IRQHandler+0x1e8>
    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8002446:	05b2      	lsls	r2, r6, #22
 8002448:	d501      	bpl.n	800244e <HAL_ADC_IRQHandler+0x12e>
 800244a:	05b8      	lsls	r0, r7, #22
 800244c:	d445      	bmi.n	80024da <HAL_ADC_IRQHandler+0x1ba>
    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 800244e:	06f1      	lsls	r1, r6, #27
 8002450:	d501      	bpl.n	8002456 <HAL_ADC_IRQHandler+0x136>
 8002452:	06fa      	lsls	r2, r7, #27
 8002454:	d410      	bmi.n	8002478 <HAL_ADC_IRQHandler+0x158>
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8002456:	0571      	lsls	r1, r6, #21
 8002458:	d501      	bpl.n	800245e <HAL_ADC_IRQHandler+0x13e>
 800245a:	057a      	lsls	r2, r7, #21
 800245c:	d460      	bmi.n	8002520 <HAL_ADC_IRQHandler+0x200>
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 800245e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8002460:	0732      	lsls	r2, r6, #28
 8002462:	d5ad      	bpl.n	80023c0 <HAL_ADC_IRQHandler+0xa0>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8002464:	0738      	lsls	r0, r7, #28
 8002466:	f53f af78 	bmi.w	800235a <HAL_ADC_IRQHandler+0x3a>
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 800246a:	06b0      	lsls	r0, r6, #26
 800246c:	d4aa      	bmi.n	80023c4 <HAL_ADC_IRQHandler+0xa4>
 800246e:	0672      	lsls	r2, r6, #25
 8002470:	d5e1      	bpl.n	8002436 <HAL_ADC_IRQHandler+0x116>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8002472:	0678      	lsls	r0, r7, #25
 8002474:	d5df      	bpl.n	8002436 <HAL_ADC_IRQHandler+0x116>
 8002476:	e7a7      	b.n	80023c8 <HAL_ADC_IRQHandler+0xa8>
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8002478:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800247a:	b17a      	cbz	r2, 800249c <HAL_ADC_IRQHandler+0x17c>
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 800247c:	2d00      	cmp	r5, #0
 800247e:	d07c      	beq.n	800257a <HAL_ADC_IRQHandler+0x25a>
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8002480:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002484:	f000 808e 	beq.w	80025a4 <HAL_ADC_IRQHandler+0x284>
 8002488:	484c      	ldr	r0, [pc, #304]	; (80025bc <HAL_ADC_IRQHandler+0x29c>)
 800248a:	4a4d      	ldr	r2, [pc, #308]	; (80025c0 <HAL_ADC_IRQHandler+0x2a0>)
 800248c:	494d      	ldr	r1, [pc, #308]	; (80025c4 <HAL_ADC_IRQHandler+0x2a4>)
 800248e:	4283      	cmp	r3, r0
 8002490:	bf08      	it	eq
 8002492:	460a      	moveq	r2, r1
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8002494:	6892      	ldr	r2, [r2, #8]
 8002496:	f412 4f60 	tst.w	r2, #57344	; 0xe000
 800249a:	d00b      	beq.n	80024b4 <HAL_ADC_IRQHandler+0x194>
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 800249c:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800249e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80024a2:	65e3      	str	r3, [r4, #92]	; 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80024a4:	6e23      	ldr	r3, [r4, #96]	; 0x60
 80024a6:	f043 0302 	orr.w	r3, r3, #2
 80024aa:	6623      	str	r3, [r4, #96]	; 0x60
      HAL_ADC_ErrorCallback(hadc);
 80024ac:	4620      	mov	r0, r4
 80024ae:	f7ff ff35 	bl	800231c <HAL_ADC_ErrorCallback>
 80024b2:	6823      	ldr	r3, [r4, #0]
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80024b4:	2210      	movs	r2, #16
 80024b6:	601a      	str	r2, [r3, #0]
 80024b8:	e7cd      	b.n	8002456 <HAL_ADC_IRQHandler+0x136>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80024ba:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80024bc:	06db      	lsls	r3, r3, #27
 80024be:	d403      	bmi.n	80024c8 <HAL_ADC_IRQHandler+0x1a8>
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 80024c0:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80024c2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80024c6:	65e3      	str	r3, [r4, #92]	; 0x5c
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 80024c8:	4620      	mov	r0, r4
 80024ca:	f000 fd0f 	bl	8002eec <HAL_ADCEx_EndOfSamplingCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 80024ce:	6823      	ldr	r3, [r4, #0]
 80024d0:	2202      	movs	r2, #2
 80024d2:	601a      	str	r2, [r3, #0]
 80024d4:	e73b      	b.n	800234e <HAL_ADC_IRQHandler+0x2e>
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80024d6:	4a3b      	ldr	r2, [pc, #236]	; (80025c4 <HAL_ADC_IRQHandler+0x2a4>)
 80024d8:	e731      	b.n	800233e <HAL_ADC_IRQHandler+0x1e>
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 80024da:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80024dc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80024e0:	65e3      	str	r3, [r4, #92]	; 0x5c
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 80024e2:	4620      	mov	r0, r4
 80024e4:	f000 fd00 	bl	8002ee8 <HAL_ADCEx_LevelOutOfWindow3Callback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 80024e8:	6823      	ldr	r3, [r4, #0]
 80024ea:	f44f 7200 	mov.w	r2, #512	; 0x200
 80024ee:	601a      	str	r2, [r3, #0]
 80024f0:	e7ad      	b.n	800244e <HAL_ADC_IRQHandler+0x12e>
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80024f2:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80024f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024f8:	65e3      	str	r3, [r4, #92]	; 0x5c
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 80024fa:	4620      	mov	r0, r4
 80024fc:	f7ff ff0c 	bl	8002318 <HAL_ADC_LevelOutOfWindowCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8002500:	6823      	ldr	r3, [r4, #0]
 8002502:	2280      	movs	r2, #128	; 0x80
 8002504:	601a      	str	r2, [r3, #0]
 8002506:	e79a      	b.n	800243e <HAL_ADC_IRQHandler+0x11e>
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8002508:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800250a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800250e:	65e3      	str	r3, [r4, #92]	; 0x5c
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8002510:	4620      	mov	r0, r4
 8002512:	f000 fce7 	bl	8002ee4 <HAL_ADCEx_LevelOutOfWindow2Callback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8002516:	6823      	ldr	r3, [r4, #0]
 8002518:	f44f 7280 	mov.w	r2, #256	; 0x100
 800251c:	601a      	str	r2, [r3, #0]
 800251e:	e792      	b.n	8002446 <HAL_ADC_IRQHandler+0x126>
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8002520:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8002522:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002526:	65e2      	str	r2, [r4, #92]	; 0x5c
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8002528:	6e22      	ldr	r2, [r4, #96]	; 0x60
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 800252a:	f44f 6180 	mov.w	r1, #1024	; 0x400
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 800252e:	f042 0208 	orr.w	r2, r2, #8
 8002532:	6622      	str	r2, [r4, #96]	; 0x60
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8002534:	4620      	mov	r0, r4
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8002536:	6019      	str	r1, [r3, #0]
}
 8002538:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 800253c:	f000 bcd0 	b.w	8002ee0 <HAL_ADCEx_InjectedQueueOverflowCallback>
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8002540:	f400 6040 	and.w	r0, r0, #3072	; 0xc00
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8002544:	f401 5200 	and.w	r2, r1, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8002548:	4302      	orrs	r2, r0
 800254a:	f47f af6e 	bne.w	800242a <HAL_ADC_IRQHandler+0x10a>
 800254e:	e754      	b.n	80023fa <HAL_ADC_IRQHandler+0xda>
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002550:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002554:	2d09      	cmp	r5, #9
 8002556:	d914      	bls.n	8002582 <HAL_ADC_IRQHandler+0x262>
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8002558:	68ca      	ldr	r2, [r1, #12]
 800255a:	e713      	b.n	8002384 <HAL_ADC_IRQHandler+0x64>
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800255c:	f04f 4ca0 	mov.w	ip, #1342177280	; 0x50000000
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002560:	2d00      	cmp	r5, #0
 8002562:	f43f af45 	beq.w	80023f0 <HAL_ADC_IRQHandler+0xd0>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8002566:	1fa9      	subs	r1, r5, #6
 8002568:	2901      	cmp	r1, #1
 800256a:	f67f af41 	bls.w	80023f0 <HAL_ADC_IRQHandler+0xd0>
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 800256e:	f8dc 100c 	ldr.w	r1, [ip, #12]
 8002572:	e73e      	b.n	80023f2 <HAL_ADC_IRQHandler+0xd2>
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002574:	f8df c050 	ldr.w	ip, [pc, #80]	; 80025c8 <HAL_ADC_IRQHandler+0x2a8>
 8002578:	e7f2      	b.n	8002560 <HAL_ADC_IRQHandler+0x240>
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 800257a:	68da      	ldr	r2, [r3, #12]
 800257c:	07d0      	lsls	r0, r2, #31
 800257e:	d599      	bpl.n	80024b4 <HAL_ADC_IRQHandler+0x194>
 8002580:	e78c      	b.n	800249c <HAL_ADC_IRQHandler+0x17c>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002582:	f240 2221 	movw	r2, #545	; 0x221
 8002586:	40ea      	lsrs	r2, r5
 8002588:	07d2      	lsls	r2, r2, #31
 800258a:	d5e5      	bpl.n	8002558 <HAL_ADC_IRQHandler+0x238>
 800258c:	e6f9      	b.n	8002382 <HAL_ADC_IRQHandler+0x62>
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800258e:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8002590:	f043 0310 	orr.w	r3, r3, #16
 8002594:	65e3      	str	r3, [r4, #92]	; 0x5c
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002596:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8002598:	f043 0301 	orr.w	r3, r3, #1
 800259c:	6623      	str	r3, [r4, #96]	; 0x60
 800259e:	e709      	b.n	80023b4 <HAL_ADC_IRQHandler+0x94>
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80025a0:	4909      	ldr	r1, [pc, #36]	; (80025c8 <HAL_ADC_IRQHandler+0x2a8>)
 80025a2:	e7d7      	b.n	8002554 <HAL_ADC_IRQHandler+0x234>
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 80025a4:	4a07      	ldr	r2, [pc, #28]	; (80025c4 <HAL_ADC_IRQHandler+0x2a4>)
 80025a6:	e775      	b.n	8002494 <HAL_ADC_IRQHandler+0x174>
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80025a8:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80025aa:	f043 0310 	orr.w	r3, r3, #16
 80025ae:	65e3      	str	r3, [r4, #92]	; 0x5c
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80025b0:	6e23      	ldr	r3, [r4, #96]	; 0x60
 80025b2:	f043 0301 	orr.w	r3, r3, #1
 80025b6:	6623      	str	r3, [r4, #96]	; 0x60
 80025b8:	e737      	b.n	800242a <HAL_ADC_IRQHandler+0x10a>
 80025ba:	bf00      	nop
 80025bc:	50000100 	.word	0x50000100
 80025c0:	50000700 	.word	0x50000700
 80025c4:	50000300 	.word	0x50000300
 80025c8:	50000400 	.word	0x50000400

080025cc <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80025cc:	b5f0      	push	{r4, r5, r6, r7, lr}
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80025ce:	f890 2058 	ldrb.w	r2, [r0, #88]	; 0x58
{
 80025d2:	b083      	sub	sp, #12
 80025d4:	4603      	mov	r3, r0
  __HAL_LOCK(hadc);
 80025d6:	2a01      	cmp	r2, #1
  __IO uint32_t wait_loop_index = 0UL;
 80025d8:	f04f 0000 	mov.w	r0, #0
 80025dc:	9001      	str	r0, [sp, #4]
  __HAL_LOCK(hadc);
 80025de:	f000 8150 	beq.w	8002882 <HAL_ADC_ConfigChannel+0x2b6>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80025e2:	681a      	ldr	r2, [r3, #0]
  __HAL_LOCK(hadc);
 80025e4:	2001      	movs	r0, #1
 80025e6:	f883 0058 	strb.w	r0, [r3, #88]	; 0x58
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80025ea:	6894      	ldr	r4, [r2, #8]
 80025ec:	0766      	lsls	r6, r4, #29
 80025ee:	d450      	bmi.n	8002692 <HAL_ADC_ConfigChannel+0xc6>
  MODIFY_REG(*preg,
 80025f0:	e9d1 0400 	ldrd	r0, r4, [r1]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80025f4:	09a6      	lsrs	r6, r4, #6
 80025f6:	f102 0530 	add.w	r5, r2, #48	; 0x30
 80025fa:	f006 060c 	and.w	r6, r6, #12
  MODIFY_REG(*preg,
 80025fe:	f004 041f 	and.w	r4, r4, #31
 8002602:	5977      	ldr	r7, [r6, r5]
 8002604:	f04f 0c1f 	mov.w	ip, #31
 8002608:	fa0c fc04 	lsl.w	ip, ip, r4
 800260c:	f3c0 6084 	ubfx	r0, r0, #26, #5
 8002610:	ea27 070c 	bic.w	r7, r7, ip
 8002614:	40a0      	lsls	r0, r4
 8002616:	4338      	orrs	r0, r7
 8002618:	5170      	str	r0, [r6, r5]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800261a:	6890      	ldr	r0, [r2, #8]
 800261c:	0745      	lsls	r5, r0, #29
 800261e:	f140 80a5 	bpl.w	800276c <HAL_ADC_ConfigChannel+0x1a0>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002622:	6890      	ldr	r0, [r2, #8]
 8002624:	6808      	ldr	r0, [r1, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002626:	6894      	ldr	r4, [r2, #8]
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002628:	07e4      	lsls	r4, r4, #31
 800262a:	d53b      	bpl.n	80026a4 <HAL_ADC_ConfigChannel+0xd8>
 800262c:	4604      	mov	r4, r0
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800262e:	49c2      	ldr	r1, [pc, #776]	; (8002938 <HAL_ADC_ConfigChannel+0x36c>)
 8002630:	420c      	tst	r4, r1
 8002632:	d02c      	beq.n	800268e <HAL_ADC_ConfigChannel+0xc2>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002634:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
 8002638:	f000 8121 	beq.w	800287e <HAL_ADC_ConfigChannel+0x2b2>
 800263c:	4dbf      	ldr	r5, [pc, #764]	; (800293c <HAL_ADC_ConfigChannel+0x370>)
 800263e:	49c0      	ldr	r1, [pc, #768]	; (8002940 <HAL_ADC_ConfigChannel+0x374>)
 8002640:	48c0      	ldr	r0, [pc, #768]	; (8002944 <HAL_ADC_ConfigChannel+0x378>)
 8002642:	42aa      	cmp	r2, r5
 8002644:	bf18      	it	ne
 8002646:	4601      	movne	r1, r0
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8002648:	6888      	ldr	r0, [r1, #8]

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 800264a:	49bf      	ldr	r1, [pc, #764]	; (8002948 <HAL_ADC_ConfigChannel+0x37c>)
 800264c:	428c      	cmp	r4, r1
 800264e:	f000 75e0 	and.w	r5, r0, #29360128	; 0x1c00000
 8002652:	f000 8119 	beq.w	8002888 <HAL_ADC_ConfigChannel+0x2bc>
 8002656:	49bd      	ldr	r1, [pc, #756]	; (800294c <HAL_ADC_ConfigChannel+0x380>)
 8002658:	428c      	cmp	r4, r1
 800265a:	f000 8115 	beq.w	8002888 <HAL_ADC_ConfigChannel+0x2bc>
          {
            wait_loop_index--;
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800265e:	49bc      	ldr	r1, [pc, #752]	; (8002950 <HAL_ADC_ConfigChannel+0x384>)
 8002660:	428c      	cmp	r4, r1
 8002662:	f040 814d 	bne.w	8002900 <HAL_ADC_ConfigChannel+0x334>
 8002666:	01c0      	lsls	r0, r0, #7
 8002668:	d411      	bmi.n	800268e <HAL_ADC_ConfigChannel+0xc2>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800266a:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
 800266e:	f000 822c 	beq.w	8002aca <HAL_ADC_ConfigChannel+0x4fe>
 8002672:	4cb2      	ldr	r4, [pc, #712]	; (800293c <HAL_ADC_ConfigChannel+0x370>)
 8002674:	49b2      	ldr	r1, [pc, #712]	; (8002940 <HAL_ADC_ConfigChannel+0x374>)
 8002676:	48b3      	ldr	r0, [pc, #716]	; (8002944 <HAL_ADC_ConfigChannel+0x378>)
 8002678:	42a2      	cmp	r2, r4
 800267a:	bf0c      	ite	eq
 800267c:	460a      	moveq	r2, r1
 800267e:	4602      	movne	r2, r0
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8002680:	6891      	ldr	r1, [r2, #8]
 8002682:	f021 71e0 	bic.w	r1, r1, #29360128	; 0x1c00000
 8002686:	430d      	orrs	r5, r1
 8002688:	f045 7580 	orr.w	r5, r5, #16777216	; 0x1000000
 800268c:	6095      	str	r5, [r2, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800268e:	2000      	movs	r0, #0
}
 8002690:	e003      	b.n	800269a <HAL_ADC_ConfigChannel+0xce>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002692:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002694:	f042 0220 	orr.w	r2, r2, #32
 8002698:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800269a:	2200      	movs	r2, #0
 800269c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
}
 80026a0:	b003      	add	sp, #12
 80026a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80026a4:	68ce      	ldr	r6, [r1, #12]
  MODIFY_REG(ADCx->DIFSEL,
 80026a6:	4cab      	ldr	r4, [pc, #684]	; (8002954 <HAL_ADC_ConfigChannel+0x388>)
 80026a8:	f8d2 50b0 	ldr.w	r5, [r2, #176]	; 0xb0
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80026ac:	f8df c2b8 	ldr.w	ip, [pc, #696]	; 8002968 <HAL_ADC_ConfigChannel+0x39c>
 80026b0:	f006 0718 	and.w	r7, r6, #24
 80026b4:	40fc      	lsrs	r4, r7
 80026b6:	f3c0 0712 	ubfx	r7, r0, #0, #19
 80026ba:	4004      	ands	r4, r0
 80026bc:	ea25 0507 	bic.w	r5, r5, r7
 80026c0:	432c      	orrs	r4, r5
 80026c2:	4566      	cmp	r6, ip
 80026c4:	f8c2 40b0 	str.w	r4, [r2, #176]	; 0xb0
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80026c8:	4604      	mov	r4, r0
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80026ca:	d1b0      	bne.n	800262e <HAL_ADC_ConfigChannel+0x62>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80026cc:	2f00      	cmp	r7, #0
 80026ce:	f000 8104 	beq.w	80028da <HAL_ADC_ConfigChannel+0x30e>
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026d2:	fa90 f4a0 	rbit	r4, r0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80026d6:	2c00      	cmp	r4, #0
 80026d8:	f000 819c 	beq.w	8002a14 <HAL_ADC_ConfigChannel+0x448>
  {
    return 32U;
  }
  return __builtin_clz(value);
 80026dc:	fab4 f484 	clz	r4, r4
 80026e0:	3401      	adds	r4, #1
 80026e2:	f004 041f 	and.w	r4, r4, #31
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80026e6:	2c09      	cmp	r4, #9
 80026e8:	f240 8194 	bls.w	8002a14 <HAL_ADC_ConfigChannel+0x448>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026ec:	fa90 f5a0 	rbit	r5, r0
  if (value == 0U)
 80026f0:	2d00      	cmp	r5, #0
 80026f2:	f000 81f0 	beq.w	8002ad6 <HAL_ADC_ConfigChannel+0x50a>
  return __builtin_clz(value);
 80026f6:	fab5 f585 	clz	r5, r5
 80026fa:	3501      	adds	r5, #1
 80026fc:	06ad      	lsls	r5, r5, #26
 80026fe:	f005 45f8 	and.w	r5, r5, #2080374784	; 0x7c000000
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002702:	fa90 f4a0 	rbit	r4, r0
  if (value == 0U)
 8002706:	2c00      	cmp	r4, #0
 8002708:	f000 81e3 	beq.w	8002ad2 <HAL_ADC_ConfigChannel+0x506>
  return __builtin_clz(value);
 800270c:	fab4 f484 	clz	r4, r4
 8002710:	3401      	adds	r4, #1
 8002712:	f004 041f 	and.w	r4, r4, #31
 8002716:	2601      	movs	r6, #1
 8002718:	fa06 f404 	lsl.w	r4, r6, r4
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800271c:	4325      	orrs	r5, r4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800271e:	fa90 f0a0 	rbit	r0, r0
  if (value == 0U)
 8002722:	2800      	cmp	r0, #0
 8002724:	f000 81d3 	beq.w	8002ace <HAL_ADC_ConfigChannel+0x502>
  return __builtin_clz(value);
 8002728:	fab0 f480 	clz	r4, r0
 800272c:	3401      	adds	r4, #1
 800272e:	f004 041f 	and.w	r4, r4, #31
 8002732:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8002736:	f1a4 001e 	sub.w	r0, r4, #30
 800273a:	0500      	lsls	r0, r0, #20
 800273c:	f040 7000 	orr.w	r0, r0, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002740:	4328      	orrs	r0, r5
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8002742:	0dc7      	lsrs	r7, r0, #23
 8002744:	f007 0704 	and.w	r7, r7, #4
 8002748:	f102 0514 	add.w	r5, r2, #20
  MODIFY_REG(*preg,
 800274c:	688e      	ldr	r6, [r1, #8]
 800274e:	597c      	ldr	r4, [r7, r5]
 8002750:	f3c0 5004 	ubfx	r0, r0, #20, #5
 8002754:	f04f 0c07 	mov.w	ip, #7
 8002758:	fa0c fc00 	lsl.w	ip, ip, r0
 800275c:	ea24 040c 	bic.w	r4, r4, ip
 8002760:	fa06 f000 	lsl.w	r0, r6, r0
 8002764:	4320      	orrs	r0, r4
 8002766:	5178      	str	r0, [r7, r5]
 8002768:	680c      	ldr	r4, [r1, #0]
}
 800276a:	e760      	b.n	800262e <HAL_ADC_ConfigChannel+0x62>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800276c:	6890      	ldr	r0, [r2, #8]
 800276e:	f010 0008 	ands.w	r0, r0, #8
 8002772:	f040 8082 	bne.w	800287a <HAL_ADC_ConfigChannel+0x2ae>
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8002776:	688c      	ldr	r4, [r1, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8002778:	680e      	ldr	r6, [r1, #0]
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 800277a:	f1b4 4f00 	cmp.w	r4, #2147483648	; 0x80000000
 800277e:	f000 80f7 	beq.w	8002970 <HAL_ADC_ConfigChannel+0x3a4>
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8002782:	ea4f 5cd6 	mov.w	ip, r6, lsr #23
 8002786:	f00c 0c04 	and.w	ip, ip, #4
 800278a:	f102 0714 	add.w	r7, r2, #20
  MODIFY_REG(*preg,
 800278e:	f3c6 5604 	ubfx	r6, r6, #20, #5
 8002792:	f85c 5007 	ldr.w	r5, [ip, r7]
 8002796:	f04f 0e07 	mov.w	lr, #7
 800279a:	fa0e fe06 	lsl.w	lr, lr, r6
 800279e:	40b4      	lsls	r4, r6
 80027a0:	ea25 050e 	bic.w	r5, r5, lr
 80027a4:	432c      	orrs	r4, r5
 80027a6:	f84c 4007 	str.w	r4, [ip, r7]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80027aa:	6954      	ldr	r4, [r2, #20]
 80027ac:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 80027b0:	6154      	str	r4, [r2, #20]
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80027b2:	f8d1 c010 	ldr.w	ip, [r1, #16]
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80027b6:	68d6      	ldr	r6, [r2, #12]
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80027b8:	f1bc 0f04 	cmp.w	ip, #4
 80027bc:	d02e      	beq.n	800281c <HAL_ADC_ConfigChannel+0x250>
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80027be:	f102 0460 	add.w	r4, r2, #96	; 0x60
  MODIFY_REG(*preg,
 80027c2:	f8df e1a8 	ldr.w	lr, [pc, #424]	; 800296c <HAL_ADC_ConfigChannel+0x3a0>
 80027c6:	f854 502c 	ldr.w	r5, [r4, ip, lsl #2]
 80027ca:	680f      	ldr	r7, [r1, #0]
 80027cc:	ea05 0e0e 	and.w	lr, r5, lr
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80027d0:	f3c6 06c1 	ubfx	r6, r6, #3, #2
 80027d4:	694d      	ldr	r5, [r1, #20]
 80027d6:	0076      	lsls	r6, r6, #1
 80027d8:	f007 47f8 	and.w	r7, r7, #2080374784	; 0x7c000000
 80027dc:	40b5      	lsls	r5, r6
 80027de:	ea47 070e 	orr.w	r7, r7, lr
 80027e2:	433d      	orrs	r5, r7
 80027e4:	f045 4500 	orr.w	r5, r5, #2147483648	; 0x80000000
 80027e8:	f844 502c 	str.w	r5, [r4, ip, lsl #2]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80027ec:	690f      	ldr	r7, [r1, #16]
  MODIFY_REG(*preg,
 80027ee:	698e      	ldr	r6, [r1, #24]
 80027f0:	f854 5027 	ldr.w	r5, [r4, r7, lsl #2]
 80027f4:	f025 7580 	bic.w	r5, r5, #16777216	; 0x1000000
 80027f8:	4335      	orrs	r5, r6
 80027fa:	f844 5027 	str.w	r5, [r4, r7, lsl #2]
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 80027fe:	690e      	ldr	r6, [r1, #16]
 8002800:	7f0f      	ldrb	r7, [r1, #28]
  MODIFY_REG(*preg,
 8002802:	f854 5026 	ldr.w	r5, [r4, r6, lsl #2]
 8002806:	2f01      	cmp	r7, #1
 8002808:	f025 7500 	bic.w	r5, r5, #33554432	; 0x2000000
 800280c:	bf08      	it	eq
 800280e:	f04f 7000 	moveq.w	r0, #33554432	; 0x2000000
 8002812:	4328      	orrs	r0, r5
 8002814:	f844 0026 	str.w	r0, [r4, r6, lsl #2]
 8002818:	6808      	ldr	r0, [r1, #0]
}
 800281a:	e704      	b.n	8002626 <HAL_ADC_ConfigChannel+0x5a>
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800281c:	6808      	ldr	r0, [r1, #0]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800281e:	6e14      	ldr	r4, [r2, #96]	; 0x60
 8002820:	6e14      	ldr	r4, [r2, #96]	; 0x60
 8002822:	f3c0 0512 	ubfx	r5, r0, #0, #19
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002826:	f3c4 6484 	ubfx	r4, r4, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800282a:	2d00      	cmp	r5, #0
 800282c:	f040 80b4 	bne.w	8002998 <HAL_ADC_ConfigChannel+0x3cc>
 8002830:	f3c0 6584 	ubfx	r5, r0, #26, #5
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002834:	42ac      	cmp	r4, r5
 8002836:	f000 8111 	beq.w	8002a5c <HAL_ADC_ConfigChannel+0x490>
 800283a:	6e54      	ldr	r4, [r2, #100]	; 0x64
 800283c:	6e56      	ldr	r6, [r2, #100]	; 0x64
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800283e:	f102 0460 	add.w	r4, r2, #96	; 0x60
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002842:	f3c6 6684 	ubfx	r6, r6, #26, #5
 8002846:	f102 0764 	add.w	r7, r2, #100	; 0x64
 800284a:	42ae      	cmp	r6, r5
 800284c:	f000 812b 	beq.w	8002aa6 <HAL_ADC_ConfigChannel+0x4da>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002850:	68a6      	ldr	r6, [r4, #8]
 8002852:	68a6      	ldr	r6, [r4, #8]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002854:	f104 0708 	add.w	r7, r4, #8
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002858:	f3c6 6684 	ubfx	r6, r6, #26, #5
 800285c:	42ae      	cmp	r6, r5
 800285e:	f000 8111 	beq.w	8002a84 <HAL_ADC_ConfigChannel+0x4b8>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002862:	68e6      	ldr	r6, [r4, #12]
 8002864:	68e6      	ldr	r6, [r4, #12]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002866:	340c      	adds	r4, #12
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002868:	f3c6 6684 	ubfx	r6, r6, #26, #5
 800286c:	42b5      	cmp	r5, r6
 800286e:	f47f aeda 	bne.w	8002626 <HAL_ADC_ConfigChannel+0x5a>
  MODIFY_REG(*preg,
 8002872:	6820      	ldr	r0, [r4, #0]
 8002874:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8002878:	6020      	str	r0, [r4, #0]
 800287a:	6808      	ldr	r0, [r1, #0]
}
 800287c:	e6d3      	b.n	8002626 <HAL_ADC_ConfigChannel+0x5a>
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800287e:	4930      	ldr	r1, [pc, #192]	; (8002940 <HAL_ADC_ConfigChannel+0x374>)
 8002880:	e6e2      	b.n	8002648 <HAL_ADC_ConfigChannel+0x7c>
  __HAL_LOCK(hadc);
 8002882:	2002      	movs	r0, #2
}
 8002884:	b003      	add	sp, #12
 8002886:	bdf0      	pop	{r4, r5, r6, r7, pc}
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002888:	0201      	lsls	r1, r0, #8
 800288a:	f53f af00 	bmi.w	800268e <HAL_ADC_ConfigChannel+0xc2>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800288e:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
 8002892:	d033      	beq.n	80028fc <HAL_ADC_ConfigChannel+0x330>
 8002894:	4930      	ldr	r1, [pc, #192]	; (8002958 <HAL_ADC_ConfigChannel+0x38c>)
 8002896:	428a      	cmp	r2, r1
 8002898:	f47f aef9 	bne.w	800268e <HAL_ADC_ConfigChannel+0xc2>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800289c:	4829      	ldr	r0, [pc, #164]	; (8002944 <HAL_ADC_ConfigChannel+0x378>)
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800289e:	4a2f      	ldr	r2, [pc, #188]	; (800295c <HAL_ADC_ConfigChannel+0x390>)
 80028a0:	4c2f      	ldr	r4, [pc, #188]	; (8002960 <HAL_ADC_ConfigChannel+0x394>)
 80028a2:	6812      	ldr	r2, [r2, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 80028a4:	6881      	ldr	r1, [r0, #8]
 80028a6:	0992      	lsrs	r2, r2, #6
 80028a8:	fba4 4202 	umull	r4, r2, r4, r2
 80028ac:	0992      	lsrs	r2, r2, #6
 80028ae:	3201      	adds	r2, #1
 80028b0:	f021 71e0 	bic.w	r1, r1, #29360128	; 0x1c00000
 80028b4:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80028b8:	430d      	orrs	r5, r1
 80028ba:	0092      	lsls	r2, r2, #2
 80028bc:	f445 0500 	orr.w	r5, r5, #8388608	; 0x800000
 80028c0:	6085      	str	r5, [r0, #8]
 80028c2:	9201      	str	r2, [sp, #4]
          while (wait_loop_index != 0UL)
 80028c4:	9a01      	ldr	r2, [sp, #4]
 80028c6:	2a00      	cmp	r2, #0
 80028c8:	f43f aee1 	beq.w	800268e <HAL_ADC_ConfigChannel+0xc2>
            wait_loop_index--;
 80028cc:	9a01      	ldr	r2, [sp, #4]
 80028ce:	3a01      	subs	r2, #1
 80028d0:	9201      	str	r2, [sp, #4]
          while (wait_loop_index != 0UL)
 80028d2:	9a01      	ldr	r2, [sp, #4]
 80028d4:	2a00      	cmp	r2, #0
 80028d6:	d1f9      	bne.n	80028cc <HAL_ADC_ConfigChannel+0x300>
 80028d8:	e6d9      	b.n	800268e <HAL_ADC_ConfigChannel+0xc2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80028da:	0e80      	lsrs	r0, r0, #26
 80028dc:	1c44      	adds	r4, r0, #1
 80028de:	f004 061f 	and.w	r6, r4, #31
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80028e2:	2e09      	cmp	r6, #9
 80028e4:	f200 8088 	bhi.w	80029f8 <HAL_ADC_ConfigChannel+0x42c>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80028e8:	06a5      	lsls	r5, r4, #26
 80028ea:	2401      	movs	r4, #1
 80028ec:	f005 45f8 	and.w	r5, r5, #2080374784	; 0x7c000000
 80028f0:	40b4      	lsls	r4, r6
 80028f2:	eb06 0046 	add.w	r0, r6, r6, lsl #1
 80028f6:	4325      	orrs	r5, r4
 80028f8:	0500      	lsls	r0, r0, #20
 80028fa:	e721      	b.n	8002740 <HAL_ADC_ConfigChannel+0x174>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80028fc:	4810      	ldr	r0, [pc, #64]	; (8002940 <HAL_ADC_ConfigChannel+0x374>)
 80028fe:	e7ce      	b.n	800289e <HAL_ADC_ConfigChannel+0x2d2>
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8002900:	4918      	ldr	r1, [pc, #96]	; (8002964 <HAL_ADC_ConfigChannel+0x398>)
 8002902:	428c      	cmp	r4, r1
 8002904:	f47f aec3 	bne.w	800268e <HAL_ADC_ConfigChannel+0xc2>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002908:	f410 0080 	ands.w	r0, r0, #4194304	; 0x400000
 800290c:	f47f aebf 	bne.w	800268e <HAL_ADC_ConfigChannel+0xc2>
        if (ADC_VREFINT_INSTANCE(hadc))
 8002910:	490a      	ldr	r1, [pc, #40]	; (800293c <HAL_ADC_ConfigChannel+0x370>)
 8002912:	428a      	cmp	r2, r1
 8002914:	f43f aebb 	beq.w	800268e <HAL_ADC_ConfigChannel+0xc2>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002918:	4c0a      	ldr	r4, [pc, #40]	; (8002944 <HAL_ADC_ConfigChannel+0x378>)
 800291a:	f501 7100 	add.w	r1, r1, #512	; 0x200
 800291e:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
 8002922:	bf18      	it	ne
 8002924:	4621      	movne	r1, r4
 8002926:	688a      	ldr	r2, [r1, #8]
 8002928:	f022 72e0 	bic.w	r2, r2, #29360128	; 0x1c00000
 800292c:	432a      	orrs	r2, r5
 800292e:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8002932:	608a      	str	r2, [r1, #8]
}
 8002934:	e6b1      	b.n	800269a <HAL_ADC_ConfigChannel+0xce>
 8002936:	bf00      	nop
 8002938:	80080000 	.word	0x80080000
 800293c:	50000100 	.word	0x50000100
 8002940:	50000300 	.word	0x50000300
 8002944:	50000700 	.word	0x50000700
 8002948:	c3210000 	.word	0xc3210000
 800294c:	90c00010 	.word	0x90c00010
 8002950:	c7520000 	.word	0xc7520000
 8002954:	0007ffff 	.word	0x0007ffff
 8002958:	50000600 	.word	0x50000600
 800295c:	20000408 	.word	0x20000408
 8002960:	053e2d63 	.word	0x053e2d63
 8002964:	cb840000 	.word	0xcb840000
 8002968:	407f0000 	.word	0x407f0000
 800296c:	03fff000 	.word	0x03fff000
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8002970:	0df5      	lsrs	r5, r6, #23
 8002972:	f102 0414 	add.w	r4, r2, #20
 8002976:	f005 0504 	and.w	r5, r5, #4
  MODIFY_REG(*preg,
 800297a:	f3c6 5604 	ubfx	r6, r6, #20, #5
 800297e:	592f      	ldr	r7, [r5, r4]
 8002980:	f04f 0c07 	mov.w	ip, #7
 8002984:	fa0c f606 	lsl.w	r6, ip, r6
 8002988:	ea27 0606 	bic.w	r6, r7, r6
 800298c:	512e      	str	r6, [r5, r4]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 800298e:	6954      	ldr	r4, [r2, #20]
 8002990:	f044 4400 	orr.w	r4, r4, #2147483648	; 0x80000000
 8002994:	6154      	str	r4, [r2, #20]
}
 8002996:	e70c      	b.n	80027b2 <HAL_ADC_ConfigChannel+0x1e6>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002998:	fa90 f5a0 	rbit	r5, r0
  if (value == 0U)
 800299c:	b11d      	cbz	r5, 80029a6 <HAL_ADC_ConfigChannel+0x3da>
  return __builtin_clz(value);
 800299e:	fab5 f585 	clz	r5, r5
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80029a2:	42ac      	cmp	r4, r5
 80029a4:	d05a      	beq.n	8002a5c <HAL_ADC_ConfigChannel+0x490>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80029a6:	6e54      	ldr	r4, [r2, #100]	; 0x64
 80029a8:	6e56      	ldr	r6, [r2, #100]	; 0x64
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80029aa:	f102 0460 	add.w	r4, r2, #96	; 0x60
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80029ae:	f3c6 6684 	ubfx	r6, r6, #26, #5
 80029b2:	f102 0764 	add.w	r7, r2, #100	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029b6:	fa90 f5a0 	rbit	r5, r0
  if (value == 0U)
 80029ba:	b11d      	cbz	r5, 80029c4 <HAL_ADC_ConfigChannel+0x3f8>
  return __builtin_clz(value);
 80029bc:	fab5 f585 	clz	r5, r5
 80029c0:	42ae      	cmp	r6, r5
 80029c2:	d070      	beq.n	8002aa6 <HAL_ADC_ConfigChannel+0x4da>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80029c4:	68a5      	ldr	r5, [r4, #8]
 80029c6:	68a6      	ldr	r6, [r4, #8]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80029c8:	f104 0708 	add.w	r7, r4, #8
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80029cc:	f3c6 6684 	ubfx	r6, r6, #26, #5
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029d0:	fa90 f5a0 	rbit	r5, r0
  if (value == 0U)
 80029d4:	b11d      	cbz	r5, 80029de <HAL_ADC_ConfigChannel+0x412>
  return __builtin_clz(value);
 80029d6:	fab5 f585 	clz	r5, r5
 80029da:	42ae      	cmp	r6, r5
 80029dc:	d052      	beq.n	8002a84 <HAL_ADC_ConfigChannel+0x4b8>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80029de:	68e5      	ldr	r5, [r4, #12]
 80029e0:	68e6      	ldr	r6, [r4, #12]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80029e2:	340c      	adds	r4, #12
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80029e4:	f3c6 6684 	ubfx	r6, r6, #26, #5
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029e8:	fa90 f5a0 	rbit	r5, r0
  if (value == 0U)
 80029ec:	2d00      	cmp	r5, #0
 80029ee:	f43f ae1a 	beq.w	8002626 <HAL_ADC_ConfigChannel+0x5a>
  return __builtin_clz(value);
 80029f2:	fab5 f585 	clz	r5, r5
 80029f6:	e739      	b.n	800286c <HAL_ADC_ConfigChannel+0x2a0>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80029f8:	eb06 0046 	add.w	r0, r6, r6, lsl #1
 80029fc:	06a5      	lsls	r5, r4, #26
 80029fe:	381e      	subs	r0, #30
 8002a00:	2401      	movs	r4, #1
 8002a02:	f005 45f8 	and.w	r5, r5, #2080374784	; 0x7c000000
 8002a06:	fa04 f606 	lsl.w	r6, r4, r6
 8002a0a:	0500      	lsls	r0, r0, #20
 8002a0c:	4335      	orrs	r5, r6
 8002a0e:	f040 7000 	orr.w	r0, r0, #33554432	; 0x2000000
 8002a12:	e695      	b.n	8002740 <HAL_ADC_ConfigChannel+0x174>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a14:	fa90 f5a0 	rbit	r5, r0
  if (value == 0U)
 8002a18:	2d00      	cmp	r5, #0
 8002a1a:	d064      	beq.n	8002ae6 <HAL_ADC_ConfigChannel+0x51a>
  return __builtin_clz(value);
 8002a1c:	fab5 f585 	clz	r5, r5
 8002a20:	3501      	adds	r5, #1
 8002a22:	06ad      	lsls	r5, r5, #26
 8002a24:	f005 45f8 	and.w	r5, r5, #2080374784	; 0x7c000000
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a28:	fa90 f4a0 	rbit	r4, r0
  if (value == 0U)
 8002a2c:	2c00      	cmp	r4, #0
 8002a2e:	d058      	beq.n	8002ae2 <HAL_ADC_ConfigChannel+0x516>
  return __builtin_clz(value);
 8002a30:	fab4 f484 	clz	r4, r4
 8002a34:	3401      	adds	r4, #1
 8002a36:	f004 041f 	and.w	r4, r4, #31
 8002a3a:	2601      	movs	r6, #1
 8002a3c:	fa06 f404 	lsl.w	r4, r6, r4
 8002a40:	4325      	orrs	r5, r4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a42:	fa90 f0a0 	rbit	r0, r0
  if (value == 0U)
 8002a46:	2800      	cmp	r0, #0
 8002a48:	d048      	beq.n	8002adc <HAL_ADC_ConfigChannel+0x510>
  return __builtin_clz(value);
 8002a4a:	fab0 f480 	clz	r4, r0
 8002a4e:	3401      	adds	r4, #1
 8002a50:	f004 041f 	and.w	r4, r4, #31
 8002a54:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8002a58:	0520      	lsls	r0, r4, #20
 8002a5a:	e671      	b.n	8002740 <HAL_ADC_ConfigChannel+0x174>
  MODIFY_REG(*preg,
 8002a5c:	6e10      	ldr	r0, [r2, #96]	; 0x60
 8002a5e:	4614      	mov	r4, r2
 8002a60:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8002a64:	f844 0f60 	str.w	r0, [r4, #96]!
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002a68:	6808      	ldr	r0, [r1, #0]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002a6a:	6e55      	ldr	r5, [r2, #100]	; 0x64
 8002a6c:	6e56      	ldr	r6, [r2, #100]	; 0x64
 8002a6e:	f3c0 0512 	ubfx	r5, r0, #0, #19
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002a72:	f3c6 6684 	ubfx	r6, r6, #26, #5
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002a76:	f102 0764 	add.w	r7, r2, #100	; 0x64
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002a7a:	2d00      	cmp	r5, #0
 8002a7c:	d19b      	bne.n	80029b6 <HAL_ADC_ConfigChannel+0x3ea>
 8002a7e:	f3c0 6584 	ubfx	r5, r0, #26, #5
 8002a82:	e6e2      	b.n	800284a <HAL_ADC_ConfigChannel+0x27e>
  MODIFY_REG(*preg,
 8002a84:	6838      	ldr	r0, [r7, #0]
 8002a86:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8002a8a:	6038      	str	r0, [r7, #0]
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002a8c:	6808      	ldr	r0, [r1, #0]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002a8e:	68e5      	ldr	r5, [r4, #12]
 8002a90:	68e6      	ldr	r6, [r4, #12]
 8002a92:	f3c0 0512 	ubfx	r5, r0, #0, #19
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002a96:	f3c6 6684 	ubfx	r6, r6, #26, #5
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002a9a:	340c      	adds	r4, #12
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002a9c:	2d00      	cmp	r5, #0
 8002a9e:	d1a3      	bne.n	80029e8 <HAL_ADC_ConfigChannel+0x41c>
 8002aa0:	f3c0 6584 	ubfx	r5, r0, #26, #5
 8002aa4:	e6e2      	b.n	800286c <HAL_ADC_ConfigChannel+0x2a0>
  MODIFY_REG(*preg,
 8002aa6:	6838      	ldr	r0, [r7, #0]
 8002aa8:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8002aac:	6038      	str	r0, [r7, #0]
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002aae:	6808      	ldr	r0, [r1, #0]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002ab0:	68a5      	ldr	r5, [r4, #8]
 8002ab2:	68a6      	ldr	r6, [r4, #8]
 8002ab4:	f3c0 0512 	ubfx	r5, r0, #0, #19
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002ab8:	f3c6 6684 	ubfx	r6, r6, #26, #5
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002abc:	f104 0708 	add.w	r7, r4, #8
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002ac0:	2d00      	cmp	r5, #0
 8002ac2:	d185      	bne.n	80029d0 <HAL_ADC_ConfigChannel+0x404>
 8002ac4:	f3c0 6584 	ubfx	r5, r0, #26, #5
 8002ac8:	e6c8      	b.n	800285c <HAL_ADC_ConfigChannel+0x290>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002aca:	4a08      	ldr	r2, [pc, #32]	; (8002aec <HAL_ADC_ConfigChannel+0x520>)
 8002acc:	e5d8      	b.n	8002680 <HAL_ADC_ConfigChannel+0xb4>
 8002ace:	4808      	ldr	r0, [pc, #32]	; (8002af0 <HAL_ADC_ConfigChannel+0x524>)
 8002ad0:	e636      	b.n	8002740 <HAL_ADC_ConfigChannel+0x174>
 8002ad2:	2402      	movs	r4, #2
 8002ad4:	e622      	b.n	800271c <HAL_ADC_ConfigChannel+0x150>
 8002ad6:	f04f 6580 	mov.w	r5, #67108864	; 0x4000000
 8002ada:	e612      	b.n	8002702 <HAL_ADC_ConfigChannel+0x136>
 8002adc:	f44f 1040 	mov.w	r0, #3145728	; 0x300000
 8002ae0:	e62e      	b.n	8002740 <HAL_ADC_ConfigChannel+0x174>
 8002ae2:	2402      	movs	r4, #2
 8002ae4:	e7ac      	b.n	8002a40 <HAL_ADC_ConfigChannel+0x474>
 8002ae6:	f04f 6580 	mov.w	r5, #67108864	; 0x4000000
 8002aea:	e79d      	b.n	8002a28 <HAL_ADC_ConfigChannel+0x45c>
 8002aec:	50000300 	.word	0x50000300
 8002af0:	fe500000 	.word	0xfe500000

08002af4 <ADC_ConversionStop>:
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002af4:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002af6:	689a      	ldr	r2, [r3, #8]
 8002af8:	0752      	lsls	r2, r2, #29
{
 8002afa:	b570      	push	{r4, r5, r6, lr}
 8002afc:	4604      	mov	r4, r0
 8002afe:	d525      	bpl.n	8002b4c <ADC_ConversionStop+0x58>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002b00:	689a      	ldr	r2, [r3, #8]
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 8002b02:	68da      	ldr	r2, [r3, #12]
 8002b04:	0196      	lsls	r6, r2, #6
 8002b06:	d504      	bpl.n	8002b12 <ADC_ConversionStop+0x1e>
        && (hadc->Init.ContinuousConvMode == ENABLE)
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 8002b08:	8ba0      	ldrh	r0, [r4, #28]
 8002b0a:	f240 1201 	movw	r2, #257	; 0x101
 8002b0e:	4290      	cmp	r0, r2
 8002b10:	d043      	beq.n	8002b9a <ADC_ConversionStop+0xa6>
      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8002b12:	2902      	cmp	r1, #2
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002b14:	689a      	ldr	r2, [r3, #8]
 8002b16:	d01e      	beq.n	8002b56 <ADC_ConversionStop+0x62>
 8002b18:	0752      	lsls	r2, r2, #29
 8002b1a:	d502      	bpl.n	8002b22 <ADC_ConversionStop+0x2e>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8002b1c:	689a      	ldr	r2, [r3, #8]
 8002b1e:	0796      	lsls	r6, r2, #30
 8002b20:	d563      	bpl.n	8002bea <ADC_ConversionStop+0xf6>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 8002b22:	2901      	cmp	r1, #1
 8002b24:	d053      	beq.n	8002bce <ADC_ConversionStop+0xda>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002b26:	689a      	ldr	r2, [r3, #8]
 8002b28:	0710      	lsls	r0, r2, #28
 8002b2a:	d50a      	bpl.n	8002b42 <ADC_ConversionStop+0x4e>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8002b2c:	689a      	ldr	r2, [r3, #8]
 8002b2e:	0792      	lsls	r2, r2, #30
 8002b30:	d407      	bmi.n	8002b42 <ADC_ConversionStop+0x4e>
  MODIFY_REG(ADCx->CR,
 8002b32:	689a      	ldr	r2, [r3, #8]
 8002b34:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002b38:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 8002b3c:	f042 0220 	orr.w	r2, r2, #32
 8002b40:	609a      	str	r2, [r3, #8]

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8002b42:	2903      	cmp	r1, #3
 8002b44:	bf14      	ite	ne
 8002b46:	2504      	movne	r5, #4
 8002b48:	250c      	moveq	r5, #12
 8002b4a:	e007      	b.n	8002b5c <ADC_ConversionStop+0x68>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002b4c:	689a      	ldr	r2, [r3, #8]
 8002b4e:	0716      	lsls	r6, r2, #28
 8002b50:	d4d7      	bmi.n	8002b02 <ADC_ConversionStop+0xe>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8002b52:	2000      	movs	r0, #0
}
 8002b54:	bd70      	pop	{r4, r5, r6, pc}
 8002b56:	0710      	lsls	r0, r2, #28
 8002b58:	d43b      	bmi.n	8002bd2 <ADC_ConversionStop+0xde>
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8002b5a:	2508      	movs	r5, #8
    tickstart = HAL_GetTick();
 8002b5c:	f7ff f9f4 	bl	8001f48 <HAL_GetTick>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8002b60:	6823      	ldr	r3, [r4, #0]
 8002b62:	689b      	ldr	r3, [r3, #8]
 8002b64:	421d      	tst	r5, r3
    tickstart = HAL_GetTick();
 8002b66:	4606      	mov	r6, r0
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8002b68:	d0f3      	beq.n	8002b52 <ADC_ConversionStop+0x5e>
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8002b6a:	f7ff f9ed 	bl	8001f48 <HAL_GetTick>
 8002b6e:	1b83      	subs	r3, r0, r6
 8002b70:	2b05      	cmp	r3, #5
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8002b72:	6823      	ldr	r3, [r4, #0]
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8002b74:	d902      	bls.n	8002b7c <ADC_ConversionStop+0x88>
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8002b76:	689a      	ldr	r2, [r3, #8]
 8002b78:	422a      	tst	r2, r5
 8002b7a:	d104      	bne.n	8002b86 <ADC_ConversionStop+0x92>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8002b7c:	689b      	ldr	r3, [r3, #8]
 8002b7e:	422b      	tst	r3, r5
 8002b80:	d1f3      	bne.n	8002b6a <ADC_ConversionStop+0x76>
  return HAL_OK;
 8002b82:	2000      	movs	r0, #0
 8002b84:	e7e6      	b.n	8002b54 <ADC_ConversionStop+0x60>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002b86:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8002b88:	f043 0310 	orr.w	r3, r3, #16
 8002b8c:	65e3      	str	r3, [r4, #92]	; 0x5c
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002b8e:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8002b90:	f043 0301 	orr.w	r3, r3, #1
 8002b94:	6623      	str	r3, [r4, #96]	; 0x60
          return HAL_ERROR;
 8002b96:	2001      	movs	r0, #1
}
 8002b98:	bd70      	pop	{r4, r5, r6, pc}
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8002b9a:	681a      	ldr	r2, [r3, #0]
 8002b9c:	0655      	lsls	r5, r2, #25
 8002b9e:	d406      	bmi.n	8002bae <ADC_ConversionStop+0xba>
 8002ba0:	4a16      	ldr	r2, [pc, #88]	; (8002bfc <ADC_ConversionStop+0x108>)
 8002ba2:	e001      	b.n	8002ba8 <ADC_ConversionStop+0xb4>
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8002ba4:	3a01      	subs	r2, #1
 8002ba6:	d0ee      	beq.n	8002b86 <ADC_ConversionStop+0x92>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8002ba8:	6819      	ldr	r1, [r3, #0]
 8002baa:	0648      	lsls	r0, r1, #25
 8002bac:	d5fa      	bpl.n	8002ba4 <ADC_ConversionStop+0xb0>
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8002bae:	2240      	movs	r2, #64	; 0x40
 8002bb0:	601a      	str	r2, [r3, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002bb2:	689a      	ldr	r2, [r3, #8]
 8002bb4:	0751      	lsls	r1, r2, #29
 8002bb6:	d50a      	bpl.n	8002bce <ADC_ConversionStop+0xda>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8002bb8:	689a      	ldr	r2, [r3, #8]
 8002bba:	0792      	lsls	r2, r2, #30
 8002bbc:	d407      	bmi.n	8002bce <ADC_ConversionStop+0xda>
  MODIFY_REG(ADCx->CR,
 8002bbe:	689a      	ldr	r2, [r3, #8]
 8002bc0:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002bc4:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 8002bc8:	f042 0210 	orr.w	r2, r2, #16
 8002bcc:	609a      	str	r2, [r3, #8]
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8002bce:	2504      	movs	r5, #4
 8002bd0:	e7c4      	b.n	8002b5c <ADC_ConversionStop+0x68>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8002bd2:	689a      	ldr	r2, [r3, #8]
 8002bd4:	0791      	lsls	r1, r2, #30
 8002bd6:	d4c0      	bmi.n	8002b5a <ADC_ConversionStop+0x66>
  MODIFY_REG(ADCx->CR,
 8002bd8:	689a      	ldr	r2, [r3, #8]
 8002bda:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002bde:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 8002be2:	f042 0220 	orr.w	r2, r2, #32
 8002be6:	609a      	str	r2, [r3, #8]
    switch (conversion_group_reassigned)
 8002be8:	e7b7      	b.n	8002b5a <ADC_ConversionStop+0x66>
  MODIFY_REG(ADCx->CR,
 8002bea:	689a      	ldr	r2, [r3, #8]
 8002bec:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002bf0:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 8002bf4:	f042 0210 	orr.w	r2, r2, #16
 8002bf8:	609a      	str	r2, [r3, #8]
}
 8002bfa:	e792      	b.n	8002b22 <ADC_ConversionStop+0x2e>
 8002bfc:	a3400000 	.word	0xa3400000

08002c00 <ADC_Enable>:

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002c00:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002c02:	689a      	ldr	r2, [r3, #8]
 8002c04:	07d1      	lsls	r1, r2, #31
 8002c06:	d501      	bpl.n	8002c0c <ADC_Enable+0xc>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002c08:	2000      	movs	r0, #0
}
 8002c0a:	4770      	bx	lr
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8002c0c:	6899      	ldr	r1, [r3, #8]
 8002c0e:	4a19      	ldr	r2, [pc, #100]	; (8002c74 <ADC_Enable+0x74>)
 8002c10:	4211      	tst	r1, r2
{
 8002c12:	b570      	push	{r4, r5, r6, lr}
 8002c14:	4606      	mov	r6, r0
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8002c16:	d122      	bne.n	8002c5e <ADC_Enable+0x5e>
  MODIFY_REG(ADCx->CR,
 8002c18:	689a      	ldr	r2, [r3, #8]
 8002c1a:	4d17      	ldr	r5, [pc, #92]	; (8002c78 <ADC_Enable+0x78>)
 8002c1c:	402a      	ands	r2, r5
 8002c1e:	f042 0201 	orr.w	r2, r2, #1
 8002c22:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 8002c24:	f7ff f990 	bl	8001f48 <HAL_GetTick>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002c28:	6833      	ldr	r3, [r6, #0]
 8002c2a:	681a      	ldr	r2, [r3, #0]
 8002c2c:	07d2      	lsls	r2, r2, #31
    tickstart = HAL_GetTick();
 8002c2e:	4604      	mov	r4, r0
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002c30:	d413      	bmi.n	8002c5a <ADC_Enable+0x5a>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002c32:	689a      	ldr	r2, [r3, #8]
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002c34:	07d0      	lsls	r0, r2, #31
 8002c36:	d404      	bmi.n	8002c42 <ADC_Enable+0x42>
  MODIFY_REG(ADCx->CR,
 8002c38:	689a      	ldr	r2, [r3, #8]
 8002c3a:	402a      	ands	r2, r5
 8002c3c:	f042 0201 	orr.w	r2, r2, #1
 8002c40:	609a      	str	r2, [r3, #8]
      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002c42:	f7ff f981 	bl	8001f48 <HAL_GetTick>
 8002c46:	1b03      	subs	r3, r0, r4
 8002c48:	2b02      	cmp	r3, #2
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002c4a:	6833      	ldr	r3, [r6, #0]
      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002c4c:	d902      	bls.n	8002c54 <ADC_Enable+0x54>
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002c4e:	681a      	ldr	r2, [r3, #0]
 8002c50:	07d1      	lsls	r1, r2, #31
 8002c52:	d504      	bpl.n	8002c5e <ADC_Enable+0x5e>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002c54:	681a      	ldr	r2, [r3, #0]
 8002c56:	07d2      	lsls	r2, r2, #31
 8002c58:	d5eb      	bpl.n	8002c32 <ADC_Enable+0x32>
  return HAL_OK;
 8002c5a:	2000      	movs	r0, #0
}
 8002c5c:	bd70      	pop	{r4, r5, r6, pc}
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002c5e:	6df3      	ldr	r3, [r6, #92]	; 0x5c
 8002c60:	f043 0310 	orr.w	r3, r3, #16
 8002c64:	65f3      	str	r3, [r6, #92]	; 0x5c
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002c66:	6e33      	ldr	r3, [r6, #96]	; 0x60
 8002c68:	f043 0301 	orr.w	r3, r3, #1
 8002c6c:	6633      	str	r3, [r6, #96]	; 0x60
          return HAL_ERROR;
 8002c6e:	2001      	movs	r0, #1
}
 8002c70:	bd70      	pop	{r4, r5, r6, pc}
 8002c72:	bf00      	nop
 8002c74:	8000003f 	.word	0x8000003f
 8002c78:	7fffffc0 	.word	0x7fffffc0

08002c7c <HAL_ADC_Start>:
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002c7c:	6803      	ldr	r3, [r0, #0]
 8002c7e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
{
 8002c82:	b570      	push	{r4, r5, r6, lr}
 8002c84:	4604      	mov	r4, r0
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002c86:	d04d      	beq.n	8002d24 <HAL_ADC_Start+0xa8>
 8002c88:	483a      	ldr	r0, [pc, #232]	; (8002d74 <HAL_ADC_Start+0xf8>)
 8002c8a:	4a3b      	ldr	r2, [pc, #236]	; (8002d78 <HAL_ADC_Start+0xfc>)
 8002c8c:	493b      	ldr	r1, [pc, #236]	; (8002d7c <HAL_ADC_Start+0x100>)
 8002c8e:	4283      	cmp	r3, r0
 8002c90:	bf18      	it	ne
 8002c92:	460a      	movne	r2, r1
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002c94:	6896      	ldr	r6, [r2, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002c96:	689d      	ldr	r5, [r3, #8]
 8002c98:	f015 0504 	ands.w	r5, r5, #4
 8002c9c:	d140      	bne.n	8002d20 <HAL_ADC_Start+0xa4>
    __HAL_LOCK(hadc);
 8002c9e:	f894 3058 	ldrb.w	r3, [r4, #88]	; 0x58
 8002ca2:	2b01      	cmp	r3, #1
 8002ca4:	d03c      	beq.n	8002d20 <HAL_ADC_Start+0xa4>
 8002ca6:	2301      	movs	r3, #1
 8002ca8:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
    tmp_hal_status = ADC_Enable(hadc);
 8002cac:	4620      	mov	r0, r4
 8002cae:	f7ff ffa7 	bl	8002c00 <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 8002cb2:	2800      	cmp	r0, #0
 8002cb4:	d138      	bne.n	8002d28 <HAL_ADC_Start+0xac>
      ADC_STATE_CLR_SET(hadc->State,
 8002cb6:	6de3      	ldr	r3, [r4, #92]	; 0x5c
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002cb8:	6822      	ldr	r2, [r4, #0]
 8002cba:	492e      	ldr	r1, [pc, #184]	; (8002d74 <HAL_ADC_Start+0xf8>)
      ADC_STATE_CLR_SET(hadc->State,
 8002cbc:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002cc0:	f023 0301 	bic.w	r3, r3, #1
 8002cc4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002cc8:	428a      	cmp	r2, r1
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002cca:	f006 061f 	and.w	r6, r6, #31
      ADC_STATE_CLR_SET(hadc->State,
 8002cce:	65e3      	str	r3, [r4, #92]	; 0x5c
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002cd0:	d045      	beq.n	8002d5e <HAL_ADC_Start+0xe2>
 8002cd2:	4b2b      	ldr	r3, [pc, #172]	; (8002d80 <HAL_ADC_Start+0x104>)
 8002cd4:	429a      	cmp	r2, r3
 8002cd6:	d047      	beq.n	8002d68 <HAL_ADC_Start+0xec>
 8002cd8:	4611      	mov	r1, r2
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002cda:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8002cdc:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8002ce0:	65e3      	str	r3, [r4, #92]	; 0x5c
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002ce2:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8002ce4:	f413 5380 	ands.w	r3, r3, #4096	; 0x1000
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002ce8:	bf1c      	itt	ne
 8002cea:	6e23      	ldrne	r3, [r4, #96]	; 0x60
 8002cec:	f023 0306 	bicne.w	r3, r3, #6
        ADC_CLEAR_ERRORCODE(hadc);
 8002cf0:	6623      	str	r3, [r4, #96]	; 0x60
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002cf2:	251c      	movs	r5, #28
      __HAL_UNLOCK(hadc);
 8002cf4:	2300      	movs	r3, #0
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002cf6:	428a      	cmp	r2, r1
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002cf8:	6015      	str	r5, [r2, #0]
      __HAL_UNLOCK(hadc);
 8002cfa:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002cfe:	d01c      	beq.n	8002d3a <HAL_ADC_Start+0xbe>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002d00:	2e09      	cmp	r6, #9
 8002d02:	d914      	bls.n	8002d2e <HAL_ADC_Start+0xb2>
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002d04:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8002d06:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002d0a:	65e3      	str	r3, [r4, #92]	; 0x5c
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8002d0c:	68cb      	ldr	r3, [r1, #12]
 8002d0e:	019b      	lsls	r3, r3, #6
 8002d10:	d505      	bpl.n	8002d1e <HAL_ADC_Start+0xa2>
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002d12:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8002d14:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002d18:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002d1c:	65e3      	str	r3, [r4, #92]	; 0x5c
}
 8002d1e:	bd70      	pop	{r4, r5, r6, pc}
    tmp_hal_status = HAL_BUSY;
 8002d20:	2002      	movs	r0, #2
}
 8002d22:	bd70      	pop	{r4, r5, r6, pc}
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002d24:	4a14      	ldr	r2, [pc, #80]	; (8002d78 <HAL_ADC_Start+0xfc>)
 8002d26:	e7b5      	b.n	8002c94 <HAL_ADC_Start+0x18>
      __HAL_UNLOCK(hadc);
 8002d28:	f884 5058 	strb.w	r5, [r4, #88]	; 0x58
}
 8002d2c:	bd70      	pop	{r4, r5, r6, pc}
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002d2e:	f240 2321 	movw	r3, #545	; 0x221
 8002d32:	fa23 f606 	lsr.w	r6, r3, r6
 8002d36:	07f5      	lsls	r5, r6, #31
 8002d38:	d5e4      	bpl.n	8002d04 <HAL_ADC_Start+0x88>
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8002d3a:	68d3      	ldr	r3, [r2, #12]
 8002d3c:	0199      	lsls	r1, r3, #6
 8002d3e:	d505      	bpl.n	8002d4c <HAL_ADC_Start+0xd0>
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002d40:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8002d42:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002d46:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002d4a:	65e3      	str	r3, [r4, #92]	; 0x5c
  MODIFY_REG(ADCx->CR,
 8002d4c:	6893      	ldr	r3, [r2, #8]
 8002d4e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002d52:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002d56:	f043 0304 	orr.w	r3, r3, #4
 8002d5a:	6093      	str	r3, [r2, #8]
}
 8002d5c:	bd70      	pop	{r4, r5, r6, pc}
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002d5e:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002d62:	2e00      	cmp	r6, #0
 8002d64:	d1bd      	bne.n	8002ce2 <HAL_ADC_Start+0x66>
 8002d66:	e7b8      	b.n	8002cda <HAL_ADC_Start+0x5e>
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002d68:	f501 7140 	add.w	r1, r1, #768	; 0x300
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002d6c:	2e00      	cmp	r6, #0
 8002d6e:	d1b8      	bne.n	8002ce2 <HAL_ADC_Start+0x66>
 8002d70:	e7b3      	b.n	8002cda <HAL_ADC_Start+0x5e>
 8002d72:	bf00      	nop
 8002d74:	50000100 	.word	0x50000100
 8002d78:	50000300 	.word	0x50000300
 8002d7c:	50000700 	.word	0x50000700
 8002d80:	50000500 	.word	0x50000500

08002d84 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8002d84:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8002d86:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8002d88:	689a      	ldr	r2, [r3, #8]
 8002d8a:	0795      	lsls	r5, r2, #30
 8002d8c:	d502      	bpl.n	8002d94 <ADC_Disable+0x10>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002d8e:	689b      	ldr	r3, [r3, #8]
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002d90:	2000      	movs	r0, #0
}
 8002d92:	bd38      	pop	{r3, r4, r5, pc}
 8002d94:	689a      	ldr	r2, [r3, #8]
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8002d96:	07d4      	lsls	r4, r2, #31
 8002d98:	d52c      	bpl.n	8002df4 <ADC_Disable+0x70>
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8002d9a:	689a      	ldr	r2, [r3, #8]
 8002d9c:	f002 020d 	and.w	r2, r2, #13
 8002da0:	2a01      	cmp	r2, #1
 8002da2:	4604      	mov	r4, r0
 8002da4:	d009      	beq.n	8002dba <ADC_Disable+0x36>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002da6:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8002da8:	f043 0310 	orr.w	r3, r3, #16
 8002dac:	65e3      	str	r3, [r4, #92]	; 0x5c
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002dae:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8002db0:	f043 0301 	orr.w	r3, r3, #1
 8002db4:	6623      	str	r3, [r4, #96]	; 0x60
          return HAL_ERROR;
 8002db6:	2001      	movs	r0, #1
}
 8002db8:	bd38      	pop	{r3, r4, r5, pc}
  MODIFY_REG(ADCx->CR,
 8002dba:	689a      	ldr	r2, [r3, #8]
 8002dbc:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002dc0:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8002dc4:	2103      	movs	r1, #3
 8002dc6:	f042 0202 	orr.w	r2, r2, #2
 8002dca:	609a      	str	r2, [r3, #8]
 8002dcc:	6019      	str	r1, [r3, #0]
    tickstart = HAL_GetTick();
 8002dce:	f7ff f8bb 	bl	8001f48 <HAL_GetTick>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002dd2:	6823      	ldr	r3, [r4, #0]
 8002dd4:	689b      	ldr	r3, [r3, #8]
 8002dd6:	07d9      	lsls	r1, r3, #31
    tickstart = HAL_GetTick();
 8002dd8:	4605      	mov	r5, r0
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002dda:	d50b      	bpl.n	8002df4 <ADC_Disable+0x70>
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002ddc:	f7ff f8b4 	bl	8001f48 <HAL_GetTick>
 8002de0:	1b40      	subs	r0, r0, r5
 8002de2:	2802      	cmp	r0, #2
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002de4:	6823      	ldr	r3, [r4, #0]
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002de6:	d902      	bls.n	8002dee <ADC_Disable+0x6a>
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002de8:	689a      	ldr	r2, [r3, #8]
 8002dea:	07d2      	lsls	r2, r2, #31
 8002dec:	d4db      	bmi.n	8002da6 <ADC_Disable+0x22>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002dee:	689b      	ldr	r3, [r3, #8]
 8002df0:	07db      	lsls	r3, r3, #31
 8002df2:	d4f3      	bmi.n	8002ddc <ADC_Disable+0x58>
  return HAL_OK;
 8002df4:	2000      	movs	r0, #0
}
 8002df6:	bd38      	pop	{r3, r4, r5, pc}

08002df8 <HAL_ADC_Stop>:
  __HAL_LOCK(hadc);
 8002df8:	f890 3058 	ldrb.w	r3, [r0, #88]	; 0x58
 8002dfc:	2b01      	cmp	r3, #1
 8002dfe:	d01d      	beq.n	8002e3c <HAL_ADC_Stop+0x44>
 8002e00:	2301      	movs	r3, #1
{
 8002e02:	b510      	push	{r4, lr}
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8002e04:	2103      	movs	r1, #3
  __HAL_LOCK(hadc);
 8002e06:	f880 3058 	strb.w	r3, [r0, #88]	; 0x58
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8002e0a:	4604      	mov	r4, r0
 8002e0c:	f7ff fe72 	bl	8002af4 <ADC_ConversionStop>
  if (tmp_hal_status == HAL_OK)
 8002e10:	b118      	cbz	r0, 8002e1a <HAL_ADC_Stop+0x22>
  __HAL_UNLOCK(hadc);
 8002e12:	2300      	movs	r3, #0
 8002e14:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
}
 8002e18:	bd10      	pop	{r4, pc}
    tmp_hal_status = ADC_Disable(hadc);
 8002e1a:	4620      	mov	r0, r4
 8002e1c:	f7ff ffb2 	bl	8002d84 <ADC_Disable>
    if (tmp_hal_status == HAL_OK)
 8002e20:	2800      	cmp	r0, #0
 8002e22:	d1f6      	bne.n	8002e12 <HAL_ADC_Stop+0x1a>
      ADC_STATE_CLR_SET(hadc->State,
 8002e24:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8002e26:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002e2a:	f023 0301 	bic.w	r3, r3, #1
 8002e2e:	f043 0301 	orr.w	r3, r3, #1
 8002e32:	65e3      	str	r3, [r4, #92]	; 0x5c
  __HAL_UNLOCK(hadc);
 8002e34:	2300      	movs	r3, #0
 8002e36:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
}
 8002e3a:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hadc);
 8002e3c:	2002      	movs	r0, #2
}
 8002e3e:	4770      	bx	lr

08002e40 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8002e40:	b530      	push	{r4, r5, lr}
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002e42:	f890 3058 	ldrb.w	r3, [r0, #88]	; 0x58
{
 8002e46:	b083      	sub	sp, #12
  __IO uint32_t wait_loop_index = 0UL;
 8002e48:	2200      	movs	r2, #0
  __HAL_LOCK(hadc);
 8002e4a:	2b01      	cmp	r3, #1
  __IO uint32_t wait_loop_index = 0UL;
 8002e4c:	9201      	str	r2, [sp, #4]
  __HAL_LOCK(hadc);
 8002e4e:	d03f      	beq.n	8002ed0 <HAL_ADCEx_Calibration_Start+0x90>
 8002e50:	2301      	movs	r3, #1
 8002e52:	f880 3058 	strb.w	r3, [r0, #88]	; 0x58

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8002e56:	4604      	mov	r4, r0
 8002e58:	460d      	mov	r5, r1
 8002e5a:	f7ff ff93 	bl	8002d84 <ADC_Disable>

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002e5e:	6de3      	ldr	r3, [r4, #92]	; 0x5c
  if (tmp_hal_status == HAL_OK)
 8002e60:	b9e8      	cbnz	r0, 8002e9e <HAL_ADCEx_Calibration_Start+0x5e>
    ADC_STATE_CLR_SET(hadc->State,
 8002e62:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002e66:	f023 0302 	bic.w	r3, r3, #2
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8002e6a:	6822      	ldr	r2, [r4, #0]

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
    {
      wait_loop_index++;
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8002e6c:	491a      	ldr	r1, [pc, #104]	; (8002ed8 <HAL_ADCEx_Calibration_Start+0x98>)
    ADC_STATE_CLR_SET(hadc->State,
 8002e6e:	f043 0302 	orr.w	r3, r3, #2
 8002e72:	65e3      	str	r3, [r4, #92]	; 0x5c
  MODIFY_REG(ADCx->CR,
 8002e74:	6893      	ldr	r3, [r2, #8]
 8002e76:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8002e7a:	f005 4580 	and.w	r5, r5, #1073741824	; 0x40000000
 8002e7e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002e82:	432b      	orrs	r3, r5
 8002e84:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002e88:	6093      	str	r3, [r2, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8002e8a:	6893      	ldr	r3, [r2, #8]
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	db0e      	blt.n	8002eae <HAL_ADCEx_Calibration_Start+0x6e>
        return HAL_ERROR;
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002e90:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8002e92:	f023 0303 	bic.w	r3, r3, #3
 8002e96:	f043 0301 	orr.w	r3, r3, #1
 8002e9a:	65e3      	str	r3, [r4, #92]	; 0x5c
 8002e9c:	e002      	b.n	8002ea4 <HAL_ADCEx_Calibration_Start+0x64>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002e9e:	f043 0310 	orr.w	r3, r3, #16
 8002ea2:	65e3      	str	r3, [r4, #92]	; 0x5c
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002ea4:	2300      	movs	r3, #0
 8002ea6:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
}
 8002eaa:	b003      	add	sp, #12
 8002eac:	bd30      	pop	{r4, r5, pc}
      wait_loop_index++;
 8002eae:	9b01      	ldr	r3, [sp, #4]
 8002eb0:	3301      	adds	r3, #1
 8002eb2:	9301      	str	r3, [sp, #4]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8002eb4:	9b01      	ldr	r3, [sp, #4]
 8002eb6:	428b      	cmp	r3, r1
 8002eb8:	d9e7      	bls.n	8002e8a <HAL_ADCEx_Calibration_Start+0x4a>
        ADC_STATE_CLR_SET(hadc->State,
 8002eba:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8002ebc:	f023 0312 	bic.w	r3, r3, #18
 8002ec0:	f043 0310 	orr.w	r3, r3, #16
        __HAL_UNLOCK(hadc);
 8002ec4:	2200      	movs	r2, #0
        ADC_STATE_CLR_SET(hadc->State,
 8002ec6:	65e3      	str	r3, [r4, #92]	; 0x5c
        __HAL_UNLOCK(hadc);
 8002ec8:	f884 2058 	strb.w	r2, [r4, #88]	; 0x58
        return HAL_ERROR;
 8002ecc:	2001      	movs	r0, #1
 8002ece:	e7ec      	b.n	8002eaa <HAL_ADCEx_Calibration_Start+0x6a>
  __HAL_LOCK(hadc);
 8002ed0:	2002      	movs	r0, #2
}
 8002ed2:	b003      	add	sp, #12
 8002ed4:	bd30      	pop	{r4, r5, pc}
 8002ed6:	bf00      	nop
 8002ed8:	0004de01 	.word	0x0004de01

08002edc <HAL_ADCEx_InjectedConvCpltCallback>:
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8002edc:	4770      	bx	lr
 8002ede:	bf00      	nop

08002ee0 <HAL_ADCEx_InjectedQueueOverflowCallback>:
 8002ee0:	4770      	bx	lr
 8002ee2:	bf00      	nop

08002ee4 <HAL_ADCEx_LevelOutOfWindow2Callback>:
 8002ee4:	4770      	bx	lr
 8002ee6:	bf00      	nop

08002ee8 <HAL_ADCEx_LevelOutOfWindow3Callback>:
 8002ee8:	4770      	bx	lr
 8002eea:	bf00      	nop

08002eec <HAL_ADCEx_EndOfSamplingCallback>:
 8002eec:	4770      	bx	lr
 8002eee:	bf00      	nop

08002ef0 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8002ef0:	b4f0      	push	{r4, r5, r6, r7}
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002ef2:	f890 3058 	ldrb.w	r3, [r0, #88]	; 0x58
  if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002ef6:	680e      	ldr	r6, [r1, #0]
  __HAL_LOCK(hadc);
 8002ef8:	2b01      	cmp	r3, #1
{
 8002efa:	b09c      	sub	sp, #112	; 0x70
  __HAL_LOCK(hadc);
 8002efc:	d04d      	beq.n	8002f9a <HAL_ADCEx_MultiModeConfigChannel+0xaa>

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8002efe:	6802      	ldr	r2, [r0, #0]
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 8002f00:	2400      	movs	r4, #0
  __HAL_LOCK(hadc);
 8002f02:	2301      	movs	r3, #1
  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8002f04:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 8002f08:	9418      	str	r4, [sp, #96]	; 0x60
  __HAL_LOCK(hadc);
 8002f0a:	f880 3058 	strb.w	r3, [r0, #88]	; 0x58
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 8002f0e:	9419      	str	r4, [sp, #100]	; 0x64
  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8002f10:	d00c      	beq.n	8002f2c <HAL_ADCEx_MultiModeConfigChannel+0x3c>
 8002f12:	4d4a      	ldr	r5, [pc, #296]	; (800303c <HAL_ADCEx_MultiModeConfigChannel+0x14c>)
 8002f14:	42aa      	cmp	r2, r5
 8002f16:	d03e      	beq.n	8002f96 <HAL_ADCEx_MultiModeConfigChannel+0xa6>

  if (tmphadcSlave.Instance == NULL)
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002f18:	6dc2      	ldr	r2, [r0, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002f1a:	f880 4058 	strb.w	r4, [r0, #88]	; 0x58
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002f1e:	f042 0220 	orr.w	r2, r2, #32
 8002f22:	65c2      	str	r2, [r0, #92]	; 0x5c
  /* Process unlocked */
  __HAL_UNLOCK(hadc);

  /* Return function status */
  return tmp_hal_status;
}
 8002f24:	4618      	mov	r0, r3
 8002f26:	b01c      	add	sp, #112	; 0x70
 8002f28:	bcf0      	pop	{r4, r5, r6, r7}
 8002f2a:	4770      	bx	lr
 8002f2c:	4b44      	ldr	r3, [pc, #272]	; (8003040 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002f2e:	689b      	ldr	r3, [r3, #8]
 8002f30:	075b      	lsls	r3, r3, #29
 8002f32:	d50c      	bpl.n	8002f4e <HAL_ADCEx_MultiModeConfigChannel+0x5e>
 8002f34:	6893      	ldr	r3, [r2, #8]
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002f36:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 8002f38:	f043 0320 	orr.w	r3, r3, #32
 8002f3c:	65c3      	str	r3, [r0, #92]	; 0x5c
    tmp_hal_status = HAL_ERROR;
 8002f3e:	2301      	movs	r3, #1
  __HAL_UNLOCK(hadc);
 8002f40:	2200      	movs	r2, #0
 8002f42:	f880 2058 	strb.w	r2, [r0, #88]	; 0x58
}
 8002f46:	4618      	mov	r0, r3
 8002f48:	b01c      	add	sp, #112	; 0x70
 8002f4a:	bcf0      	pop	{r4, r5, r6, r7}
 8002f4c:	4770      	bx	lr
 8002f4e:	6893      	ldr	r3, [r2, #8]
 8002f50:	075c      	lsls	r4, r3, #29
 8002f52:	d4f0      	bmi.n	8002f36 <HAL_ADCEx_MultiModeConfigChannel+0x46>
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002f54:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
 8002f58:	d024      	beq.n	8002fa4 <HAL_ADCEx_MultiModeConfigChannel+0xb4>
 8002f5a:	4b39      	ldr	r3, [pc, #228]	; (8003040 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8002f5c:	429a      	cmp	r2, r3
 8002f5e:	d021      	beq.n	8002fa4 <HAL_ADCEx_MultiModeConfigChannel+0xb4>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002f60:	2e00      	cmp	r6, #0
 8002f62:	d153      	bne.n	800300c <HAL_ADCEx_MultiModeConfigChannel+0x11c>
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8002f64:	4a37      	ldr	r2, [pc, #220]	; (8003044 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002f66:	4c35      	ldr	r4, [pc, #212]	; (800303c <HAL_ADCEx_MultiModeConfigChannel+0x14c>)
 8002f68:	6893      	ldr	r3, [r2, #8]
 8002f6a:	4d37      	ldr	r5, [pc, #220]	; (8003048 <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 8002f6c:	4937      	ldr	r1, [pc, #220]	; (800304c <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8002f6e:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8002f72:	6093      	str	r3, [r2, #8]
 8002f74:	68a4      	ldr	r4, [r4, #8]
 8002f76:	68ab      	ldr	r3, [r5, #8]
 8002f78:	6889      	ldr	r1, [r1, #8]
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002f7a:	4323      	orrs	r3, r4
 8002f7c:	430b      	orrs	r3, r1
 8002f7e:	43db      	mvns	r3, r3
 8002f80:	f003 0301 	and.w	r3, r3, #1
 8002f84:	b37b      	cbz	r3, 8002fe6 <HAL_ADCEx_MultiModeConfigChannel+0xf6>
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8002f86:	6893      	ldr	r3, [r2, #8]
 8002f88:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002f8c:	f023 030f 	bic.w	r3, r3, #15
 8002f90:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002f92:	2300      	movs	r3, #0
 8002f94:	e7d4      	b.n	8002f40 <HAL_ADCEx_MultiModeConfigChannel+0x50>
 8002f96:	4b2c      	ldr	r3, [pc, #176]	; (8003048 <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 8002f98:	e7c9      	b.n	8002f2e <HAL_ADCEx_MultiModeConfigChannel+0x3e>
  __HAL_LOCK(hadc);
 8002f9a:	2302      	movs	r3, #2
}
 8002f9c:	4618      	mov	r0, r3
 8002f9e:	b01c      	add	sp, #112	; 0x70
 8002fa0:	bcf0      	pop	{r4, r5, r6, r7}
 8002fa2:	4770      	bx	lr
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002fa4:	b30e      	cbz	r6, 8002fea <HAL_ADCEx_MultiModeConfigChannel+0xfa>
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8002fa6:	4a2a      	ldr	r2, [pc, #168]	; (8003050 <HAL_ADCEx_MultiModeConfigChannel+0x160>)
 8002fa8:	684d      	ldr	r5, [r1, #4]
 8002faa:	6893      	ldr	r3, [r2, #8]
 8002fac:	f890 4038 	ldrb.w	r4, [r0, #56]	; 0x38
 8002fb0:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8002fb4:	432b      	orrs	r3, r5
 8002fb6:	ea43 3344 	orr.w	r3, r3, r4, lsl #13
 8002fba:	6093      	str	r3, [r2, #8]
 8002fbc:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8002fc0:	4b1f      	ldr	r3, [pc, #124]	; (8003040 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8002fc2:	6894      	ldr	r4, [r2, #8]
 8002fc4:	689b      	ldr	r3, [r3, #8]
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002fc6:	4323      	orrs	r3, r4
 8002fc8:	43db      	mvns	r3, r3
 8002fca:	f502 7240 	add.w	r2, r2, #768	; 0x300
 8002fce:	f003 0301 	and.w	r3, r3, #1
 8002fd2:	b143      	cbz	r3, 8002fe6 <HAL_ADCEx_MultiModeConfigChannel+0xf6>
        MODIFY_REG(tmpADC_Common->CCR,
 8002fd4:	6894      	ldr	r4, [r2, #8]
 8002fd6:	688b      	ldr	r3, [r1, #8]
 8002fd8:	f424 6171 	bic.w	r1, r4, #3856	; 0xf10
 8002fdc:	431e      	orrs	r6, r3
 8002fde:	f021 010f 	bic.w	r1, r1, #15
 8002fe2:	430e      	orrs	r6, r1
 8002fe4:	6096      	str	r6, [r2, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002fe6:	2300      	movs	r3, #0
 8002fe8:	e7aa      	b.n	8002f40 <HAL_ADCEx_MultiModeConfigChannel+0x50>
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8002fea:	4a19      	ldr	r2, [pc, #100]	; (8003050 <HAL_ADCEx_MultiModeConfigChannel+0x160>)
 8002fec:	6893      	ldr	r3, [r2, #8]
 8002fee:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8002ff2:	6093      	str	r3, [r2, #8]
 8002ff4:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8002ff8:	4b11      	ldr	r3, [pc, #68]	; (8003040 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8002ffa:	6891      	ldr	r1, [r2, #8]
 8002ffc:	689b      	ldr	r3, [r3, #8]
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002ffe:	430b      	orrs	r3, r1
 8003000:	43db      	mvns	r3, r3
 8003002:	f502 7240 	add.w	r2, r2, #768	; 0x300
 8003006:	f003 0301 	and.w	r3, r3, #1
 800300a:	e7bb      	b.n	8002f84 <HAL_ADCEx_MultiModeConfigChannel+0x94>
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 800300c:	4a0d      	ldr	r2, [pc, #52]	; (8003044 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 800300e:	684d      	ldr	r5, [r1, #4]
 8003010:	6893      	ldr	r3, [r2, #8]
 8003012:	f890 4038 	ldrb.w	r4, [r0, #56]	; 0x38
 8003016:	4f0c      	ldr	r7, [pc, #48]	; (8003048 <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 8003018:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 800301c:	432b      	orrs	r3, r5
 800301e:	ea43 3344 	orr.w	r3, r3, r4, lsl #13
 8003022:	4d06      	ldr	r5, [pc, #24]	; (800303c <HAL_ADCEx_MultiModeConfigChannel+0x14c>)
 8003024:	6093      	str	r3, [r2, #8]
 8003026:	4c09      	ldr	r4, [pc, #36]	; (800304c <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8003028:	68ad      	ldr	r5, [r5, #8]
 800302a:	68bb      	ldr	r3, [r7, #8]
 800302c:	68a4      	ldr	r4, [r4, #8]
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800302e:	432b      	orrs	r3, r5
 8003030:	4323      	orrs	r3, r4
 8003032:	43db      	mvns	r3, r3
 8003034:	f003 0301 	and.w	r3, r3, #1
 8003038:	e7cb      	b.n	8002fd2 <HAL_ADCEx_MultiModeConfigChannel+0xe2>
 800303a:	bf00      	nop
 800303c:	50000400 	.word	0x50000400
 8003040:	50000100 	.word	0x50000100
 8003044:	50000700 	.word	0x50000700
 8003048:	50000500 	.word	0x50000500
 800304c:	50000600 	.word	0x50000600
 8003050:	50000300 	.word	0x50000300

08003054 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003054:	4908      	ldr	r1, [pc, #32]	; (8003078 <HAL_NVIC_SetPriorityGrouping+0x24>)
 8003056:	68ca      	ldr	r2, [r1, #12]
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003058:	b410      	push	{r4}
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800305a:	0200      	lsls	r0, r0, #8
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800305c:	f64f 04ff 	movw	r4, #63743	; 0xf8ff
 8003060:	4022      	ands	r2, r4
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003062:	f400 63e0 	and.w	r3, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003066:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003068:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800306c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8003070:	f85d 4b04 	ldr.w	r4, [sp], #4
  SCB->AIRCR =  reg_value;
 8003074:	60cb      	str	r3, [r1, #12]
 8003076:	4770      	bx	lr
 8003078:	e000ed00 	.word	0xe000ed00

0800307c <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800307c:	4b19      	ldr	r3, [pc, #100]	; (80030e4 <HAL_NVIC_SetPriority+0x68>)
 800307e:	68db      	ldr	r3, [r3, #12]
 8003080:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003084:	b430      	push	{r4, r5}
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003086:	f1c3 0507 	rsb	r5, r3, #7
 800308a:	2d04      	cmp	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800308c:	f103 0404 	add.w	r4, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003090:	bf28      	it	cs
 8003092:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003094:	2c06      	cmp	r4, #6
 8003096:	d919      	bls.n	80030cc <HAL_NVIC_SetPriority+0x50>
 8003098:	3b03      	subs	r3, #3
 800309a:	f04f 34ff 	mov.w	r4, #4294967295
 800309e:	409c      	lsls	r4, r3
 80030a0:	ea22 0204 	bic.w	r2, r2, r4

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80030a4:	f04f 34ff 	mov.w	r4, #4294967295
 80030a8:	40ac      	lsls	r4, r5
 80030aa:	ea21 0104 	bic.w	r1, r1, r4
 80030ae:	4099      	lsls	r1, r3
  if ((int32_t)(IRQn) >= 0)
 80030b0:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80030b2:	ea41 0102 	orr.w	r1, r1, r2
  if ((int32_t)(IRQn) >= 0)
 80030b6:	db0c      	blt.n	80030d2 <HAL_NVIC_SetPriority+0x56>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80030b8:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 80030bc:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 80030c0:	0109      	lsls	r1, r1, #4
 80030c2:	b2c9      	uxtb	r1, r1
 80030c4:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 80030c8:	bc30      	pop	{r4, r5}
 80030ca:	4770      	bx	lr
 80030cc:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80030ce:	4613      	mov	r3, r2
 80030d0:	e7e8      	b.n	80030a4 <HAL_NVIC_SetPriority+0x28>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80030d2:	4b05      	ldr	r3, [pc, #20]	; (80030e8 <HAL_NVIC_SetPriority+0x6c>)
 80030d4:	f000 000f 	and.w	r0, r0, #15
 80030d8:	0109      	lsls	r1, r1, #4
 80030da:	4403      	add	r3, r0
 80030dc:	b2c9      	uxtb	r1, r1
 80030de:	7619      	strb	r1, [r3, #24]
 80030e0:	bc30      	pop	{r4, r5}
 80030e2:	4770      	bx	lr
 80030e4:	e000ed00 	.word	0xe000ed00
 80030e8:	e000ecfc 	.word	0xe000ecfc

080030ec <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80030ec:	2800      	cmp	r0, #0
 80030ee:	db07      	blt.n	8003100 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80030f0:	4a04      	ldr	r2, [pc, #16]	; (8003104 <HAL_NVIC_EnableIRQ+0x18>)
 80030f2:	f000 011f 	and.w	r1, r0, #31
 80030f6:	2301      	movs	r3, #1
 80030f8:	0940      	lsrs	r0, r0, #5
 80030fa:	408b      	lsls	r3, r1
 80030fc:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8003100:	4770      	bx	lr
 8003102:	bf00      	nop
 8003104:	e000e100 	.word	0xe000e100

08003108 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003108:	3801      	subs	r0, #1
 800310a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800310e:	d20e      	bcs.n	800312e <HAL_SYSTICK_Config+0x26>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003110:	4b08      	ldr	r3, [pc, #32]	; (8003134 <HAL_SYSTICK_Config+0x2c>)
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003112:	b410      	push	{r4}
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003114:	4c08      	ldr	r4, [pc, #32]	; (8003138 <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003116:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003118:	20f0      	movs	r0, #240	; 0xf0
 800311a:	f884 0023 	strb.w	r0, [r4, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800311e:	2200      	movs	r2, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003120:	2107      	movs	r1, #7
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003122:	4610      	mov	r0, r2
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003124:	609a      	str	r2, [r3, #8]
   return SysTick_Config(TicksNumb);
}
 8003126:	f85d 4b04 	ldr.w	r4, [sp], #4
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800312a:	6019      	str	r1, [r3, #0]
 800312c:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 800312e:	2001      	movs	r0, #1
 8003130:	4770      	bx	lr
 8003132:	bf00      	nop
 8003134:	e000e010 	.word	0xe000e010
 8003138:	e000ed00 	.word	0xe000ed00

0800313c <HAL_DAC_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
  /* Check DAC handle */
  if (hdac == NULL)
 800313c:	b188      	cbz	r0, 8003162 <HAL_DAC_Init+0x26>
{
 800313e:	b510      	push	{r4, lr}
    return HAL_ERROR;
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8003140:	7903      	ldrb	r3, [r0, #4]
 8003142:	4604      	mov	r4, r0
 8003144:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8003148:	b13b      	cbz	r3, 800315a <HAL_DAC_Init+0x1e>

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 800314a:	2300      	movs	r3, #0
  hdac->State = HAL_DAC_STATE_BUSY;
 800314c:	2102      	movs	r1, #2

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 800314e:	2201      	movs	r2, #1
  hdac->State = HAL_DAC_STATE_BUSY;
 8003150:	7121      	strb	r1, [r4, #4]
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8003152:	6123      	str	r3, [r4, #16]
  hdac->State = HAL_DAC_STATE_READY;
 8003154:	7122      	strb	r2, [r4, #4]

  /* Return function status */
  return HAL_OK;
 8003156:	4618      	mov	r0, r3
}
 8003158:	bd10      	pop	{r4, pc}
    hdac->Lock = HAL_UNLOCKED;
 800315a:	7142      	strb	r2, [r0, #5]
    HAL_DAC_MspInit(hdac);
 800315c:	f7fe fd20 	bl	8001ba0 <HAL_DAC_MspInit>
 8003160:	e7f3      	b.n	800314a <HAL_DAC_Init+0xe>
    return HAL_ERROR;
 8003162:	2001      	movs	r0, #1
}
 8003164:	4770      	bx	lr
 8003166:	bf00      	nop

08003168 <HAL_DAC_Start>:
  *         (1) On this STM32 series, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8003168:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 800316a:	7943      	ldrb	r3, [r0, #5]
 800316c:	2b01      	cmp	r3, #1
 800316e:	d02d      	beq.n	80031cc <HAL_DAC_Start+0x64>
 8003170:	4604      	mov	r4, r0

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8003172:	2602      	movs	r6, #2

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8003174:	6822      	ldr	r2, [r4, #0]
  hdac->State = HAL_DAC_STATE_BUSY;
 8003176:	7126      	strb	r6, [r4, #4]
  __HAL_LOCK(hdac);
 8003178:	2001      	movs	r0, #1
 800317a:	7160      	strb	r0, [r4, #5]
  __HAL_DAC_ENABLE(hdac, Channel);
 800317c:	460d      	mov	r5, r1
 800317e:	f005 0710 	and.w	r7, r5, #16
 8003182:	6811      	ldr	r1, [r2, #0]
 8003184:	fa00 f307 	lsl.w	r3, r0, r7
 8003188:	430b      	orrs	r3, r1
 800318a:	6013      	str	r3, [r2, #0]
  /* Ensure minimum wait before using peripheral after enabling it */
  HAL_Delay(1);
 800318c:	f7fe fee2 	bl	8001f54 <HAL_Delay>

  if (Channel == DAC_CHANNEL_1)
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8003190:	6822      	ldr	r2, [r4, #0]
 8003192:	6813      	ldr	r3, [r2, #0]
  if (Channel == DAC_CHANNEL_1)
 8003194:	b965      	cbnz	r5, 80031b0 <HAL_DAC_Start+0x48>
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8003196:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800319a:	42b3      	cmp	r3, r6
 800319c:	d103      	bne.n	80031a6 <HAL_DAC_Start+0x3e>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 800319e:	6853      	ldr	r3, [r2, #4]
 80031a0:	f043 0301 	orr.w	r3, r3, #1
 80031a4:	6053      	str	r3, [r2, #4]
    }
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80031a6:	2301      	movs	r3, #1

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80031a8:	2000      	movs	r0, #0
  hdac->State = HAL_DAC_STATE_READY;
 80031aa:	7123      	strb	r3, [r4, #4]
  __HAL_UNLOCK(hdac);
 80031ac:	7160      	strb	r0, [r4, #5]

  /* Return function status */
  return HAL_OK;
}
 80031ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 80031b0:	40be      	lsls	r6, r7
 80031b2:	f403 1378 	and.w	r3, r3, #4063232	; 0x3e0000
 80031b6:	42b3      	cmp	r3, r6
 80031b8:	d1f5      	bne.n	80031a6 <HAL_DAC_Start+0x3e>
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 80031ba:	6853      	ldr	r3, [r2, #4]
 80031bc:	f043 0302 	orr.w	r3, r3, #2
 80031c0:	6053      	str	r3, [r2, #4]
  __HAL_UNLOCK(hdac);
 80031c2:	2000      	movs	r0, #0
  hdac->State = HAL_DAC_STATE_READY;
 80031c4:	2301      	movs	r3, #1
 80031c6:	7123      	strb	r3, [r4, #4]
  __HAL_UNLOCK(hdac);
 80031c8:	7160      	strb	r0, [r4, #5]
  return HAL_OK;
 80031ca:	e7f0      	b.n	80031ae <HAL_DAC_Start+0x46>
  __HAL_LOCK(hdac);
 80031cc:	2002      	movs	r0, #2
}
 80031ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080031d0 <HAL_DAC_DMAUnderrunCallbackCh1>:
 80031d0:	4770      	bx	lr
 80031d2:	bf00      	nop

080031d4 <HAL_DAC_IRQHandler>:
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR1))
 80031d4:	6803      	ldr	r3, [r0, #0]
 80031d6:	681a      	ldr	r2, [r3, #0]
 80031d8:	0491      	lsls	r1, r2, #18
{
 80031da:	b510      	push	{r4, lr}
 80031dc:	4604      	mov	r4, r0
  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR1))
 80031de:	d502      	bpl.n	80031e6 <HAL_DAC_IRQHandler+0x12>
  {
    /* Check underrun flag of DAC channel 1 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 80031e0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80031e2:	0492      	lsls	r2, r2, #18
 80031e4:	d418      	bmi.n	8003218 <HAL_DAC_IRQHandler+0x44>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }


  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR2))
 80031e6:	681a      	ldr	r2, [r3, #0]
 80031e8:	0091      	lsls	r1, r2, #2
 80031ea:	d502      	bpl.n	80031f2 <HAL_DAC_IRQHandler+0x1e>
  {
    /* Check underrun flag of DAC channel 2 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR2))
 80031ec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80031ee:	0092      	lsls	r2, r2, #2
 80031f0:	d400      	bmi.n	80031f4 <HAL_DAC_IRQHandler+0x20>
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }

}
 80031f2:	bd10      	pop	{r4, pc}
      hdac->State = HAL_DAC_STATE_ERROR;
 80031f4:	2204      	movs	r2, #4
 80031f6:	7122      	strb	r2, [r4, #4]
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 80031f8:	6922      	ldr	r2, [r4, #16]
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 80031fa:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 80031fe:	f042 0202 	orr.w	r2, r2, #2
 8003202:	6122      	str	r2, [r4, #16]
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 8003204:	6359      	str	r1, [r3, #52]	; 0x34
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8003206:	681a      	ldr	r2, [r3, #0]
 8003208:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 800320c:	4620      	mov	r0, r4
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 800320e:	601a      	str	r2, [r3, #0]
}
 8003210:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 8003214:	f000 b8f4 	b.w	8003400 <HAL_DACEx_DMAUnderrunCallbackCh2>
      hdac->State = HAL_DAC_STATE_ERROR;
 8003218:	2204      	movs	r2, #4
 800321a:	7102      	strb	r2, [r0, #4]
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 800321c:	6902      	ldr	r2, [r0, #16]
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 800321e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 8003222:	f042 0201 	orr.w	r2, r2, #1
 8003226:	6102      	str	r2, [r0, #16]
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 8003228:	6359      	str	r1, [r3, #52]	; 0x34
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 800322a:	681a      	ldr	r2, [r3, #0]
 800322c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003230:	601a      	str	r2, [r3, #0]
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 8003232:	f7ff ffcd 	bl	80031d0 <HAL_DAC_DMAUnderrunCallbackCh1>
 8003236:	6823      	ldr	r3, [r4, #0]
 8003238:	e7d5      	b.n	80031e6 <HAL_DAC_IRQHandler+0x12>
 800323a:	bf00      	nop

0800323c <HAL_DAC_ConfigChannel>:
  *         (1) On this STM32 series, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 800323c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_DMADoubleDataMode));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_SignedFormat));

  /* Process locked */
  __HAL_LOCK(hdac);
 8003240:	7943      	ldrb	r3, [r0, #5]
  if ((sConfig->DAC_SampleAndHold) == DAC_SAMPLEANDHOLD_ENABLE)
 8003242:	688f      	ldr	r7, [r1, #8]
  __HAL_LOCK(hdac);
 8003244:	2b01      	cmp	r3, #1
 8003246:	f000 80c5 	beq.w	80033d4 <HAL_DAC_ConfigChannel+0x198>
 800324a:	4614      	mov	r4, r2

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800324c:	2302      	movs	r3, #2
  __HAL_LOCK(hdac);
 800324e:	2201      	movs	r2, #1

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8003250:	2f04      	cmp	r7, #4
 8003252:	4606      	mov	r6, r0
 8003254:	460d      	mov	r5, r1
  __HAL_LOCK(hdac);
 8003256:	7142      	strb	r2, [r0, #5]
  hdac->State = HAL_DAC_STATE_BUSY;
 8003258:	7103      	strb	r3, [r0, #4]
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 800325a:	d077      	beq.n	800334c <HAL_DAC_ConfigChannel+0x110>
 800325c:	6803      	ldr	r3, [r0, #0]
 800325e:	f004 0410 	and.w	r4, r4, #16
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8003262:	69ea      	ldr	r2, [r5, #28]
 8003264:	2a01      	cmp	r2, #1
 8003266:	d108      	bne.n	800327a <HAL_DAC_ConfigChannel+0x3e>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8003268:	6b99      	ldr	r1, [r3, #56]	; 0x38
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800326a:	6a2a      	ldr	r2, [r5, #32]
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 800326c:	201f      	movs	r0, #31
 800326e:	40a0      	lsls	r0, r4
 8003270:	ea21 0100 	bic.w	r1, r1, r0
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003274:	40a2      	lsls	r2, r4
 8003276:	430a      	orrs	r2, r1
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8003278:	639a      	str	r2, [r3, #56]	; 0x38
  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 800327a:	69a9      	ldr	r1, [r5, #24]
  tmpreg1 = hdac->Instance->MCR;
 800327c:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 800327e:	2207      	movs	r2, #7
  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8003280:	2901      	cmp	r1, #1
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8003282:	fa02 fc04 	lsl.w	ip, r2, r4
  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8003286:	696a      	ldr	r2, [r5, #20]
 8003288:	d05e      	beq.n	8003348 <HAL_DAC_ConfigChannel+0x10c>
  {
    connectOnChip = 0x00000000UL;
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 800328a:	2902      	cmp	r1, #2
  {
    connectOnChip = DAC_MCR_MODE1_0;
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 800328c:	bf16      	itet	ne
 800328e:	fab2 f182 	clzne	r1, r2
    connectOnChip = DAC_MCR_MODE1_0;
 8003292:	2101      	moveq	r1, #1
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8003294:	0949      	lsrne	r1, r1, #5
    else
    {
      connectOnChip = 0x00000000UL;
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8003296:	4311      	orrs	r1, r2
  /* Clear DAC_MCR_DMADOUBLEx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
  /* Configure for the selected DAC channel: DMA double data mode */
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 8003298:	792a      	ldrb	r2, [r5, #4]
 800329a:	2a01      	cmp	r2, #1
  /* Clear DAC_MCR_SINFORMATx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
 800329c:	f44f 7200 	mov.w	r2, #512	; 0x200
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
 80032a0:	f44f 7880 	mov.w	r8, #256	; 0x100
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
 80032a4:	fa02 f204 	lsl.w	r2, r2, r4
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
 80032a8:	fa08 f804 	lsl.w	r8, r8, r4
 80032ac:	ea42 020c 	orr.w	r2, r2, ip
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 80032b0:	ea47 0701 	orr.w	r7, r7, r1
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
 80032b4:	ea20 0202 	bic.w	r2, r0, r2
  /* Configure for the selected DAC channel: Signed format */
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 80032b8:	7969      	ldrb	r1, [r5, #5]
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
 80032ba:	ea6f 0808 	mvn.w	r8, r8
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
 80032be:	ea08 0802 	and.w	r8, r8, r2
  /* Clear DAC_MCR_HFSEL bits */
  tmpreg1 &= ~(DAC_MCR_HFSEL);
  /* Configure for both DAC channels: high frequency mode */
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 80032c2:	682a      	ldr	r2, [r5, #0]
 80032c4:	bf08      	it	eq
 80032c6:	f447 7780 	orreq.w	r7, r7, #256	; 0x100
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 80032ca:	2901      	cmp	r1, #1
 80032cc:	bf08      	it	eq
 80032ce:	f447 7700 	orreq.w	r7, r7, #512	; 0x200
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 80032d2:	2a02      	cmp	r2, #2
  tmpreg1 &= ~(DAC_MCR_HFSEL);
 80032d4:	f428 4840 	bic.w	r8, r8, #49152	; 0xc000
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 80032d8:	d073      	beq.n	80033c2 <HAL_DAC_ConfigChannel+0x186>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
    }
  }
  else
  {
    tmpreg1 |= sConfig->DAC_HighFrequency;
 80032da:	ea48 0802 	orr.w	r8, r8, r2
  }
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80032de:	40a7      	lsls	r7, r4
 80032e0:	ea47 0708 	orr.w	r7, r7, r8
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 80032e4:	63df      	str	r7, [r3, #60]	; 0x3c
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));

  /* Set STRSTTRIGSELx and STINCTRIGSELx bits according to DAC_Trigger & DAC_Trigger2 values */
  tmpreg2 = ((sConfig->DAC_Trigger & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STRSTTRIGSEL1_Pos;
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 80032e6:	e9d5 1203 	ldrd	r1, r2, [r5, #12]
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 80032ea:	6818      	ldr	r0, [r3, #0]
 80032ec:	f44f 4580 	mov.w	r5, #16384	; 0x4000
 80032f0:	40a5      	lsls	r5, r4
 80032f2:	ea20 0005 	bic.w	r0, r0, r5
 80032f6:	6018      	str	r0, [r3, #0]
  tmpreg1 = hdac->Instance->CR;
 80032f8:	6818      	ldr	r0, [r3, #0]
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 80032fa:	f640 75fe 	movw	r5, #4094	; 0xffe
 80032fe:	40a5      	lsls	r5, r4
 8003300:	ea20 0505 	bic.w	r5, r0, r5
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003304:	fa01 f004 	lsl.w	r0, r1, r4
 8003308:	4328      	orrs	r0, r5
  hdac->Instance->CR = tmpreg1;
 800330a:	6018      	str	r0, [r3, #0]
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 800330c:	6818      	ldr	r0, [r3, #0]
 800330e:	25c0      	movs	r5, #192	; 0xc0
 8003310:	40a5      	lsls	r5, r4
 8003312:	ea20 0005 	bic.w	r0, r0, r5
 8003316:	6018      	str	r0, [r3, #0]
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 8003318:	0192      	lsls	r2, r2, #6
  /* Modify STMODR register value depending on DAC_Channel */
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1) << (Channel & 0x10UL), tmpreg2 << (Channel & 0x10UL));
 800331a:	6e18      	ldr	r0, [r3, #96]	; 0x60
  tmpreg2 = ((sConfig->DAC_Trigger & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STRSTTRIGSEL1_Pos;
 800331c:	f3c1 0183 	ubfx	r1, r1, #2, #4
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 8003320:	f402 6270 	and.w	r2, r2, #3840	; 0xf00
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1) << (Channel & 0x10UL), tmpreg2 << (Channel & 0x10UL));
 8003324:	f640 750f 	movw	r5, #3855	; 0xf0f
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 8003328:	430a      	orrs	r2, r1
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1) << (Channel & 0x10UL), tmpreg2 << (Channel & 0x10UL));
 800332a:	fa05 f104 	lsl.w	r1, r5, r4
 800332e:	fa02 f404 	lsl.w	r4, r2, r4
 8003332:	ea20 0201 	bic.w	r2, r0, r1
 8003336:	4314      	orrs	r4, r2
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8003338:	2101      	movs	r1, #1

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800333a:	2200      	movs	r2, #0
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1) << (Channel & 0x10UL), tmpreg2 << (Channel & 0x10UL));
 800333c:	661c      	str	r4, [r3, #96]	; 0x60

  /* Return function status */
  return HAL_OK;
 800333e:	4610      	mov	r0, r2
  hdac->State = HAL_DAC_STATE_READY;
 8003340:	7131      	strb	r1, [r6, #4]
  __HAL_UNLOCK(hdac);
 8003342:	7172      	strb	r2, [r6, #5]
}
 8003344:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    connectOnChip = 0x00000000UL;
 8003348:	2100      	movs	r1, #0
 800334a:	e7a4      	b.n	8003296 <HAL_DAC_ConfigChannel+0x5a>
    tickstart = HAL_GetTick();
 800334c:	f7fe fdfc 	bl	8001f48 <HAL_GetTick>
 8003350:	4607      	mov	r7, r0
    if (Channel == DAC_CHANNEL_1)
 8003352:	b12c      	cbz	r4, 8003360 <HAL_DAC_ConfigChannel+0x124>
 8003354:	e014      	b.n	8003380 <HAL_DAC_ConfigChannel+0x144>
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8003356:	f7fe fdf7 	bl	8001f48 <HAL_GetTick>
 800335a:	1bc3      	subs	r3, r0, r7
 800335c:	2b01      	cmp	r3, #1
 800335e:	d83c      	bhi.n	80033da <HAL_DAC_ConfigChannel+0x19e>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8003360:	6833      	ldr	r3, [r6, #0]
 8003362:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003364:	041b      	lsls	r3, r3, #16
 8003366:	d4f6      	bmi.n	8003356 <HAL_DAC_ConfigChannel+0x11a>
      HAL_Delay(1);
 8003368:	2001      	movs	r0, #1
 800336a:	f7fe fdf3 	bl	8001f54 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 800336e:	6833      	ldr	r3, [r6, #0]
 8003370:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 8003372:	641a      	str	r2, [r3, #64]	; 0x40
 8003374:	e00e      	b.n	8003394 <HAL_DAC_ConfigChannel+0x158>
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8003376:	f7fe fde7 	bl	8001f48 <HAL_GetTick>
 800337a:	1bc3      	subs	r3, r0, r7
 800337c:	2b01      	cmp	r3, #1
 800337e:	d82c      	bhi.n	80033da <HAL_DAC_ConfigChannel+0x19e>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8003380:	6833      	ldr	r3, [r6, #0]
 8003382:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003384:	2b00      	cmp	r3, #0
 8003386:	dbf6      	blt.n	8003376 <HAL_DAC_ConfigChannel+0x13a>
      HAL_Delay(1U);
 8003388:	2001      	movs	r0, #1
 800338a:	f7fe fde3 	bl	8001f54 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 800338e:	6833      	ldr	r3, [r6, #0]
 8003390:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 8003392:	645a      	str	r2, [r3, #68]	; 0x44
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8003394:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003396:	6aa9      	ldr	r1, [r5, #40]	; 0x28
 8003398:	68af      	ldr	r7, [r5, #8]
 800339a:	f004 0410 	and.w	r4, r4, #16
 800339e:	f240 30ff 	movw	r0, #1023	; 0x3ff
 80033a2:	40a0      	lsls	r0, r4
 80033a4:	ea22 0200 	bic.w	r2, r2, r0
 80033a8:	40a1      	lsls	r1, r4
 80033aa:	430a      	orrs	r2, r1
 80033ac:	649a      	str	r2, [r3, #72]	; 0x48
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 80033ae:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80033b0:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
 80033b2:	20ff      	movs	r0, #255	; 0xff
 80033b4:	40a0      	lsls	r0, r4
 80033b6:	ea22 0200 	bic.w	r2, r2, r0
 80033ba:	40a1      	lsls	r1, r4
 80033bc:	430a      	orrs	r2, r1
 80033be:	64da      	str	r2, [r3, #76]	; 0x4c
 80033c0:	e74f      	b.n	8003262 <HAL_DAC_ConfigChannel+0x26>
    hclkfreq = HAL_RCC_GetHCLKFreq();
 80033c2:	f000 fdaf 	bl	8003f24 <HAL_RCC_GetHCLKFreq>
    if (hclkfreq > HFSEL_ENABLE_THRESHOLD_160MHZ)
 80033c6:	4b0c      	ldr	r3, [pc, #48]	; (80033f8 <HAL_DAC_ConfigChannel+0x1bc>)
 80033c8:	4298      	cmp	r0, r3
 80033ca:	d90e      	bls.n	80033ea <HAL_DAC_ConfigChannel+0x1ae>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_160MHZ;
 80033cc:	6833      	ldr	r3, [r6, #0]
 80033ce:	f448 4800 	orr.w	r8, r8, #32768	; 0x8000
 80033d2:	e784      	b.n	80032de <HAL_DAC_ConfigChannel+0xa2>
  __HAL_LOCK(hdac);
 80033d4:	2002      	movs	r0, #2
}
 80033d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80033da:	6933      	ldr	r3, [r6, #16]
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 80033dc:	2203      	movs	r2, #3
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80033de:	f043 0308 	orr.w	r3, r3, #8
 80033e2:	6133      	str	r3, [r6, #16]
          return HAL_TIMEOUT;
 80033e4:	4610      	mov	r0, r2
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 80033e6:	7132      	strb	r2, [r6, #4]
          return HAL_TIMEOUT;
 80033e8:	e7ac      	b.n	8003344 <HAL_DAC_ConfigChannel+0x108>
    else if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 80033ea:	4b04      	ldr	r3, [pc, #16]	; (80033fc <HAL_DAC_ConfigChannel+0x1c0>)
 80033ec:	4298      	cmp	r0, r3
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 80033ee:	bf88      	it	hi
 80033f0:	f448 4880 	orrhi.w	r8, r8, #16384	; 0x4000
 80033f4:	6833      	ldr	r3, [r6, #0]
 80033f6:	e772      	b.n	80032de <HAL_DAC_ConfigChannel+0xa2>
 80033f8:	09896800 	.word	0x09896800
 80033fc:	04c4b400 	.word	0x04c4b400

08003400 <HAL_DACEx_DMAUnderrunCallbackCh2>:
 8003400:	4770      	bx	lr
 8003402:	bf00      	nop

08003404 <HAL_DMA_Abort>:
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
  HAL_StatusTypeDef status = HAL_OK;

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003404:	f890 2025 	ldrb.w	r2, [r0, #37]	; 0x25
 8003408:	2a02      	cmp	r2, #2
{
 800340a:	4603      	mov	r3, r0
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800340c:	d009      	beq.n	8003422 <HAL_DMA_Abort+0x1e>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800340e:	2204      	movs	r2, #4
 8003410:	63c2      	str	r2, [r0, #60]	; 0x3c
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003412:	2101      	movs	r1, #1

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8003414:	2200      	movs	r2, #0
    status = HAL_ERROR;
 8003416:	2001      	movs	r0, #1
  hdma->State = HAL_DMA_STATE_READY;
 8003418:	f883 1025 	strb.w	r1, [r3, #37]	; 0x25
  __HAL_UNLOCK(hdma);
 800341c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
}
 8003420:	4770      	bx	lr
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003422:	6802      	ldr	r2, [r0, #0]
{
 8003424:	b470      	push	{r4, r5, r6}
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003426:	6c84      	ldr	r4, [r0, #72]	; 0x48
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003428:	6810      	ldr	r0, [r2, #0]
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800342a:	6cde      	ldr	r6, [r3, #76]	; 0x4c
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800342c:	f020 000e 	bic.w	r0, r0, #14
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8003430:	e9d3 5110 	ldrd	r5, r1, [r3, #64]	; 0x40
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003434:	6010      	str	r0, [r2, #0]
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003436:	6820      	ldr	r0, [r4, #0]
 8003438:	f420 7080 	bic.w	r0, r0, #256	; 0x100
 800343c:	6020      	str	r0, [r4, #0]
     __HAL_DMA_DISABLE(hdma);
 800343e:	6814      	ldr	r4, [r2, #0]
     if (hdma->DMAmuxRequestGen != 0U)
 8003440:	6d58      	ldr	r0, [r3, #84]	; 0x54
     __HAL_DMA_DISABLE(hdma);
 8003442:	f024 0401 	bic.w	r4, r4, #1
 8003446:	6014      	str	r4, [r2, #0]
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8003448:	f001 011f 	and.w	r1, r1, #31
 800344c:	2201      	movs	r2, #1
 800344e:	408a      	lsls	r2, r1
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003450:	6d19      	ldr	r1, [r3, #80]	; 0x50
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8003452:	606a      	str	r2, [r5, #4]
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003454:	6071      	str	r1, [r6, #4]
     if (hdma->DMAmuxRequestGen != 0U)
 8003456:	b138      	cbz	r0, 8003468 <HAL_DMA_Abort+0x64>
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003458:	6802      	ldr	r2, [r0, #0]
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800345a:	e9d3 1416 	ldrd	r1, r4, [r3, #88]	; 0x58
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800345e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003462:	6002      	str	r2, [r0, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003464:	2000      	movs	r0, #0
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003466:	604c      	str	r4, [r1, #4]
  hdma->State = HAL_DMA_STATE_READY;
 8003468:	2101      	movs	r1, #1
  __HAL_UNLOCK(hdma);
 800346a:	2200      	movs	r2, #0
  hdma->State = HAL_DMA_STATE_READY;
 800346c:	f883 1025 	strb.w	r1, [r3, #37]	; 0x25
  __HAL_UNLOCK(hdma);
 8003470:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
}
 8003474:	bc70      	pop	{r4, r5, r6}
 8003476:	4770      	bx	lr

08003478 <HAL_DMA_Abort_IT>:
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
  HAL_StatusTypeDef status = HAL_OK;

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8003478:	f890 2025 	ldrb.w	r2, [r0, #37]	; 0x25
 800347c:	2a02      	cmp	r2, #2
{
 800347e:	4603      	mov	r3, r0
  if (HAL_DMA_STATE_BUSY != hdma->State)
 8003480:	d009      	beq.n	8003496 <HAL_DMA_Abort_IT+0x1e>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003482:	2201      	movs	r2, #1
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003484:	2004      	movs	r0, #4

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003486:	2100      	movs	r1, #0
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003488:	63d8      	str	r0, [r3, #60]	; 0x3c
    __HAL_UNLOCK(hdma);
 800348a:	f883 1024 	strb.w	r1, [r3, #36]	; 0x24

    status = HAL_ERROR;
 800348e:	4610      	mov	r0, r2
    hdma->State = HAL_DMA_STATE_READY;
 8003490:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    {
      hdma->XferAbortCallback(hdma);
    }
  }
  return status;
}
 8003494:	4770      	bx	lr
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003496:	6802      	ldr	r2, [r0, #0]
{
 8003498:	b570      	push	{r4, r5, r6, lr}
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800349a:	6c85      	ldr	r5, [r0, #72]	; 0x48
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800349c:	6810      	ldr	r0, [r2, #0]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800349e:	6cde      	ldr	r6, [r3, #76]	; 0x4c
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80034a0:	f020 000e 	bic.w	r0, r0, #14
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80034a4:	e9d3 4110 	ldrd	r4, r1, [r3, #64]	; 0x40
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80034a8:	6010      	str	r0, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 80034aa:	6810      	ldr	r0, [r2, #0]
 80034ac:	f020 0001 	bic.w	r0, r0, #1
 80034b0:	6010      	str	r0, [r2, #0]
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80034b2:	682a      	ldr	r2, [r5, #0]
    if (hdma->DMAmuxRequestGen != 0U)
 80034b4:	6d58      	ldr	r0, [r3, #84]	; 0x54
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80034b6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80034ba:	602a      	str	r2, [r5, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80034bc:	f001 011f 	and.w	r1, r1, #31
 80034c0:	2201      	movs	r2, #1
 80034c2:	408a      	lsls	r2, r1
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80034c4:	6d19      	ldr	r1, [r3, #80]	; 0x50
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80034c6:	6062      	str	r2, [r4, #4]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80034c8:	6071      	str	r1, [r6, #4]
    if (hdma->DMAmuxRequestGen != 0U)
 80034ca:	b130      	cbz	r0, 80034da <HAL_DMA_Abort_IT+0x62>
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80034cc:	6802      	ldr	r2, [r0, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80034ce:	e9d3 1416 	ldrd	r1, r4, [r3, #88]	; 0x58
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80034d2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80034d6:	6002      	str	r2, [r0, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80034d8:	604c      	str	r4, [r1, #4]
    if (hdma->XferAbortCallback != NULL)
 80034da:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    hdma->State = HAL_DMA_STATE_READY;
 80034dc:	2101      	movs	r1, #1
    __HAL_UNLOCK(hdma);
 80034de:	2400      	movs	r4, #0
    hdma->State = HAL_DMA_STATE_READY;
 80034e0:	f883 1025 	strb.w	r1, [r3, #37]	; 0x25
    __HAL_UNLOCK(hdma);
 80034e4:	f883 4024 	strb.w	r4, [r3, #36]	; 0x24
    if (hdma->XferAbortCallback != NULL)
 80034e8:	b11a      	cbz	r2, 80034f2 <HAL_DMA_Abort_IT+0x7a>
      hdma->XferAbortCallback(hdma);
 80034ea:	4618      	mov	r0, r3
 80034ec:	4790      	blx	r2
  HAL_StatusTypeDef status = HAL_OK;
 80034ee:	4620      	mov	r0, r4
}
 80034f0:	bd70      	pop	{r4, r5, r6, pc}
  HAL_StatusTypeDef status = HAL_OK;
 80034f2:	4610      	mov	r0, r2
}
 80034f4:	bd70      	pop	{r4, r5, r6, pc}
 80034f6:	bf00      	nop

080034f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80034f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80034fc:	680e      	ldr	r6, [r1, #0]
{
 80034fe:	b083      	sub	sp, #12
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003500:	2e00      	cmp	r6, #0
 8003502:	f000 808b 	beq.w	800361c <HAL_GPIO_Init+0x124>
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8003506:	f8df e1d4 	ldr.w	lr, [pc, #468]	; 80036dc <HAL_GPIO_Init+0x1e4>
  uint32_t position = 0x00U;
 800350a:	2300      	movs	r3, #0
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800350c:	2201      	movs	r2, #1
 800350e:	fa02 f403 	lsl.w	r4, r2, r3
    if (iocurrent != 0x00u)
 8003512:	ea14 0c06 	ands.w	ip, r4, r6
 8003516:	d07c      	beq.n	8003612 <HAL_GPIO_Init+0x11a>
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003518:	684d      	ldr	r5, [r1, #4]
 800351a:	f025 0a10 	bic.w	sl, r5, #16
 800351e:	f10a 32ff 	add.w	r2, sl, #4294967295
 8003522:	2a01      	cmp	r2, #1
 8003524:	ea4f 0843 	mov.w	r8, r3, lsl #1
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003528:	f04f 0203 	mov.w	r2, #3
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800352c:	d979      	bls.n	8003622 <HAL_GPIO_Init+0x12a>
      temp = GPIOx->PUPDR;
 800352e:	68c7      	ldr	r7, [r0, #12]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003530:	688c      	ldr	r4, [r1, #8]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003532:	fa02 f208 	lsl.w	r2, r2, r8
 8003536:	ea27 0702 	bic.w	r7, r7, r2
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800353a:	fa04 f408 	lsl.w	r4, r4, r8
 800353e:	433c      	orrs	r4, r7
      GPIOx->PUPDR = temp;
 8003540:	60c4      	str	r4, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003542:	43d7      	mvns	r7, r2
      temp = GPIOx->MODER;
 8003544:	6804      	ldr	r4, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003546:	f005 0203 	and.w	r2, r5, #3
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800354a:	4027      	ands	r7, r4
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800354c:	fa02 f208 	lsl.w	r2, r2, r8
 8003550:	433a      	orrs	r2, r7
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003552:	00ec      	lsls	r4, r5, #3
      GPIOx->MODER = temp;
 8003554:	6002      	str	r2, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003556:	d55c      	bpl.n	8003612 <HAL_GPIO_Init+0x11a>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003558:	4c5a      	ldr	r4, [pc, #360]	; (80036c4 <HAL_GPIO_Init+0x1cc>)
 800355a:	6e22      	ldr	r2, [r4, #96]	; 0x60
 800355c:	f042 0201 	orr.w	r2, r2, #1
 8003560:	6622      	str	r2, [r4, #96]	; 0x60
 8003562:	6e22      	ldr	r2, [r4, #96]	; 0x60
 8003564:	f023 0403 	bic.w	r4, r3, #3
 8003568:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
 800356c:	f002 0201 	and.w	r2, r2, #1
 8003570:	f504 3480 	add.w	r4, r4, #65536	; 0x10000
 8003574:	9201      	str	r2, [sp, #4]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003576:	f003 0203 	and.w	r2, r3, #3
 800357a:	ea4f 0982 	mov.w	r9, r2, lsl #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800357e:	9f01      	ldr	r7, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 8003580:	68a7      	ldr	r7, [r4, #8]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003582:	220f      	movs	r2, #15
 8003584:	fa02 f809 	lsl.w	r8, r2, r9
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003588:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800358c:	ea27 0708 	bic.w	r7, r7, r8
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003590:	d018      	beq.n	80035c4 <HAL_GPIO_Init+0xcc>
 8003592:	4a4d      	ldr	r2, [pc, #308]	; (80036c8 <HAL_GPIO_Init+0x1d0>)
 8003594:	4290      	cmp	r0, r2
 8003596:	f000 8084 	beq.w	80036a2 <HAL_GPIO_Init+0x1aa>
 800359a:	4a4c      	ldr	r2, [pc, #304]	; (80036cc <HAL_GPIO_Init+0x1d4>)
 800359c:	4290      	cmp	r0, r2
 800359e:	f000 8085 	beq.w	80036ac <HAL_GPIO_Init+0x1b4>
 80035a2:	4a4b      	ldr	r2, [pc, #300]	; (80036d0 <HAL_GPIO_Init+0x1d8>)
 80035a4:	4290      	cmp	r0, r2
 80035a6:	d076      	beq.n	8003696 <HAL_GPIO_Init+0x19e>
 80035a8:	4a4a      	ldr	r2, [pc, #296]	; (80036d4 <HAL_GPIO_Init+0x1dc>)
 80035aa:	4290      	cmp	r0, r2
 80035ac:	f000 8084 	beq.w	80036b8 <HAL_GPIO_Init+0x1c0>
 80035b0:	4a49      	ldr	r2, [pc, #292]	; (80036d8 <HAL_GPIO_Init+0x1e0>)
 80035b2:	4290      	cmp	r0, r2
 80035b4:	bf0c      	ite	eq
 80035b6:	f04f 0805 	moveq.w	r8, #5
 80035ba:	f04f 0806 	movne.w	r8, #6
 80035be:	fa08 f209 	lsl.w	r2, r8, r9
 80035c2:	4317      	orrs	r7, r2
        SYSCFG->EXTICR[position >> 2U] = temp;
 80035c4:	60a7      	str	r7, [r4, #8]
        temp = EXTI->IMR1;
 80035c6:	f8de 4000 	ldr.w	r4, [lr]
        temp &= ~(iocurrent);
 80035ca:	ea6f 070c 	mvn.w	r7, ip
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80035ce:	03ea      	lsls	r2, r5, #15
        temp &= ~(iocurrent);
 80035d0:	bf54      	ite	pl
 80035d2:	403c      	andpl	r4, r7
        {
          temp |= iocurrent;
 80035d4:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->IMR1 = temp;
 80035d8:	f8ce 4000 	str.w	r4, [lr]

        temp = EXTI->EMR1;
 80035dc:	f8de 4004 	ldr.w	r4, [lr, #4]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80035e0:	03aa      	lsls	r2, r5, #14
        temp &= ~(iocurrent);
 80035e2:	bf54      	ite	pl
 80035e4:	403c      	andpl	r4, r7
        {
          temp |= iocurrent;
 80035e6:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->EMR1 = temp;
 80035ea:	f8ce 4004 	str.w	r4, [lr, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80035ee:	f8de 4008 	ldr.w	r4, [lr, #8]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80035f2:	02ea      	lsls	r2, r5, #11
        temp &= ~(iocurrent);
 80035f4:	bf54      	ite	pl
 80035f6:	403c      	andpl	r4, r7
        {
          temp |= iocurrent;
 80035f8:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->RTSR1 = temp;
 80035fc:	f8ce 4008 	str.w	r4, [lr, #8]

        temp = EXTI->FTSR1;
 8003600:	f8de 200c 	ldr.w	r2, [lr, #12]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003604:	02ac      	lsls	r4, r5, #10
        temp &= ~(iocurrent);
 8003606:	bf54      	ite	pl
 8003608:	403a      	andpl	r2, r7
        {
          temp |= iocurrent;
 800360a:	ea4c 0202 	orrmi.w	r2, ip, r2
        }
        EXTI->FTSR1 = temp;
 800360e:	f8ce 200c 	str.w	r2, [lr, #12]
      }
    }

    position++;
 8003612:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003614:	fa36 f203 	lsrs.w	r2, r6, r3
 8003618:	f47f af78 	bne.w	800350c <HAL_GPIO_Init+0x14>
  }
}
 800361c:	b003      	add	sp, #12
 800361e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp = GPIOx->OSPEEDR;
 8003622:	6887      	ldr	r7, [r0, #8]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003624:	f8d1 9008 	ldr.w	r9, [r1, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003628:	fa02 f208 	lsl.w	r2, r2, r8
 800362c:	ea27 0b02 	bic.w	fp, r7, r2
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003630:	68cf      	ldr	r7, [r1, #12]
 8003632:	fa07 f708 	lsl.w	r7, r7, r8
 8003636:	ea47 070b 	orr.w	r7, r7, fp
        GPIOx->OSPEEDR = temp;
 800363a:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 800363c:	6847      	ldr	r7, [r0, #4]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800363e:	f3c5 1b00 	ubfx	fp, r5, #4, #1
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003642:	ea27 0704 	bic.w	r7, r7, r4
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003646:	465c      	mov	r4, fp
 8003648:	409c      	lsls	r4, r3
 800364a:	433c      	orrs	r4, r7
        GPIOx->OTYPER = temp;
 800364c:	6044      	str	r4, [r0, #4]
      temp = GPIOx->PUPDR;
 800364e:	68c4      	ldr	r4, [r0, #12]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003650:	fa09 f908 	lsl.w	r9, r9, r8
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003654:	ea24 0402 	bic.w	r4, r4, r2
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003658:	ea49 0404 	orr.w	r4, r9, r4
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800365c:	f1ba 0f02 	cmp.w	sl, #2
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003660:	ea6f 0702 	mvn.w	r7, r2
      GPIOx->PUPDR = temp;
 8003664:	60c4      	str	r4, [r0, #12]
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003666:	f47f af6d 	bne.w	8003544 <HAL_GPIO_Init+0x4c>
        temp = GPIOx->AFR[position >> 3U];
 800366a:	ea4f 09d3 	mov.w	r9, r3, lsr #3
 800366e:	eb00 0989 	add.w	r9, r0, r9, lsl #2
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003672:	f003 0207 	and.w	r2, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 8003676:	f8d9 4020 	ldr.w	r4, [r9, #32]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800367a:	0092      	lsls	r2, r2, #2
 800367c:	f04f 0a0f 	mov.w	sl, #15
 8003680:	fa0a fb02 	lsl.w	fp, sl, r2
 8003684:	ea24 0a0b 	bic.w	sl, r4, fp
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003688:	690c      	ldr	r4, [r1, #16]
 800368a:	4094      	lsls	r4, r2
 800368c:	ea44 040a 	orr.w	r4, r4, sl
        GPIOx->AFR[position >> 3U] = temp;
 8003690:	f8c9 4020 	str.w	r4, [r9, #32]
 8003694:	e756      	b.n	8003544 <HAL_GPIO_Init+0x4c>
 8003696:	f04f 0803 	mov.w	r8, #3
 800369a:	fa08 f209 	lsl.w	r2, r8, r9
 800369e:	4317      	orrs	r7, r2
 80036a0:	e790      	b.n	80035c4 <HAL_GPIO_Init+0xcc>
 80036a2:	2201      	movs	r2, #1
 80036a4:	fa02 f209 	lsl.w	r2, r2, r9
 80036a8:	4317      	orrs	r7, r2
 80036aa:	e78b      	b.n	80035c4 <HAL_GPIO_Init+0xcc>
 80036ac:	f04f 0802 	mov.w	r8, #2
 80036b0:	fa08 f209 	lsl.w	r2, r8, r9
 80036b4:	4317      	orrs	r7, r2
 80036b6:	e785      	b.n	80035c4 <HAL_GPIO_Init+0xcc>
 80036b8:	f04f 0804 	mov.w	r8, #4
 80036bc:	fa08 f209 	lsl.w	r2, r8, r9
 80036c0:	4317      	orrs	r7, r2
 80036c2:	e77f      	b.n	80035c4 <HAL_GPIO_Init+0xcc>
 80036c4:	40021000 	.word	0x40021000
 80036c8:	48000400 	.word	0x48000400
 80036cc:	48000800 	.word	0x48000800
 80036d0:	48000c00 	.word	0x48000c00
 80036d4:	48001000 	.word	0x48001000
 80036d8:	48001400 	.word	0x48001400
 80036dc:	40010400 	.word	0x40010400

080036e0 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80036e0:	b10a      	cbz	r2, 80036e6 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80036e2:	6181      	str	r1, [r0, #24]
 80036e4:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80036e6:	6281      	str	r1, [r0, #40]	; 0x28
  }
}
 80036e8:	4770      	bx	lr
 80036ea:	bf00      	nop

080036ec <HAL_PWREx_ControlVoltageScaling>:
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80036ec:	4a3b      	ldr	r2, [pc, #236]	; (80037dc <HAL_PWREx_ControlVoltageScaling+0xf0>)
{
 80036ee:	b410      	push	{r4}
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80036f0:	6813      	ldr	r3, [r2, #0]
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80036f2:	b968      	cbnz	r0, 8003710 <HAL_PWREx_ControlVoltageScaling+0x24>
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80036f4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80036f8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80036fc:	d014      	beq.n	8003728 <HAL_PWREx_ControlVoltageScaling+0x3c>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80036fe:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
 8003702:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003706:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
}
 800370a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800370e:	4770      	bx	lr
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003710:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8003714:	d02f      	beq.n	8003776 <HAL_PWREx_ControlVoltageScaling+0x8a>
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003716:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800371a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800371e:	6013      	str	r3, [r2, #0]
  return HAL_OK;
 8003720:	2000      	movs	r0, #0
}
 8003722:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003726:	4770      	bx	lr
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003728:	f8d2 1080 	ldr.w	r1, [r2, #128]	; 0x80
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800372c:	4b2c      	ldr	r3, [pc, #176]	; (80037e0 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 800372e:	482d      	ldr	r0, [pc, #180]	; (80037e4 <HAL_PWREx_ControlVoltageScaling+0xf8>)
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003730:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 8003734:	f8c2 1080 	str.w	r1, [r2, #128]	; 0x80
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003738:	6811      	ldr	r1, [r2, #0]
 800373a:	f421 61c0 	bic.w	r1, r1, #1536	; 0x600
 800373e:	f441 7100 	orr.w	r1, r1, #512	; 0x200
 8003742:	6011      	str	r1, [r2, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003744:	681c      	ldr	r4, [r3, #0]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003746:	6951      	ldr	r1, [r2, #20]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003748:	2332      	movs	r3, #50	; 0x32
 800374a:	fb03 f304 	mul.w	r3, r3, r4
 800374e:	fba0 0303 	umull	r0, r3, r0, r3
 8003752:	0c9b      	lsrs	r3, r3, #18
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003754:	0548      	lsls	r0, r1, #21
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003756:	f103 0301 	add.w	r3, r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800375a:	d506      	bpl.n	800376a <HAL_PWREx_ControlVoltageScaling+0x7e>
 800375c:	e000      	b.n	8003760 <HAL_PWREx_ControlVoltageScaling+0x74>
 800375e:	b123      	cbz	r3, 800376a <HAL_PWREx_ControlVoltageScaling+0x7e>
 8003760:	6951      	ldr	r1, [r2, #20]
 8003762:	0549      	lsls	r1, r1, #21
        wait_loop_index--;
 8003764:	f103 33ff 	add.w	r3, r3, #4294967295
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003768:	d4f9      	bmi.n	800375e <HAL_PWREx_ControlVoltageScaling+0x72>
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800376a:	4b1c      	ldr	r3, [pc, #112]	; (80037dc <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800376c:	695b      	ldr	r3, [r3, #20]
 800376e:	055c      	lsls	r4, r3, #21
 8003770:	d5d6      	bpl.n	8003720 <HAL_PWREx_ControlVoltageScaling+0x34>
        return HAL_TIMEOUT;
 8003772:	2003      	movs	r0, #3
 8003774:	e7c9      	b.n	800370a <HAL_PWREx_ControlVoltageScaling+0x1e>
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003776:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800377a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800377e:	d009      	beq.n	8003794 <HAL_PWREx_ControlVoltageScaling+0xa8>
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003780:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
}
 8003784:	f85d 4b04 	ldr.w	r4, [sp], #4
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003788:	f443 7380 	orr.w	r3, r3, #256	; 0x100
  return HAL_OK;
 800378c:	2000      	movs	r0, #0
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800378e:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
}
 8003792:	4770      	bx	lr
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003794:	f8d2 1080 	ldr.w	r1, [r2, #128]	; 0x80
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003798:	4b11      	ldr	r3, [pc, #68]	; (80037e0 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 800379a:	4812      	ldr	r0, [pc, #72]	; (80037e4 <HAL_PWREx_ControlVoltageScaling+0xf8>)
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800379c:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 80037a0:	f8c2 1080 	str.w	r1, [r2, #128]	; 0x80
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80037a4:	6811      	ldr	r1, [r2, #0]
 80037a6:	f421 61c0 	bic.w	r1, r1, #1536	; 0x600
 80037aa:	f441 7100 	orr.w	r1, r1, #512	; 0x200
 80037ae:	6011      	str	r1, [r2, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80037b0:	681c      	ldr	r4, [r3, #0]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80037b2:	6951      	ldr	r1, [r2, #20]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80037b4:	2332      	movs	r3, #50	; 0x32
 80037b6:	fb03 f304 	mul.w	r3, r3, r4
 80037ba:	fba0 0303 	umull	r0, r3, r0, r3
 80037be:	0c9b      	lsrs	r3, r3, #18
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80037c0:	0548      	lsls	r0, r1, #21
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80037c2:	f103 0301 	add.w	r3, r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80037c6:	d5d0      	bpl.n	800376a <HAL_PWREx_ControlVoltageScaling+0x7e>
 80037c8:	e001      	b.n	80037ce <HAL_PWREx_ControlVoltageScaling+0xe2>
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d0cd      	beq.n	800376a <HAL_PWREx_ControlVoltageScaling+0x7e>
 80037ce:	6951      	ldr	r1, [r2, #20]
 80037d0:	0549      	lsls	r1, r1, #21
        wait_loop_index--;
 80037d2:	f103 33ff 	add.w	r3, r3, #4294967295
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80037d6:	d5c8      	bpl.n	800376a <HAL_PWREx_ControlVoltageScaling+0x7e>
 80037d8:	e7f7      	b.n	80037ca <HAL_PWREx_ControlVoltageScaling+0xde>
 80037da:	bf00      	nop
 80037dc:	40007000 	.word	0x40007000
 80037e0:	20000408 	.word	0x20000408
 80037e4:	431bde83 	.word	0x431bde83

080037e8 <HAL_PWREx_DisableUCPDDeadBattery>:
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80037e8:	4a02      	ldr	r2, [pc, #8]	; (80037f4 <HAL_PWREx_DisableUCPDDeadBattery+0xc>)
 80037ea:	6893      	ldr	r3, [r2, #8]
 80037ec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80037f0:	6093      	str	r3, [r2, #8]
}
 80037f2:	4770      	bx	lr
 80037f4:	40007000 	.word	0x40007000

080037f8 <HAL_RCC_OscConfig>:
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80037f8:	2800      	cmp	r0, #0
 80037fa:	f000 81c3 	beq.w	8003b84 <HAL_RCC_OscConfig+0x38c>
{
 80037fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003802:	6803      	ldr	r3, [r0, #0]
 8003804:	07d9      	lsls	r1, r3, #31
{
 8003806:	b082      	sub	sp, #8
 8003808:	4604      	mov	r4, r0
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800380a:	d52d      	bpl.n	8003868 <HAL_RCC_OscConfig+0x70>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800380c:	49b5      	ldr	r1, [pc, #724]	; (8003ae4 <HAL_RCC_OscConfig+0x2ec>)
 800380e:	688a      	ldr	r2, [r1, #8]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003810:	68c9      	ldr	r1, [r1, #12]
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003812:	f002 020c 	and.w	r2, r2, #12

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8003816:	2a0c      	cmp	r2, #12
 8003818:	f000 810a 	beq.w	8003a30 <HAL_RCC_OscConfig+0x238>
 800381c:	2a08      	cmp	r2, #8
 800381e:	f000 810c 	beq.w	8003a3a <HAL_RCC_OscConfig+0x242>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003822:	6863      	ldr	r3, [r4, #4]
 8003824:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003828:	f000 8133 	beq.w	8003a92 <HAL_RCC_OscConfig+0x29a>
 800382c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003830:	f000 819b 	beq.w	8003b6a <HAL_RCC_OscConfig+0x372>
 8003834:	4dab      	ldr	r5, [pc, #684]	; (8003ae4 <HAL_RCC_OscConfig+0x2ec>)
 8003836:	682a      	ldr	r2, [r5, #0]
 8003838:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800383c:	602a      	str	r2, [r5, #0]
 800383e:	682a      	ldr	r2, [r5, #0]
 8003840:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003844:	602a      	str	r2, [r5, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003846:	2b00      	cmp	r3, #0
 8003848:	f040 8128 	bne.w	8003a9c <HAL_RCC_OscConfig+0x2a4>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800384c:	f7fe fb7c 	bl	8001f48 <HAL_GetTick>
 8003850:	4606      	mov	r6, r0

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003852:	e005      	b.n	8003860 <HAL_RCC_OscConfig+0x68>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003854:	f7fe fb78 	bl	8001f48 <HAL_GetTick>
 8003858:	1b80      	subs	r0, r0, r6
 800385a:	2864      	cmp	r0, #100	; 0x64
 800385c:	f200 813b 	bhi.w	8003ad6 <HAL_RCC_OscConfig+0x2de>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003860:	682b      	ldr	r3, [r5, #0]
 8003862:	039f      	lsls	r7, r3, #14
 8003864:	d4f6      	bmi.n	8003854 <HAL_RCC_OscConfig+0x5c>
 8003866:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003868:	079e      	lsls	r6, r3, #30
 800386a:	d528      	bpl.n	80038be <HAL_RCC_OscConfig+0xc6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800386c:	4a9d      	ldr	r2, [pc, #628]	; (8003ae4 <HAL_RCC_OscConfig+0x2ec>)
 800386e:	6893      	ldr	r3, [r2, #8]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003870:	68d2      	ldr	r2, [r2, #12]
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003872:	f003 030c 	and.w	r3, r3, #12
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8003876:	2b0c      	cmp	r3, #12
 8003878:	f000 80ec 	beq.w	8003a54 <HAL_RCC_OscConfig+0x25c>
 800387c:	2b04      	cmp	r3, #4
 800387e:	f000 80ee 	beq.w	8003a5e <HAL_RCC_OscConfig+0x266>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003882:	68e3      	ldr	r3, [r4, #12]
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003884:	4d97      	ldr	r5, [pc, #604]	; (8003ae4 <HAL_RCC_OscConfig+0x2ec>)
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003886:	2b00      	cmp	r3, #0
 8003888:	f000 8116 	beq.w	8003ab8 <HAL_RCC_OscConfig+0x2c0>
        __HAL_RCC_HSI_ENABLE();
 800388c:	682b      	ldr	r3, [r5, #0]
 800388e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003892:	602b      	str	r3, [r5, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003894:	f7fe fb58 	bl	8001f48 <HAL_GetTick>
 8003898:	4606      	mov	r6, r0

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800389a:	e005      	b.n	80038a8 <HAL_RCC_OscConfig+0xb0>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800389c:	f7fe fb54 	bl	8001f48 <HAL_GetTick>
 80038a0:	1b80      	subs	r0, r0, r6
 80038a2:	2802      	cmp	r0, #2
 80038a4:	f200 8117 	bhi.w	8003ad6 <HAL_RCC_OscConfig+0x2de>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80038a8:	682b      	ldr	r3, [r5, #0]
 80038aa:	0558      	lsls	r0, r3, #21
 80038ac:	d5f6      	bpl.n	800389c <HAL_RCC_OscConfig+0xa4>
            return HAL_TIMEOUT;
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80038ae:	686b      	ldr	r3, [r5, #4]
 80038b0:	6922      	ldr	r2, [r4, #16]
 80038b2:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80038b6:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80038ba:	606b      	str	r3, [r5, #4]
 80038bc:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80038be:	071a      	lsls	r2, r3, #28
 80038c0:	d519      	bpl.n	80038f6 <HAL_RCC_OscConfig+0xfe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80038c2:	6963      	ldr	r3, [r4, #20]
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80038c4:	4d87      	ldr	r5, [pc, #540]	; (8003ae4 <HAL_RCC_OscConfig+0x2ec>)
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	f000 809e 	beq.w	8003a08 <HAL_RCC_OscConfig+0x210>
      __HAL_RCC_LSI_ENABLE();
 80038cc:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 80038d0:	f043 0301 	orr.w	r3, r3, #1
 80038d4:	f8c5 3094 	str.w	r3, [r5, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038d8:	f7fe fb36 	bl	8001f48 <HAL_GetTick>
 80038dc:	4606      	mov	r6, r0

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80038de:	e005      	b.n	80038ec <HAL_RCC_OscConfig+0xf4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80038e0:	f7fe fb32 	bl	8001f48 <HAL_GetTick>
 80038e4:	1b80      	subs	r0, r0, r6
 80038e6:	2802      	cmp	r0, #2
 80038e8:	f200 80f5 	bhi.w	8003ad6 <HAL_RCC_OscConfig+0x2de>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80038ec:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 80038f0:	079f      	lsls	r7, r3, #30
 80038f2:	d5f5      	bpl.n	80038e0 <HAL_RCC_OscConfig+0xe8>
 80038f4:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80038f6:	0759      	lsls	r1, r3, #29
 80038f8:	d541      	bpl.n	800397e <HAL_RCC_OscConfig+0x186>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80038fa:	4b7a      	ldr	r3, [pc, #488]	; (8003ae4 <HAL_RCC_OscConfig+0x2ec>)
 80038fc:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80038fe:	00d2      	lsls	r2, r2, #3
 8003900:	f100 80ed 	bmi.w	8003ade <HAL_RCC_OscConfig+0x2e6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003904:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003906:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800390a:	659a      	str	r2, [r3, #88]	; 0x58
 800390c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800390e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003912:	9301      	str	r3, [sp, #4]
 8003914:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8003916:	2501      	movs	r5, #1
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003918:	4e73      	ldr	r6, [pc, #460]	; (8003ae8 <HAL_RCC_OscConfig+0x2f0>)
 800391a:	6833      	ldr	r3, [r6, #0]
 800391c:	05df      	lsls	r7, r3, #23
 800391e:	f140 8113 	bpl.w	8003b48 <HAL_RCC_OscConfig+0x350>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003922:	68a3      	ldr	r3, [r4, #8]
 8003924:	2b01      	cmp	r3, #1
 8003926:	f000 80e3 	beq.w	8003af0 <HAL_RCC_OscConfig+0x2f8>
 800392a:	2b05      	cmp	r3, #5
 800392c:	f000 8169 	beq.w	8003c02 <HAL_RCC_OscConfig+0x40a>
 8003930:	4e6c      	ldr	r6, [pc, #432]	; (8003ae4 <HAL_RCC_OscConfig+0x2ec>)
 8003932:	f8d6 2090 	ldr.w	r2, [r6, #144]	; 0x90
 8003936:	f022 0201 	bic.w	r2, r2, #1
 800393a:	f8c6 2090 	str.w	r2, [r6, #144]	; 0x90
 800393e:	f8d6 2090 	ldr.w	r2, [r6, #144]	; 0x90
 8003942:	f022 0204 	bic.w	r2, r2, #4
 8003946:	f8c6 2090 	str.w	r2, [r6, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800394a:	2b00      	cmp	r3, #0
 800394c:	f040 80d7 	bne.w	8003afe <HAL_RCC_OscConfig+0x306>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003950:	f7fe fafa 	bl	8001f48 <HAL_GetTick>

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003954:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8003958:	4607      	mov	r7, r0
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800395a:	e005      	b.n	8003968 <HAL_RCC_OscConfig+0x170>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800395c:	f7fe faf4 	bl	8001f48 <HAL_GetTick>
 8003960:	1bc0      	subs	r0, r0, r7
 8003962:	4540      	cmp	r0, r8
 8003964:	f200 80b7 	bhi.w	8003ad6 <HAL_RCC_OscConfig+0x2de>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003968:	f8d6 3090 	ldr.w	r3, [r6, #144]	; 0x90
 800396c:	079a      	lsls	r2, r3, #30
 800396e:	d4f5      	bmi.n	800395c <HAL_RCC_OscConfig+0x164>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003970:	b125      	cbz	r5, 800397c <HAL_RCC_OscConfig+0x184>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003972:	4a5c      	ldr	r2, [pc, #368]	; (8003ae4 <HAL_RCC_OscConfig+0x2ec>)
 8003974:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8003976:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800397a:	6593      	str	r3, [r2, #88]	; 0x58
 800397c:	6823      	ldr	r3, [r4, #0]
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800397e:	069b      	lsls	r3, r3, #26
 8003980:	d518      	bpl.n	80039b4 <HAL_RCC_OscConfig+0x1bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003982:	69a3      	ldr	r3, [r4, #24]
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003984:	4d57      	ldr	r5, [pc, #348]	; (8003ae4 <HAL_RCC_OscConfig+0x2ec>)
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003986:	2b00      	cmp	r3, #0
 8003988:	f000 80ca 	beq.w	8003b20 <HAL_RCC_OscConfig+0x328>
      __HAL_RCC_HSI48_ENABLE();
 800398c:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
 8003990:	f043 0301 	orr.w	r3, r3, #1
 8003994:	f8c5 3098 	str.w	r3, [r5, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003998:	f7fe fad6 	bl	8001f48 <HAL_GetTick>
 800399c:	4606      	mov	r6, r0

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800399e:	e005      	b.n	80039ac <HAL_RCC_OscConfig+0x1b4>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80039a0:	f7fe fad2 	bl	8001f48 <HAL_GetTick>
 80039a4:	1b80      	subs	r0, r0, r6
 80039a6:	2802      	cmp	r0, #2
 80039a8:	f200 8095 	bhi.w	8003ad6 <HAL_RCC_OscConfig+0x2de>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80039ac:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
 80039b0:	079f      	lsls	r7, r3, #30
 80039b2:	d5f5      	bpl.n	80039a0 <HAL_RCC_OscConfig+0x1a8>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80039b4:	69e0      	ldr	r0, [r4, #28]
 80039b6:	b318      	cbz	r0, 8003a00 <HAL_RCC_OscConfig+0x208>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80039b8:	4d4a      	ldr	r5, [pc, #296]	; (8003ae4 <HAL_RCC_OscConfig+0x2ec>)
 80039ba:	68ab      	ldr	r3, [r5, #8]
 80039bc:	f003 030c 	and.w	r3, r3, #12
 80039c0:	2b0c      	cmp	r3, #12
 80039c2:	f000 812c 	beq.w	8003c1e <HAL_RCC_OscConfig+0x426>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80039c6:	682b      	ldr	r3, [r5, #0]
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80039c8:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 80039ca:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80039ce:	602b      	str	r3, [r5, #0]
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80039d0:	f000 80da 	beq.w	8003b88 <HAL_RCC_OscConfig+0x390>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80039d4:	68eb      	ldr	r3, [r5, #12]
 80039d6:	f023 0303 	bic.w	r3, r3, #3
 80039da:	60eb      	str	r3, [r5, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80039dc:	68eb      	ldr	r3, [r5, #12]
 80039de:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80039e2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80039e6:	60eb      	str	r3, [r5, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039e8:	f7fe faae 	bl	8001f48 <HAL_GetTick>
 80039ec:	4604      	mov	r4, r0

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80039ee:	e004      	b.n	80039fa <HAL_RCC_OscConfig+0x202>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80039f0:	f7fe faaa 	bl	8001f48 <HAL_GetTick>
 80039f4:	1b00      	subs	r0, r0, r4
 80039f6:	2802      	cmp	r0, #2
 80039f8:	d86d      	bhi.n	8003ad6 <HAL_RCC_OscConfig+0x2de>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80039fa:	682b      	ldr	r3, [r5, #0]
 80039fc:	019b      	lsls	r3, r3, #6
 80039fe:	d4f7      	bmi.n	80039f0 <HAL_RCC_OscConfig+0x1f8>
      }
    }
  }
  }

  return HAL_OK;
 8003a00:	2000      	movs	r0, #0
}
 8003a02:	b002      	add	sp, #8
 8003a04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_LSI_DISABLE();
 8003a08:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 8003a0c:	f023 0301 	bic.w	r3, r3, #1
 8003a10:	f8c5 3094 	str.w	r3, [r5, #148]	; 0x94
      tickstart = HAL_GetTick();
 8003a14:	f7fe fa98 	bl	8001f48 <HAL_GetTick>
 8003a18:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003a1a:	e004      	b.n	8003a26 <HAL_RCC_OscConfig+0x22e>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003a1c:	f7fe fa94 	bl	8001f48 <HAL_GetTick>
 8003a20:	1b80      	subs	r0, r0, r6
 8003a22:	2802      	cmp	r0, #2
 8003a24:	d857      	bhi.n	8003ad6 <HAL_RCC_OscConfig+0x2de>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003a26:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 8003a2a:	0798      	lsls	r0, r3, #30
 8003a2c:	d4f6      	bmi.n	8003a1c <HAL_RCC_OscConfig+0x224>
 8003a2e:	e761      	b.n	80038f4 <HAL_RCC_OscConfig+0xfc>
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003a30:	f001 0103 	and.w	r1, r1, #3
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8003a34:	2903      	cmp	r1, #3
 8003a36:	f47f aef4 	bne.w	8003822 <HAL_RCC_OscConfig+0x2a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a3a:	4a2a      	ldr	r2, [pc, #168]	; (8003ae4 <HAL_RCC_OscConfig+0x2ec>)
 8003a3c:	6812      	ldr	r2, [r2, #0]
 8003a3e:	0392      	lsls	r2, r2, #14
 8003a40:	f57f af12 	bpl.w	8003868 <HAL_RCC_OscConfig+0x70>
 8003a44:	6862      	ldr	r2, [r4, #4]
 8003a46:	2a00      	cmp	r2, #0
 8003a48:	f47f af0e 	bne.w	8003868 <HAL_RCC_OscConfig+0x70>
        return HAL_ERROR;
 8003a4c:	2001      	movs	r0, #1
}
 8003a4e:	b002      	add	sp, #8
 8003a50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003a54:	f002 0203 	and.w	r2, r2, #3
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8003a58:	2a02      	cmp	r2, #2
 8003a5a:	f47f af12 	bne.w	8003882 <HAL_RCC_OscConfig+0x8a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003a5e:	4b21      	ldr	r3, [pc, #132]	; (8003ae4 <HAL_RCC_OscConfig+0x2ec>)
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	055d      	lsls	r5, r3, #21
 8003a64:	d502      	bpl.n	8003a6c <HAL_RCC_OscConfig+0x274>
 8003a66:	68e3      	ldr	r3, [r4, #12]
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d0ef      	beq.n	8003a4c <HAL_RCC_OscConfig+0x254>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a6c:	4a1d      	ldr	r2, [pc, #116]	; (8003ae4 <HAL_RCC_OscConfig+0x2ec>)
 8003a6e:	6920      	ldr	r0, [r4, #16]
 8003a70:	6853      	ldr	r3, [r2, #4]
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003a72:	491e      	ldr	r1, [pc, #120]	; (8003aec <HAL_RCC_OscConfig+0x2f4>)
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a74:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8003a78:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 8003a7c:	6053      	str	r3, [r2, #4]
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003a7e:	6808      	ldr	r0, [r1, #0]
 8003a80:	f7fe fa20 	bl	8001ec4 <HAL_InitTick>
 8003a84:	2800      	cmp	r0, #0
 8003a86:	d1e1      	bne.n	8003a4c <HAL_RCC_OscConfig+0x254>
 8003a88:	6823      	ldr	r3, [r4, #0]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003a8a:	071a      	lsls	r2, r3, #28
 8003a8c:	f57f af33 	bpl.w	80038f6 <HAL_RCC_OscConfig+0xfe>
 8003a90:	e717      	b.n	80038c2 <HAL_RCC_OscConfig+0xca>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003a92:	4a14      	ldr	r2, [pc, #80]	; (8003ae4 <HAL_RCC_OscConfig+0x2ec>)
 8003a94:	6813      	ldr	r3, [r2, #0]
 8003a96:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a9a:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8003a9c:	f7fe fa54 	bl	8001f48 <HAL_GetTick>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003aa0:	4e10      	ldr	r6, [pc, #64]	; (8003ae4 <HAL_RCC_OscConfig+0x2ec>)
        tickstart = HAL_GetTick();
 8003aa2:	4605      	mov	r5, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003aa4:	e004      	b.n	8003ab0 <HAL_RCC_OscConfig+0x2b8>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003aa6:	f7fe fa4f 	bl	8001f48 <HAL_GetTick>
 8003aaa:	1b40      	subs	r0, r0, r5
 8003aac:	2864      	cmp	r0, #100	; 0x64
 8003aae:	d812      	bhi.n	8003ad6 <HAL_RCC_OscConfig+0x2de>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003ab0:	6833      	ldr	r3, [r6, #0]
 8003ab2:	039b      	lsls	r3, r3, #14
 8003ab4:	d5f7      	bpl.n	8003aa6 <HAL_RCC_OscConfig+0x2ae>
 8003ab6:	e6d6      	b.n	8003866 <HAL_RCC_OscConfig+0x6e>
        __HAL_RCC_HSI_DISABLE();
 8003ab8:	682b      	ldr	r3, [r5, #0]
 8003aba:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003abe:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8003ac0:	f7fe fa42 	bl	8001f48 <HAL_GetTick>
 8003ac4:	4606      	mov	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003ac6:	682b      	ldr	r3, [r5, #0]
 8003ac8:	0559      	lsls	r1, r3, #21
 8003aca:	d5dd      	bpl.n	8003a88 <HAL_RCC_OscConfig+0x290>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003acc:	f7fe fa3c 	bl	8001f48 <HAL_GetTick>
 8003ad0:	1b80      	subs	r0, r0, r6
 8003ad2:	2802      	cmp	r0, #2
 8003ad4:	d9f7      	bls.n	8003ac6 <HAL_RCC_OscConfig+0x2ce>
            return HAL_TIMEOUT;
 8003ad6:	2003      	movs	r0, #3
}
 8003ad8:	b002      	add	sp, #8
 8003ada:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    FlagStatus       pwrclkchanged = RESET;
 8003ade:	2500      	movs	r5, #0
 8003ae0:	e71a      	b.n	8003918 <HAL_RCC_OscConfig+0x120>
 8003ae2:	bf00      	nop
 8003ae4:	40021000 	.word	0x40021000
 8003ae8:	40007000 	.word	0x40007000
 8003aec:	20000410 	.word	0x20000410
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003af0:	4a65      	ldr	r2, [pc, #404]	; (8003c88 <HAL_RCC_OscConfig+0x490>)
 8003af2:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8003af6:	f043 0301 	orr.w	r3, r3, #1
 8003afa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      tickstart = HAL_GetTick();
 8003afe:	f7fe fa23 	bl	8001f48 <HAL_GetTick>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003b02:	4f61      	ldr	r7, [pc, #388]	; (8003c88 <HAL_RCC_OscConfig+0x490>)
      tickstart = HAL_GetTick();
 8003b04:	4606      	mov	r6, r0
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b06:	f241 3888 	movw	r8, #5000	; 0x1388
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003b0a:	e004      	b.n	8003b16 <HAL_RCC_OscConfig+0x31e>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b0c:	f7fe fa1c 	bl	8001f48 <HAL_GetTick>
 8003b10:	1b80      	subs	r0, r0, r6
 8003b12:	4540      	cmp	r0, r8
 8003b14:	d8df      	bhi.n	8003ad6 <HAL_RCC_OscConfig+0x2de>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003b16:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003b1a:	0799      	lsls	r1, r3, #30
 8003b1c:	d5f6      	bpl.n	8003b0c <HAL_RCC_OscConfig+0x314>
 8003b1e:	e727      	b.n	8003970 <HAL_RCC_OscConfig+0x178>
      __HAL_RCC_HSI48_DISABLE();
 8003b20:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
 8003b24:	f023 0301 	bic.w	r3, r3, #1
 8003b28:	f8c5 3098 	str.w	r3, [r5, #152]	; 0x98
      tickstart = HAL_GetTick();
 8003b2c:	f7fe fa0c 	bl	8001f48 <HAL_GetTick>
 8003b30:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003b32:	e004      	b.n	8003b3e <HAL_RCC_OscConfig+0x346>
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003b34:	f7fe fa08 	bl	8001f48 <HAL_GetTick>
 8003b38:	1b80      	subs	r0, r0, r6
 8003b3a:	2802      	cmp	r0, #2
 8003b3c:	d8cb      	bhi.n	8003ad6 <HAL_RCC_OscConfig+0x2de>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003b3e:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
 8003b42:	0798      	lsls	r0, r3, #30
 8003b44:	d4f6      	bmi.n	8003b34 <HAL_RCC_OscConfig+0x33c>
 8003b46:	e735      	b.n	80039b4 <HAL_RCC_OscConfig+0x1bc>
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003b48:	6833      	ldr	r3, [r6, #0]
 8003b4a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b4e:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8003b50:	f7fe f9fa 	bl	8001f48 <HAL_GetTick>
 8003b54:	4607      	mov	r7, r0
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003b56:	6833      	ldr	r3, [r6, #0]
 8003b58:	05d8      	lsls	r0, r3, #23
 8003b5a:	f53f aee2 	bmi.w	8003922 <HAL_RCC_OscConfig+0x12a>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b5e:	f7fe f9f3 	bl	8001f48 <HAL_GetTick>
 8003b62:	1bc0      	subs	r0, r0, r7
 8003b64:	2802      	cmp	r0, #2
 8003b66:	d9f6      	bls.n	8003b56 <HAL_RCC_OscConfig+0x35e>
 8003b68:	e7b5      	b.n	8003ad6 <HAL_RCC_OscConfig+0x2de>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003b6a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003b6e:	f5a3 333c 	sub.w	r3, r3, #192512	; 0x2f000
 8003b72:	681a      	ldr	r2, [r3, #0]
 8003b74:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8003b78:	601a      	str	r2, [r3, #0]
 8003b7a:	681a      	ldr	r2, [r3, #0]
 8003b7c:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8003b80:	601a      	str	r2, [r3, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003b82:	e78b      	b.n	8003a9c <HAL_RCC_OscConfig+0x2a4>
    return HAL_ERROR;
 8003b84:	2001      	movs	r0, #1
}
 8003b86:	4770      	bx	lr
        tickstart = HAL_GetTick();
 8003b88:	f7fe f9de 	bl	8001f48 <HAL_GetTick>
 8003b8c:	4606      	mov	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003b8e:	e004      	b.n	8003b9a <HAL_RCC_OscConfig+0x3a2>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b90:	f7fe f9da 	bl	8001f48 <HAL_GetTick>
 8003b94:	1b80      	subs	r0, r0, r6
 8003b96:	2802      	cmp	r0, #2
 8003b98:	d89d      	bhi.n	8003ad6 <HAL_RCC_OscConfig+0x2de>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003b9a:	682b      	ldr	r3, [r5, #0]
 8003b9c:	0199      	lsls	r1, r3, #6
 8003b9e:	d4f7      	bmi.n	8003b90 <HAL_RCC_OscConfig+0x398>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003ba0:	68e9      	ldr	r1, [r5, #12]
 8003ba2:	4b3a      	ldr	r3, [pc, #232]	; (8003c8c <HAL_RCC_OscConfig+0x494>)
 8003ba4:	6a22      	ldr	r2, [r4, #32]
 8003ba6:	6aa7      	ldr	r7, [r4, #40]	; 0x28
 8003ba8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003baa:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8003bac:	400b      	ands	r3, r1
 8003bae:	4313      	orrs	r3, r2
 8003bb0:	e9d4 120c 	ldrd	r1, r2, [r4, #48]	; 0x30
 8003bb4:	ea43 2307 	orr.w	r3, r3, r7, lsl #8
 8003bb8:	ea43 63c6 	orr.w	r3, r3, r6, lsl #27
 8003bbc:	3801      	subs	r0, #1
 8003bbe:	0849      	lsrs	r1, r1, #1
 8003bc0:	ea43 1300 	orr.w	r3, r3, r0, lsl #4
 8003bc4:	3901      	subs	r1, #1
 8003bc6:	0852      	lsrs	r2, r2, #1
 8003bc8:	ea43 5341 	orr.w	r3, r3, r1, lsl #21
 8003bcc:	3a01      	subs	r2, #1
 8003bce:	ea43 6342 	orr.w	r3, r3, r2, lsl #25
 8003bd2:	60eb      	str	r3, [r5, #12]
        __HAL_RCC_PLL_ENABLE();
 8003bd4:	682b      	ldr	r3, [r5, #0]
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003bd6:	4e2c      	ldr	r6, [pc, #176]	; (8003c88 <HAL_RCC_OscConfig+0x490>)
        __HAL_RCC_PLL_ENABLE();
 8003bd8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003bdc:	602b      	str	r3, [r5, #0]
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003bde:	68eb      	ldr	r3, [r5, #12]
 8003be0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003be4:	60eb      	str	r3, [r5, #12]
        tickstart = HAL_GetTick();
 8003be6:	f7fe f9af 	bl	8001f48 <HAL_GetTick>
 8003bea:	4604      	mov	r4, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003bec:	e005      	b.n	8003bfa <HAL_RCC_OscConfig+0x402>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003bee:	f7fe f9ab 	bl	8001f48 <HAL_GetTick>
 8003bf2:	1b00      	subs	r0, r0, r4
 8003bf4:	2802      	cmp	r0, #2
 8003bf6:	f63f af6e 	bhi.w	8003ad6 <HAL_RCC_OscConfig+0x2de>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003bfa:	6833      	ldr	r3, [r6, #0]
 8003bfc:	019a      	lsls	r2, r3, #6
 8003bfe:	d5f6      	bpl.n	8003bee <HAL_RCC_OscConfig+0x3f6>
 8003c00:	e6fe      	b.n	8003a00 <HAL_RCC_OscConfig+0x208>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003c02:	4b21      	ldr	r3, [pc, #132]	; (8003c88 <HAL_RCC_OscConfig+0x490>)
 8003c04:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8003c08:	f042 0204 	orr.w	r2, r2, #4
 8003c0c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 8003c10:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8003c14:	f042 0201 	orr.w	r2, r2, #1
 8003c18:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003c1c:	e76f      	b.n	8003afe <HAL_RCC_OscConfig+0x306>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003c1e:	2801      	cmp	r0, #1
 8003c20:	f43f aeef 	beq.w	8003a02 <HAL_RCC_OscConfig+0x20a>
      temp_pllckcfg = RCC->PLLCFGR;
 8003c24:	68eb      	ldr	r3, [r5, #12]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c26:	6a22      	ldr	r2, [r4, #32]
 8003c28:	f003 0103 	and.w	r1, r3, #3
 8003c2c:	4291      	cmp	r1, r2
 8003c2e:	f47f af0d 	bne.w	8003a4c <HAL_RCC_OscConfig+0x254>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003c32:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8003c34:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003c38:	3901      	subs	r1, #1
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c3a:	ebb2 1f01 	cmp.w	r2, r1, lsl #4
 8003c3e:	f47f af05 	bne.w	8003a4c <HAL_RCC_OscConfig+0x254>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003c42:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8003c44:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003c48:	ebb2 2f01 	cmp.w	r2, r1, lsl #8
 8003c4c:	f47f aefe 	bne.w	8003a4c <HAL_RCC_OscConfig+0x254>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003c50:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8003c52:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003c56:	ebb2 6fc1 	cmp.w	r2, r1, lsl #27
 8003c5a:	f47f aef7 	bne.w	8003a4c <HAL_RCC_OscConfig+0x254>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003c5e:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8003c60:	0852      	lsrs	r2, r2, #1
 8003c62:	3a01      	subs	r2, #1
 8003c64:	f403 01c0 	and.w	r1, r3, #6291456	; 0x600000
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003c68:	ebb1 5f42 	cmp.w	r1, r2, lsl #21
 8003c6c:	f47f aeee 	bne.w	8003a4c <HAL_RCC_OscConfig+0x254>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003c70:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8003c72:	0852      	lsrs	r2, r2, #1
 8003c74:	3a01      	subs	r2, #1
 8003c76:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003c7a:	ebb3 6f42 	cmp.w	r3, r2, lsl #25
        return HAL_ERROR;
 8003c7e:	bf14      	ite	ne
 8003c80:	2001      	movne	r0, #1
 8003c82:	2000      	moveq	r0, #0
 8003c84:	e6bd      	b.n	8003a02 <HAL_RCC_OscConfig+0x20a>
 8003c86:	bf00      	nop
 8003c88:	40021000 	.word	0x40021000
 8003c8c:	019f800c 	.word	0x019f800c

08003c90 <HAL_RCC_GetSysClockFreq>:
uint32_t HAL_RCC_GetSysClockFreq(void)
{
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8003c90:	4b18      	ldr	r3, [pc, #96]	; (8003cf4 <HAL_RCC_GetSysClockFreq+0x64>)
 8003c92:	689a      	ldr	r2, [r3, #8]
 8003c94:	f002 020c 	and.w	r2, r2, #12
 8003c98:	2a04      	cmp	r2, #4
 8003c9a:	d027      	beq.n	8003cec <HAL_RCC_GetSysClockFreq+0x5c>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8003c9c:	689a      	ldr	r2, [r3, #8]
 8003c9e:	f002 020c 	and.w	r2, r2, #12
 8003ca2:	2a08      	cmp	r2, #8
 8003ca4:	d024      	beq.n	8003cf0 <HAL_RCC_GetSysClockFreq+0x60>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8003ca6:	689a      	ldr	r2, [r3, #8]
 8003ca8:	f002 020c 	and.w	r2, r2, #12
 8003cac:	2a0c      	cmp	r2, #12
 8003cae:	d001      	beq.n	8003cb4 <HAL_RCC_GetSysClockFreq+0x24>
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
    sysclockfreq = pllvco/pllr;
  }
  else
  {
    sysclockfreq = 0U;
 8003cb0:	2000      	movs	r0, #0
  }

  return sysclockfreq;
}
 8003cb2:	4770      	bx	lr
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003cb4:	68d9      	ldr	r1, [r3, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003cb6:	68d8      	ldr	r0, [r3, #12]
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003cb8:	68db      	ldr	r3, [r3, #12]
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003cba:	f001 0103 	and.w	r1, r1, #3
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003cbe:	f3c0 1003 	ubfx	r0, r0, #4, #4
    switch (pllsource)
 8003cc2:	2903      	cmp	r1, #3
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003cc4:	f3c3 2306 	ubfx	r3, r3, #8, #7
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003cc8:	f100 0201 	add.w	r2, r0, #1
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003ccc:	bf0c      	ite	eq
 8003cce:	480a      	ldreq	r0, [pc, #40]	; (8003cf8 <HAL_RCC_GetSysClockFreq+0x68>)
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003cd0:	480a      	ldrne	r0, [pc, #40]	; (8003cfc <HAL_RCC_GetSysClockFreq+0x6c>)
 8003cd2:	fbb0 f0f2 	udiv	r0, r0, r2
 8003cd6:	fb00 f003 	mul.w	r0, r0, r3
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003cda:	4b06      	ldr	r3, [pc, #24]	; (8003cf4 <HAL_RCC_GetSysClockFreq+0x64>)
 8003cdc:	68db      	ldr	r3, [r3, #12]
 8003cde:	f3c3 6341 	ubfx	r3, r3, #25, #2
 8003ce2:	3301      	adds	r3, #1
 8003ce4:	005b      	lsls	r3, r3, #1
    sysclockfreq = pllvco/pllr;
 8003ce6:	fbb0 f0f3 	udiv	r0, r0, r3
  return sysclockfreq;
 8003cea:	4770      	bx	lr
    sysclockfreq = HSI_VALUE;
 8003cec:	4803      	ldr	r0, [pc, #12]	; (8003cfc <HAL_RCC_GetSysClockFreq+0x6c>)
 8003cee:	4770      	bx	lr
    sysclockfreq = HSE_VALUE;
 8003cf0:	4801      	ldr	r0, [pc, #4]	; (8003cf8 <HAL_RCC_GetSysClockFreq+0x68>)
 8003cf2:	4770      	bx	lr
 8003cf4:	40021000 	.word	0x40021000
 8003cf8:	007a1200 	.word	0x007a1200
 8003cfc:	00f42400 	.word	0x00f42400

08003d00 <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 8003d00:	2800      	cmp	r0, #0
 8003d02:	f000 80ef 	beq.w	8003ee4 <HAL_RCC_ClockConfig+0x1e4>
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003d06:	4a7f      	ldr	r2, [pc, #508]	; (8003f04 <HAL_RCC_ClockConfig+0x204>)
{
 8003d08:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003d0c:	6813      	ldr	r3, [r2, #0]
 8003d0e:	f003 030f 	and.w	r3, r3, #15
 8003d12:	428b      	cmp	r3, r1
 8003d14:	460d      	mov	r5, r1
 8003d16:	4604      	mov	r4, r0
 8003d18:	d20c      	bcs.n	8003d34 <HAL_RCC_ClockConfig+0x34>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d1a:	6813      	ldr	r3, [r2, #0]
 8003d1c:	f023 030f 	bic.w	r3, r3, #15
 8003d20:	430b      	orrs	r3, r1
 8003d22:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d24:	6813      	ldr	r3, [r2, #0]
 8003d26:	f003 030f 	and.w	r3, r3, #15
 8003d2a:	428b      	cmp	r3, r1
 8003d2c:	d002      	beq.n	8003d34 <HAL_RCC_ClockConfig+0x34>
    return HAL_ERROR;
 8003d2e:	2001      	movs	r0, #1
}
 8003d30:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003d34:	6823      	ldr	r3, [r4, #0]
 8003d36:	07de      	lsls	r6, r3, #31
 8003d38:	d563      	bpl.n	8003e02 <HAL_RCC_ClockConfig+0x102>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003d3a:	6862      	ldr	r2, [r4, #4]
 8003d3c:	2a03      	cmp	r2, #3
 8003d3e:	f000 809a 	beq.w	8003e76 <HAL_RCC_ClockConfig+0x176>
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003d42:	4b71      	ldr	r3, [pc, #452]	; (8003f08 <HAL_RCC_ClockConfig+0x208>)
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003d44:	2a02      	cmp	r2, #2
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003d46:	681b      	ldr	r3, [r3, #0]
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003d48:	f000 8091 	beq.w	8003e6e <HAL_RCC_ClockConfig+0x16e>
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003d4c:	055b      	lsls	r3, r3, #21
 8003d4e:	d5ee      	bpl.n	8003d2e <HAL_RCC_ClockConfig+0x2e>
      pllfreq = HAL_RCC_GetSysClockFreq();
 8003d50:	f7ff ff9e 	bl	8003c90 <HAL_RCC_GetSysClockFreq>
      if(pllfreq > 80000000U)
 8003d54:	4b6d      	ldr	r3, [pc, #436]	; (8003f0c <HAL_RCC_ClockConfig+0x20c>)
 8003d56:	4298      	cmp	r0, r3
 8003d58:	f200 80c6 	bhi.w	8003ee8 <HAL_RCC_ClockConfig+0x1e8>
 8003d5c:	6862      	ldr	r2, [r4, #4]
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8003d5e:	f04f 0900 	mov.w	r9, #0
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003d62:	4e69      	ldr	r6, [pc, #420]	; (8003f08 <HAL_RCC_ClockConfig+0x208>)
 8003d64:	68b3      	ldr	r3, [r6, #8]
 8003d66:	f023 0303 	bic.w	r3, r3, #3
 8003d6a:	431a      	orrs	r2, r3
 8003d6c:	60b2      	str	r2, [r6, #8]
    tickstart = HAL_GetTick();
 8003d6e:	f7fe f8eb 	bl	8001f48 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003d72:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8003d76:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d78:	e004      	b.n	8003d84 <HAL_RCC_ClockConfig+0x84>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003d7a:	f7fe f8e5 	bl	8001f48 <HAL_GetTick>
 8003d7e:	1bc0      	subs	r0, r0, r7
 8003d80:	4540      	cmp	r0, r8
 8003d82:	d871      	bhi.n	8003e68 <HAL_RCC_ClockConfig+0x168>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d84:	68b3      	ldr	r3, [r6, #8]
 8003d86:	6862      	ldr	r2, [r4, #4]
 8003d88:	f003 030c 	and.w	r3, r3, #12
 8003d8c:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8003d90:	d1f3      	bne.n	8003d7a <HAL_RCC_ClockConfig+0x7a>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003d92:	6823      	ldr	r3, [r4, #0]
 8003d94:	079f      	lsls	r7, r3, #30
 8003d96:	d436      	bmi.n	8003e06 <HAL_RCC_ClockConfig+0x106>
    if(hpre == RCC_SYSCLK_DIV2)
 8003d98:	f1b9 0f80 	cmp.w	r9, #128	; 0x80
 8003d9c:	d103      	bne.n	8003da6 <HAL_RCC_ClockConfig+0xa6>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8003d9e:	68b3      	ldr	r3, [r6, #8]
 8003da0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003da4:	60b3      	str	r3, [r6, #8]
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003da6:	4e57      	ldr	r6, [pc, #348]	; (8003f04 <HAL_RCC_ClockConfig+0x204>)
 8003da8:	6833      	ldr	r3, [r6, #0]
 8003daa:	f003 030f 	and.w	r3, r3, #15
 8003dae:	42ab      	cmp	r3, r5
 8003db0:	d846      	bhi.n	8003e40 <HAL_RCC_ClockConfig+0x140>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003db2:	6823      	ldr	r3, [r4, #0]
 8003db4:	075a      	lsls	r2, r3, #29
 8003db6:	d506      	bpl.n	8003dc6 <HAL_RCC_ClockConfig+0xc6>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003db8:	4953      	ldr	r1, [pc, #332]	; (8003f08 <HAL_RCC_ClockConfig+0x208>)
 8003dba:	68e0      	ldr	r0, [r4, #12]
 8003dbc:	688a      	ldr	r2, [r1, #8]
 8003dbe:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003dc2:	4302      	orrs	r2, r0
 8003dc4:	608a      	str	r2, [r1, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003dc6:	071b      	lsls	r3, r3, #28
 8003dc8:	d507      	bpl.n	8003dda <HAL_RCC_ClockConfig+0xda>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003dca:	4a4f      	ldr	r2, [pc, #316]	; (8003f08 <HAL_RCC_ClockConfig+0x208>)
 8003dcc:	6921      	ldr	r1, [r4, #16]
 8003dce:	6893      	ldr	r3, [r2, #8]
 8003dd0:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8003dd4:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8003dd8:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003dda:	f7ff ff59 	bl	8003c90 <HAL_RCC_GetSysClockFreq>
 8003dde:	4a4a      	ldr	r2, [pc, #296]	; (8003f08 <HAL_RCC_ClockConfig+0x208>)
 8003de0:	4c4b      	ldr	r4, [pc, #300]	; (8003f10 <HAL_RCC_ClockConfig+0x210>)
 8003de2:	6892      	ldr	r2, [r2, #8]
 8003de4:	494b      	ldr	r1, [pc, #300]	; (8003f14 <HAL_RCC_ClockConfig+0x214>)
 8003de6:	f3c2 1203 	ubfx	r2, r2, #4, #4
 8003dea:	4603      	mov	r3, r0
 8003dec:	5ca2      	ldrb	r2, [r4, r2]
  return HAL_InitTick(uwTickPrio);
 8003dee:	484a      	ldr	r0, [pc, #296]	; (8003f18 <HAL_RCC_ClockConfig+0x218>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003df0:	f002 021f 	and.w	r2, r2, #31
 8003df4:	40d3      	lsrs	r3, r2
 8003df6:	600b      	str	r3, [r1, #0]
  return HAL_InitTick(uwTickPrio);
 8003df8:	6800      	ldr	r0, [r0, #0]
}
 8003dfa:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  return HAL_InitTick(uwTickPrio);
 8003dfe:	f7fe b861 	b.w	8001ec4 <HAL_InitTick>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003e02:	0798      	lsls	r0, r3, #30
 8003e04:	d5cf      	bpl.n	8003da6 <HAL_RCC_ClockConfig+0xa6>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e06:	0758      	lsls	r0, r3, #29
 8003e08:	d504      	bpl.n	8003e14 <HAL_RCC_ClockConfig+0x114>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003e0a:	493f      	ldr	r1, [pc, #252]	; (8003f08 <HAL_RCC_ClockConfig+0x208>)
 8003e0c:	688a      	ldr	r2, [r1, #8]
 8003e0e:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 8003e12:	608a      	str	r2, [r1, #8]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e14:	0719      	lsls	r1, r3, #28
 8003e16:	d506      	bpl.n	8003e26 <HAL_RCC_ClockConfig+0x126>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8003e18:	4a3b      	ldr	r2, [pc, #236]	; (8003f08 <HAL_RCC_ClockConfig+0x208>)
 8003e1a:	6893      	ldr	r3, [r2, #8]
 8003e1c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8003e20:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003e24:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003e26:	4a38      	ldr	r2, [pc, #224]	; (8003f08 <HAL_RCC_ClockConfig+0x208>)
 8003e28:	68a1      	ldr	r1, [r4, #8]
 8003e2a:	6893      	ldr	r3, [r2, #8]
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003e2c:	4e35      	ldr	r6, [pc, #212]	; (8003f04 <HAL_RCC_ClockConfig+0x204>)
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003e2e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003e32:	430b      	orrs	r3, r1
 8003e34:	6093      	str	r3, [r2, #8]
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003e36:	6833      	ldr	r3, [r6, #0]
 8003e38:	f003 030f 	and.w	r3, r3, #15
 8003e3c:	42ab      	cmp	r3, r5
 8003e3e:	d9b8      	bls.n	8003db2 <HAL_RCC_ClockConfig+0xb2>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e40:	6833      	ldr	r3, [r6, #0]
 8003e42:	f023 030f 	bic.w	r3, r3, #15
 8003e46:	432b      	orrs	r3, r5
 8003e48:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 8003e4a:	f7fe f87d 	bl	8001f48 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003e4e:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8003e52:	4607      	mov	r7, r0
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e54:	6833      	ldr	r3, [r6, #0]
 8003e56:	f003 030f 	and.w	r3, r3, #15
 8003e5a:	42ab      	cmp	r3, r5
 8003e5c:	d0a9      	beq.n	8003db2 <HAL_RCC_ClockConfig+0xb2>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003e5e:	f7fe f873 	bl	8001f48 <HAL_GetTick>
 8003e62:	1bc0      	subs	r0, r0, r7
 8003e64:	4540      	cmp	r0, r8
 8003e66:	d9f5      	bls.n	8003e54 <HAL_RCC_ClockConfig+0x154>
        return HAL_TIMEOUT;
 8003e68:	2003      	movs	r0, #3
}
 8003e6a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003e6e:	039a      	lsls	r2, r3, #14
 8003e70:	f53f af6e 	bmi.w	8003d50 <HAL_RCC_ClockConfig+0x50>
 8003e74:	e75b      	b.n	8003d2e <HAL_RCC_ClockConfig+0x2e>
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003e76:	4824      	ldr	r0, [pc, #144]	; (8003f08 <HAL_RCC_ClockConfig+0x208>)
 8003e78:	6801      	ldr	r1, [r0, #0]
 8003e7a:	0189      	lsls	r1, r1, #6
 8003e7c:	f57f af57 	bpl.w	8003d2e <HAL_RCC_ClockConfig+0x2e>
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003e80:	68c7      	ldr	r7, [r0, #12]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003e82:	68c1      	ldr	r1, [r0, #12]
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
    break;

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003e84:	68c0      	ldr	r0, [r0, #12]
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003e86:	f007 0703 	and.w	r7, r7, #3
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003e8a:	f3c1 1103 	ubfx	r1, r1, #4, #4
  switch (pllsource)
 8003e8e:	2f03      	cmp	r7, #3
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003e90:	f101 0601 	add.w	r6, r1, #1
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003e94:	bf0c      	ite	eq
 8003e96:	4921      	ldreq	r1, [pc, #132]	; (8003f1c <HAL_RCC_ClockConfig+0x21c>)
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003e98:	4921      	ldrne	r1, [pc, #132]	; (8003f20 <HAL_RCC_ClockConfig+0x220>)
 8003e9a:	fbb1 f1f6 	udiv	r1, r1, r6
    break;
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003e9e:	4e1a      	ldr	r6, [pc, #104]	; (8003f08 <HAL_RCC_ClockConfig+0x208>)
      if(pllfreq > 80000000U)
 8003ea0:	4f1a      	ldr	r7, [pc, #104]	; (8003f0c <HAL_RCC_ClockConfig+0x20c>)
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003ea2:	f3c0 2006 	ubfx	r0, r0, #8, #7
 8003ea6:	fb01 f100 	mul.w	r1, r1, r0
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003eaa:	68f0      	ldr	r0, [r6, #12]
 8003eac:	f3c0 6041 	ubfx	r0, r0, #25, #2
 8003eb0:	3001      	adds	r0, #1
 8003eb2:	0040      	lsls	r0, r0, #1
  sysclockfreq = pllvco/pllr;
 8003eb4:	fbb1 f1f0 	udiv	r1, r1, r0
      if(pllfreq > 80000000U)
 8003eb8:	42b9      	cmp	r1, r7
 8003eba:	d920      	bls.n	8003efe <HAL_RCC_ClockConfig+0x1fe>
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003ebc:	68b1      	ldr	r1, [r6, #8]
 8003ebe:	f011 0ff0 	tst.w	r1, #240	; 0xf0
 8003ec2:	d005      	beq.n	8003ed0 <HAL_RCC_ClockConfig+0x1d0>
 8003ec4:	f013 0902 	ands.w	r9, r3, #2
 8003ec8:	f43f af4b 	beq.w	8003d62 <HAL_RCC_ClockConfig+0x62>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003ecc:	68a3      	ldr	r3, [r4, #8]
 8003ece:	b9b3      	cbnz	r3, 8003efe <HAL_RCC_ClockConfig+0x1fe>
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003ed0:	490d      	ldr	r1, [pc, #52]	; (8003f08 <HAL_RCC_ClockConfig+0x208>)
 8003ed2:	688b      	ldr	r3, [r1, #8]
 8003ed4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003ed8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003edc:	608b      	str	r3, [r1, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003ede:	f04f 0980 	mov.w	r9, #128	; 0x80
 8003ee2:	e73e      	b.n	8003d62 <HAL_RCC_ClockConfig+0x62>
    return HAL_ERROR;
 8003ee4:	2001      	movs	r0, #1
}
 8003ee6:	4770      	bx	lr
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003ee8:	4a07      	ldr	r2, [pc, #28]	; (8003f08 <HAL_RCC_ClockConfig+0x208>)
 8003eea:	6893      	ldr	r3, [r2, #8]
 8003eec:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003ef0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003ef4:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8003ef6:	6862      	ldr	r2, [r4, #4]
 8003ef8:	f04f 0980 	mov.w	r9, #128	; 0x80
 8003efc:	e731      	b.n	8003d62 <HAL_RCC_ClockConfig+0x62>
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8003efe:	f04f 0900 	mov.w	r9, #0
 8003f02:	e72e      	b.n	8003d62 <HAL_RCC_ClockConfig+0x62>
 8003f04:	40022000 	.word	0x40022000
 8003f08:	40021000 	.word	0x40021000
 8003f0c:	04c4b400 	.word	0x04c4b400
 8003f10:	08005874 	.word	0x08005874
 8003f14:	20000408 	.word	0x20000408
 8003f18:	20000410 	.word	0x20000410
 8003f1c:	007a1200 	.word	0x007a1200
 8003f20:	00f42400 	.word	0x00f42400

08003f24 <HAL_RCC_GetHCLKFreq>:
  return SystemCoreClock;
 8003f24:	4b01      	ldr	r3, [pc, #4]	; (8003f2c <HAL_RCC_GetHCLKFreq+0x8>)
}
 8003f26:	6818      	ldr	r0, [r3, #0]
 8003f28:	4770      	bx	lr
 8003f2a:	bf00      	nop
 8003f2c:	20000408 	.word	0x20000408

08003f30 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003f30:	4b05      	ldr	r3, [pc, #20]	; (8003f48 <HAL_RCC_GetPCLK1Freq+0x18>)
 8003f32:	4a06      	ldr	r2, [pc, #24]	; (8003f4c <HAL_RCC_GetPCLK1Freq+0x1c>)
 8003f34:	689b      	ldr	r3, [r3, #8]
  return SystemCoreClock;
 8003f36:	4906      	ldr	r1, [pc, #24]	; (8003f50 <HAL_RCC_GetPCLK1Freq+0x20>)
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003f38:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8003f3c:	6808      	ldr	r0, [r1, #0]
 8003f3e:	5cd3      	ldrb	r3, [r2, r3]
 8003f40:	f003 031f 	and.w	r3, r3, #31
}
 8003f44:	40d8      	lsrs	r0, r3
 8003f46:	4770      	bx	lr
 8003f48:	40021000 	.word	0x40021000
 8003f4c:	08005884 	.word	0x08005884
 8003f50:	20000408 	.word	0x20000408

08003f54 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003f54:	4b05      	ldr	r3, [pc, #20]	; (8003f6c <HAL_RCC_GetPCLK2Freq+0x18>)
 8003f56:	4a06      	ldr	r2, [pc, #24]	; (8003f70 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8003f58:	689b      	ldr	r3, [r3, #8]
  return SystemCoreClock;
 8003f5a:	4906      	ldr	r1, [pc, #24]	; (8003f74 <HAL_RCC_GetPCLK2Freq+0x20>)
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003f5c:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8003f60:	6808      	ldr	r0, [r1, #0]
 8003f62:	5cd3      	ldrb	r3, [r2, r3]
 8003f64:	f003 031f 	and.w	r3, r3, #31
}
 8003f68:	40d8      	lsrs	r0, r3
 8003f6a:	4770      	bx	lr
 8003f6c:	40021000 	.word	0x40021000
 8003f70:	08005884 	.word	0x08005884
 8003f74:	20000408 	.word	0x20000408

08003f78 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003f78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003f7c:	6803      	ldr	r3, [r0, #0]
{
 8003f7e:	4604      	mov	r4, r0
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003f80:	f413 2000 	ands.w	r0, r3, #524288	; 0x80000
{
 8003f84:	b082      	sub	sp, #8
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003f86:	d056      	beq.n	8004036 <HAL_RCCEx_PeriphCLKConfig+0xbe>
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003f88:	4bb6      	ldr	r3, [pc, #728]	; (8004264 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8003f8a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003f8c:	00d5      	lsls	r5, r2, #3
 8003f8e:	f140 813e 	bpl.w	800420e <HAL_RCCEx_PeriphCLKConfig+0x296>
    FlagStatus       pwrclkchanged = RESET;
 8003f92:	2700      	movs	r7, #0
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003f94:	4db4      	ldr	r5, [pc, #720]	; (8004268 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003f96:	682b      	ldr	r3, [r5, #0]
 8003f98:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f9c:	602b      	str	r3, [r5, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003f9e:	f7fd ffd3 	bl	8001f48 <HAL_GetTick>
 8003fa2:	4606      	mov	r6, r0

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003fa4:	e005      	b.n	8003fb2 <HAL_RCCEx_PeriphCLKConfig+0x3a>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003fa6:	f7fd ffcf 	bl	8001f48 <HAL_GetTick>
 8003faa:	1b83      	subs	r3, r0, r6
 8003fac:	2b02      	cmp	r3, #2
 8003fae:	f200 8139 	bhi.w	8004224 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003fb2:	682b      	ldr	r3, [r5, #0]
 8003fb4:	05d8      	lsls	r0, r3, #23
 8003fb6:	d5f6      	bpl.n	8003fa6 <HAL_RCCEx_PeriphCLKConfig+0x2e>
    }

    if(ret == HAL_OK)
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003fb8:	4daa      	ldr	r5, [pc, #680]	; (8004264 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8003fba:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003fbe:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8003fc2:	d027      	beq.n	8004014 <HAL_RCCEx_PeriphCLKConfig+0x9c>
 8003fc4:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8003fc6:	429a      	cmp	r2, r3
 8003fc8:	d025      	beq.n	8004016 <HAL_RCCEx_PeriphCLKConfig+0x9e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003fca:	f8d5 1090 	ldr.w	r1, [r5, #144]	; 0x90
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003fce:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
 8003fd2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003fd6:	f8c5 3090 	str.w	r3, [r5, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003fda:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003fde:	f421 7040 	bic.w	r0, r1, #768	; 0x300
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003fe2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003fe6:	07c9      	lsls	r1, r1, #31
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003fe8:	f8c5 3090 	str.w	r3, [r5, #144]	; 0x90
        RCC->BDCR = tmpregister;
 8003fec:	f8c5 0090 	str.w	r0, [r5, #144]	; 0x90
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003ff0:	f140 8148 	bpl.w	8004284 <HAL_RCCEx_PeriphCLKConfig+0x30c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ff4:	f7fd ffa8 	bl	8001f48 <HAL_GetTick>

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ff8:	f241 3888 	movw	r8, #5000	; 0x1388
        tickstart = HAL_GetTick();
 8003ffc:	4606      	mov	r6, r0
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003ffe:	e005      	b.n	800400c <HAL_RCCEx_PeriphCLKConfig+0x94>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004000:	f7fd ffa2 	bl	8001f48 <HAL_GetTick>
 8004004:	1b80      	subs	r0, r0, r6
 8004006:	4540      	cmp	r0, r8
 8004008:	f200 810c 	bhi.w	8004224 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800400c:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
 8004010:	079b      	lsls	r3, r3, #30
 8004012:	d5f5      	bpl.n	8004000 <HAL_RCCEx_PeriphCLKConfig+0x88>
 8004014:	6d23      	ldr	r3, [r4, #80]	; 0x50
      }
      
      if(ret == HAL_OK)
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004016:	4993      	ldr	r1, [pc, #588]	; (8004264 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8004018:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 800401c:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8004020:	4313      	orrs	r3, r2
 8004022:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004026:	2000      	movs	r0, #0
      /* set overall return value */
      status = ret;
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004028:	b127      	cbz	r7, 8004034 <HAL_RCCEx_PeriphCLKConfig+0xbc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800402a:	4a8e      	ldr	r2, [pc, #568]	; (8004264 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 800402c:	6d93      	ldr	r3, [r2, #88]	; 0x58
 800402e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004032:	6593      	str	r3, [r2, #88]	; 0x58
 8004034:	6823      	ldr	r3, [r4, #0]
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004036:	07dd      	lsls	r5, r3, #31
 8004038:	d508      	bpl.n	800404c <HAL_RCCEx_PeriphCLKConfig+0xd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800403a:	498a      	ldr	r1, [pc, #552]	; (8004264 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 800403c:	6865      	ldr	r5, [r4, #4]
 800403e:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8004042:	f022 0203 	bic.w	r2, r2, #3
 8004046:	432a      	orrs	r2, r5
 8004048:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800404c:	0799      	lsls	r1, r3, #30
 800404e:	d508      	bpl.n	8004062 <HAL_RCCEx_PeriphCLKConfig+0xea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004050:	4984      	ldr	r1, [pc, #528]	; (8004264 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8004052:	68a5      	ldr	r5, [r4, #8]
 8004054:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8004058:	f022 020c 	bic.w	r2, r2, #12
 800405c:	432a      	orrs	r2, r5
 800405e:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004062:	075a      	lsls	r2, r3, #29
 8004064:	d508      	bpl.n	8004078 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004066:	497f      	ldr	r1, [pc, #508]	; (8004264 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8004068:	68e5      	ldr	r5, [r4, #12]
 800406a:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800406e:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 8004072:	432a      	orrs	r2, r5
 8004074:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004078:	071f      	lsls	r7, r3, #28
 800407a:	d508      	bpl.n	800408e <HAL_RCCEx_PeriphCLKConfig+0x116>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800407c:	4979      	ldr	r1, [pc, #484]	; (8004264 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 800407e:	6925      	ldr	r5, [r4, #16]
 8004080:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8004084:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8004088:	432a      	orrs	r2, r5
 800408a:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800408e:	06de      	lsls	r6, r3, #27
 8004090:	d508      	bpl.n	80040a4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004092:	4974      	ldr	r1, [pc, #464]	; (8004264 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8004094:	6965      	ldr	r5, [r4, #20]
 8004096:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800409a:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800409e:	432a      	orrs	r2, r5
 80040a0:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80040a4:	069d      	lsls	r5, r3, #26
 80040a6:	d508      	bpl.n	80040ba <HAL_RCCEx_PeriphCLKConfig+0x142>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80040a8:	496e      	ldr	r1, [pc, #440]	; (8004264 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 80040aa:	69a5      	ldr	r5, [r4, #24]
 80040ac:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80040b0:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80040b4:	432a      	orrs	r2, r5
 80040b6:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80040ba:	0659      	lsls	r1, r3, #25
 80040bc:	d508      	bpl.n	80040d0 <HAL_RCCEx_PeriphCLKConfig+0x158>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80040be:	4969      	ldr	r1, [pc, #420]	; (8004264 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 80040c0:	69e5      	ldr	r5, [r4, #28]
 80040c2:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80040c6:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 80040ca:	432a      	orrs	r2, r5
 80040cc:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80040d0:	061a      	lsls	r2, r3, #24
 80040d2:	d508      	bpl.n	80040e6 <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80040d4:	4963      	ldr	r1, [pc, #396]	; (8004264 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 80040d6:	6a25      	ldr	r5, [r4, #32]
 80040d8:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80040dc:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 80040e0:	432a      	orrs	r2, r5
 80040e2:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80040e6:	05df      	lsls	r7, r3, #23
 80040e8:	d508      	bpl.n	80040fc <HAL_RCCEx_PeriphCLKConfig+0x184>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80040ea:	495e      	ldr	r1, [pc, #376]	; (8004264 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 80040ec:	6a65      	ldr	r5, [r4, #36]	; 0x24
 80040ee:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80040f2:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 80040f6:	432a      	orrs	r2, r5
 80040f8:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80040fc:	039e      	lsls	r6, r3, #14
 80040fe:	d508      	bpl.n	8004112 <HAL_RCCEx_PeriphCLKConfig+0x19a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004100:	4958      	ldr	r1, [pc, #352]	; (8004264 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8004102:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 8004104:	f8d1 209c 	ldr.w	r2, [r1, #156]	; 0x9c
 8004108:	f022 0203 	bic.w	r2, r2, #3
 800410c:	432a      	orrs	r2, r5
 800410e:	f8c1 209c 	str.w	r2, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004112:	059d      	lsls	r5, r3, #22
 8004114:	d508      	bpl.n	8004128 <HAL_RCCEx_PeriphCLKConfig+0x1b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004116:	4953      	ldr	r1, [pc, #332]	; (8004264 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8004118:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
 800411a:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800411e:	f422 2240 	bic.w	r2, r2, #786432	; 0xc0000
 8004122:	432a      	orrs	r2, r5
 8004124:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004128:	0559      	lsls	r1, r3, #21
 800412a:	d50b      	bpl.n	8004144 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800412c:	494d      	ldr	r1, [pc, #308]	; (8004264 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 800412e:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8004130:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8004134:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8004138:	432a      	orrs	r2, r5
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800413a:	f5b5 1f80 	cmp.w	r5, #1048576	; 0x100000
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800413e:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8004142:	d071      	beq.n	8004228 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004144:	051a      	lsls	r2, r3, #20
 8004146:	d50b      	bpl.n	8004160 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004148:	4946      	ldr	r1, [pc, #280]	; (8004264 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 800414a:	6b65      	ldr	r5, [r4, #52]	; 0x34
 800414c:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8004150:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000
 8004154:	432a      	orrs	r2, r5
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8004156:	f5b5 0f80 	cmp.w	r5, #4194304	; 0x400000
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800415a:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800415e:	d068      	beq.n	8004232 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004160:	04df      	lsls	r7, r3, #19
 8004162:	d50b      	bpl.n	800417c <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004164:	493f      	ldr	r1, [pc, #252]	; (8004264 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8004166:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 8004168:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800416c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8004170:	432a      	orrs	r2, r5
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8004172:	f1b5 7f80 	cmp.w	r5, #16777216	; 0x1000000
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004176:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800417a:	d05f      	beq.n	800423c <HAL_RCCEx_PeriphCLKConfig+0x2c4>
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800417c:	049e      	lsls	r6, r3, #18
 800417e:	d50b      	bpl.n	8004198 <HAL_RCCEx_PeriphCLKConfig+0x220>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004180:	4938      	ldr	r1, [pc, #224]	; (8004264 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8004182:	6be5      	ldr	r5, [r4, #60]	; 0x3c
 8004184:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8004188:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 800418c:	432a      	orrs	r2, r5

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800418e:	f1b5 6f00 	cmp.w	r5, #134217728	; 0x8000000
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004192:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004196:	d056      	beq.n	8004246 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004198:	045d      	lsls	r5, r3, #17
 800419a:	d50b      	bpl.n	80041b4 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800419c:	4931      	ldr	r1, [pc, #196]	; (8004264 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 800419e:	6c25      	ldr	r5, [r4, #64]	; 0x40
 80041a0:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80041a4:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 80041a8:	432a      	orrs	r2, r5

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80041aa:	f1b5 6f00 	cmp.w	r5, #134217728	; 0x8000000
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80041ae:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80041b2:	d04d      	beq.n	8004250 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80041b4:	0419      	lsls	r1, r3, #16
 80041b6:	d50b      	bpl.n	80041d0 <HAL_RCCEx_PeriphCLKConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80041b8:	492a      	ldr	r1, [pc, #168]	; (8004264 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 80041ba:	6c65      	ldr	r5, [r4, #68]	; 0x44
 80041bc:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80041c0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80041c4:	432a      	orrs	r2, r5
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80041c6:	f1b5 5f80 	cmp.w	r5, #268435456	; 0x10000000
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80041ca:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80041ce:	d044      	beq.n	800425a <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 80041d0:	03da      	lsls	r2, r3, #15
 80041d2:	d50b      	bpl.n	80041ec <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 80041d4:	4923      	ldr	r1, [pc, #140]	; (8004264 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 80041d6:	6ca5      	ldr	r5, [r4, #72]	; 0x48
 80041d8:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80041dc:	f022 4240 	bic.w	r2, r2, #3221225472	; 0xc0000000
 80041e0:	432a      	orrs	r2, r5
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 80041e2:	f1b5 4f80 	cmp.w	r5, #1073741824	; 0x40000000
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 80041e6:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 80041ea:	d03f      	beq.n	800426c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80041ec:	035b      	lsls	r3, r3, #13
 80041ee:	d50b      	bpl.n	8004208 <HAL_RCCEx_PeriphCLKConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80041f0:	4a1c      	ldr	r2, [pc, #112]	; (8004264 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 80041f2:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 80041f4:	f8d2 309c 	ldr.w	r3, [r2, #156]	; 0x9c
 80041f8:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80041fc:	430b      	orrs	r3, r1

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 80041fe:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8004202:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8004206:	d036      	beq.n	8004276 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  }

#endif /* QUADSPI */

  return status;
}
 8004208:	b002      	add	sp, #8
 800420a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_PWR_CLK_ENABLE();
 800420e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8004210:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8004214:	659a      	str	r2, [r3, #88]	; 0x58
 8004216:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004218:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800421c:	9301      	str	r3, [sp, #4]
 800421e:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8004220:	2701      	movs	r7, #1
 8004222:	e6b7      	b.n	8003f94 <HAL_RCCEx_PeriphCLKConfig+0x1c>
        ret = HAL_TIMEOUT;
 8004224:	2003      	movs	r0, #3
 8004226:	e6ff      	b.n	8004028 <HAL_RCCEx_PeriphCLKConfig+0xb0>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004228:	68ca      	ldr	r2, [r1, #12]
 800422a:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800422e:	60ca      	str	r2, [r1, #12]
 8004230:	e788      	b.n	8004144 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004232:	68ca      	ldr	r2, [r1, #12]
 8004234:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8004238:	60ca      	str	r2, [r1, #12]
 800423a:	e791      	b.n	8004160 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800423c:	68ca      	ldr	r2, [r1, #12]
 800423e:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8004242:	60ca      	str	r2, [r1, #12]
 8004244:	e79a      	b.n	800417c <HAL_RCCEx_PeriphCLKConfig+0x204>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004246:	68ca      	ldr	r2, [r1, #12]
 8004248:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800424c:	60ca      	str	r2, [r1, #12]
 800424e:	e7a3      	b.n	8004198 <HAL_RCCEx_PeriphCLKConfig+0x220>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004250:	68ca      	ldr	r2, [r1, #12]
 8004252:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8004256:	60ca      	str	r2, [r1, #12]
 8004258:	e7ac      	b.n	80041b4 <HAL_RCCEx_PeriphCLKConfig+0x23c>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800425a:	68ca      	ldr	r2, [r1, #12]
 800425c:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8004260:	60ca      	str	r2, [r1, #12]
 8004262:	e7b5      	b.n	80041d0 <HAL_RCCEx_PeriphCLKConfig+0x258>
 8004264:	40021000 	.word	0x40021000
 8004268:	40007000 	.word	0x40007000
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800426c:	68ca      	ldr	r2, [r1, #12]
 800426e:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8004272:	60ca      	str	r2, [r1, #12]
 8004274:	e7ba      	b.n	80041ec <HAL_RCCEx_PeriphCLKConfig+0x274>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004276:	68d3      	ldr	r3, [r2, #12]
 8004278:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800427c:	60d3      	str	r3, [r2, #12]
}
 800427e:	b002      	add	sp, #8
 8004280:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004284:	4613      	mov	r3, r2
 8004286:	e6c6      	b.n	8004016 <HAL_RCCEx_PeriphCLKConfig+0x9e>

08004288 <HAL_TIM_Base_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004288:	2800      	cmp	r0, #0
 800428a:	f000 8089 	beq.w	80043a0 <HAL_TIM_Base_Init+0x118>
{
 800428e:	b538      	push	{r3, r4, r5, lr}
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004290:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8004294:	4604      	mov	r4, r0
 8004296:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800429a:	2b00      	cmp	r3, #0
 800429c:	d078      	beq.n	8004390 <HAL_TIM_Base_Init+0x108>

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800429e:	6821      	ldr	r1, [r4, #0]
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80042a0:	4a43      	ldr	r2, [pc, #268]	; (80043b0 <HAL_TIM_Base_Init+0x128>)
  htim->State = HAL_TIM_STATE_BUSY;
 80042a2:	2302      	movs	r3, #2
 80042a4:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80042a8:	4291      	cmp	r1, r2
  tmpcr1 = TIMx->CR1;
 80042aa:	680b      	ldr	r3, [r1, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80042ac:	d05c      	beq.n	8004368 <HAL_TIM_Base_Init+0xe0>
 80042ae:	f1b1 4f80 	cmp.w	r1, #1073741824	; 0x40000000
 80042b2:	d02c      	beq.n	800430e <HAL_TIM_Base_Init+0x86>
 80042b4:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 80042b8:	4291      	cmp	r1, r2
 80042ba:	d028      	beq.n	800430e <HAL_TIM_Base_Init+0x86>
 80042bc:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80042c0:	4291      	cmp	r1, r2
 80042c2:	d024      	beq.n	800430e <HAL_TIM_Base_Init+0x86>
 80042c4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80042c8:	4291      	cmp	r1, r2
 80042ca:	d020      	beq.n	800430e <HAL_TIM_Base_Init+0x86>
 80042cc:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 80042d0:	4291      	cmp	r1, r2
 80042d2:	d049      	beq.n	8004368 <HAL_TIM_Base_Init+0xe0>
 80042d4:	f502 52e0 	add.w	r2, r2, #7168	; 0x1c00
 80042d8:	4291      	cmp	r1, r2
 80042da:	d063      	beq.n	80043a4 <HAL_TIM_Base_Init+0x11c>
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80042dc:	4a35      	ldr	r2, [pc, #212]	; (80043b4 <HAL_TIM_Base_Init+0x12c>)
 80042de:	4291      	cmp	r1, r2
 80042e0:	d05b      	beq.n	800439a <HAL_TIM_Base_Init+0x112>
 80042e2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80042e6:	4291      	cmp	r1, r2
 80042e8:	d057      	beq.n	800439a <HAL_TIM_Base_Init+0x112>
 80042ea:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80042ee:	4291      	cmp	r1, r2
 80042f0:	d053      	beq.n	800439a <HAL_TIM_Base_Init+0x112>
 80042f2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80042f6:	4291      	cmp	r1, r2
 80042f8:	d04f      	beq.n	800439a <HAL_TIM_Base_Init+0x112>
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80042fa:	69a5      	ldr	r5, [r4, #24]

  TIMx->CR1 = tmpcr1;

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80042fc:	68e0      	ldr	r0, [r4, #12]

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80042fe:	6862      	ldr	r2, [r4, #4]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004300:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004304:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 8004306:	600b      	str	r3, [r1, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004308:	62c8      	str	r0, [r1, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 800430a:	628a      	str	r2, [r1, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800430c:	e010      	b.n	8004330 <HAL_TIM_Base_Init+0xa8>
    tmpcr1 |= Structure->CounterMode;
 800430e:	68a2      	ldr	r2, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004310:	6925      	ldr	r5, [r4, #16]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004312:	68e0      	ldr	r0, [r4, #12]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004314:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8004318:	4313      	orrs	r3, r2
    tmpcr1 &= ~TIM_CR1_CKD;
 800431a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800431e:	69a2      	ldr	r2, [r4, #24]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004320:	432b      	orrs	r3, r5
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004322:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004326:	4313      	orrs	r3, r2
  TIMx->PSC = Structure->Prescaler;
 8004328:	6862      	ldr	r2, [r4, #4]
  TIMx->CR1 = tmpcr1;
 800432a:	600b      	str	r3, [r1, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800432c:	62c8      	str	r0, [r1, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 800432e:	628a      	str	r2, [r1, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004330:	2301      	movs	r3, #1
 8004332:	614b      	str	r3, [r1, #20]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004334:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004338:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 800433c:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8004340:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8004344:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 8004348:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800434c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004350:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8004354:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004358:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 800435c:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 8004360:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8004364:	2000      	movs	r0, #0
}
 8004366:	bd38      	pop	{r3, r4, r5, pc}
    tmpcr1 |= Structure->CounterMode;
 8004368:	68a5      	ldr	r5, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800436a:	6920      	ldr	r0, [r4, #16]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800436c:	69a2      	ldr	r2, [r4, #24]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800436e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8004372:	432b      	orrs	r3, r5
    tmpcr1 &= ~TIM_CR1_CKD;
 8004374:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004378:	4303      	orrs	r3, r0
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800437a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800437e:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8004380:	600b      	str	r3, [r1, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004382:	68e3      	ldr	r3, [r4, #12]
 8004384:	62cb      	str	r3, [r1, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8004386:	6863      	ldr	r3, [r4, #4]
 8004388:	628b      	str	r3, [r1, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 800438a:	6963      	ldr	r3, [r4, #20]
 800438c:	630b      	str	r3, [r1, #48]	; 0x30
 800438e:	e7cf      	b.n	8004330 <HAL_TIM_Base_Init+0xa8>
    htim->Lock = HAL_UNLOCKED;
 8004390:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8004394:	f7fd fc3e 	bl	8001c14 <HAL_TIM_Base_MspInit>
 8004398:	e781      	b.n	800429e <HAL_TIM_Base_Init+0x16>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800439a:	6920      	ldr	r0, [r4, #16]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800439c:	69a2      	ldr	r2, [r4, #24]
 800439e:	e7e9      	b.n	8004374 <HAL_TIM_Base_Init+0xec>
    return HAL_ERROR;
 80043a0:	2001      	movs	r0, #1
}
 80043a2:	4770      	bx	lr
    tmpcr1 |= Structure->CounterMode;
 80043a4:	68a2      	ldr	r2, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80043a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80043aa:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80043ac:	e796      	b.n	80042dc <HAL_TIM_Base_Init+0x54>
 80043ae:	bf00      	nop
 80043b0:	40012c00 	.word	0x40012c00
 80043b4:	40014000 	.word	0x40014000

080043b8 <HAL_TIM_Base_Start_IT>:
  if (htim->State != HAL_TIM_STATE_READY)
 80043b8:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80043bc:	2b01      	cmp	r3, #1
 80043be:	d132      	bne.n	8004426 <HAL_TIM_Base_Start_IT+0x6e>
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80043c0:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80043c2:	491b      	ldr	r1, [pc, #108]	; (8004430 <HAL_TIM_Base_Start_IT+0x78>)
  htim->State = HAL_TIM_STATE_BUSY;
 80043c4:	2202      	movs	r2, #2
 80043c6:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80043ca:	68da      	ldr	r2, [r3, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80043cc:	428b      	cmp	r3, r1
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80043ce:	f042 0201 	orr.w	r2, r2, #1
 80043d2:	60da      	str	r2, [r3, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80043d4:	d019      	beq.n	800440a <HAL_TIM_Base_Start_IT+0x52>
 80043d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80043da:	d016      	beq.n	800440a <HAL_TIM_Base_Start_IT+0x52>
 80043dc:	4a15      	ldr	r2, [pc, #84]	; (8004434 <HAL_TIM_Base_Start_IT+0x7c>)
 80043de:	4293      	cmp	r3, r2
 80043e0:	d013      	beq.n	800440a <HAL_TIM_Base_Start_IT+0x52>
 80043e2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80043e6:	4293      	cmp	r3, r2
 80043e8:	d00f      	beq.n	800440a <HAL_TIM_Base_Start_IT+0x52>
 80043ea:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80043ee:	4293      	cmp	r3, r2
 80043f0:	d00b      	beq.n	800440a <HAL_TIM_Base_Start_IT+0x52>
 80043f2:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 80043f6:	4293      	cmp	r3, r2
 80043f8:	d007      	beq.n	800440a <HAL_TIM_Base_Start_IT+0x52>
 80043fa:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 80043fe:	4293      	cmp	r3, r2
 8004400:	d003      	beq.n	800440a <HAL_TIM_Base_Start_IT+0x52>
 8004402:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004406:	4293      	cmp	r3, r2
 8004408:	d107      	bne.n	800441a <HAL_TIM_Base_Start_IT+0x62>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800440a:	6899      	ldr	r1, [r3, #8]
 800440c:	4a0a      	ldr	r2, [pc, #40]	; (8004438 <HAL_TIM_Base_Start_IT+0x80>)
 800440e:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004410:	2a06      	cmp	r2, #6
 8004412:	d00a      	beq.n	800442a <HAL_TIM_Base_Start_IT+0x72>
 8004414:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8004418:	d007      	beq.n	800442a <HAL_TIM_Base_Start_IT+0x72>
    __HAL_TIM_ENABLE(htim);
 800441a:	681a      	ldr	r2, [r3, #0]
 800441c:	f042 0201 	orr.w	r2, r2, #1
 8004420:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8004422:	2000      	movs	r0, #0
 8004424:	4770      	bx	lr
    return HAL_ERROR;
 8004426:	2001      	movs	r0, #1
 8004428:	4770      	bx	lr
  return HAL_OK;
 800442a:	2000      	movs	r0, #0
}
 800442c:	4770      	bx	lr
 800442e:	bf00      	nop
 8004430:	40012c00 	.word	0x40012c00
 8004434:	40000400 	.word	0x40000400
 8004438:	00010007 	.word	0x00010007

0800443c <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 800443c:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8004440:	2b01      	cmp	r3, #1
 8004442:	f000 8088 	beq.w	8004556 <HAL_TIM_ConfigClockSource+0x11a>
{
 8004446:	b4f0      	push	{r4, r5, r6, r7}
  tmpsmcr = htim->Instance->SMCR;
 8004448:	6802      	ldr	r2, [r0, #0]
  __HAL_LOCK(htim);
 800444a:	2401      	movs	r4, #1
  htim->State = HAL_TIM_STATE_BUSY;
 800444c:	2302      	movs	r3, #2
  __HAL_LOCK(htim);
 800444e:	f880 403c 	strb.w	r4, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 8004452:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 8004456:	6895      	ldr	r5, [r2, #8]
  switch (sClockSourceConfig->ClockSource)
 8004458:	680b      	ldr	r3, [r1, #0]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800445a:	4c5a      	ldr	r4, [pc, #360]	; (80045c4 <HAL_TIM_ConfigClockSource+0x188>)
  switch (sClockSourceConfig->ClockSource)
 800445c:	2b60      	cmp	r3, #96	; 0x60
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800445e:	ea04 0405 	and.w	r4, r4, r5
  htim->Instance->SMCR = tmpsmcr;
 8004462:	6094      	str	r4, [r2, #8]
  switch (sClockSourceConfig->ClockSource)
 8004464:	d079      	beq.n	800455a <HAL_TIM_ConfigClockSource+0x11e>
 8004466:	d91c      	bls.n	80044a2 <HAL_TIM_ConfigClockSource+0x66>
 8004468:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800446c:	d063      	beq.n	8004536 <HAL_TIM_ConfigClockSource+0xfa>
 800446e:	d940      	bls.n	80044f2 <HAL_TIM_ConfigClockSource+0xb6>
 8004470:	4955      	ldr	r1, [pc, #340]	; (80045c8 <HAL_TIM_ConfigClockSource+0x18c>)
 8004472:	428b      	cmp	r3, r1
 8004474:	d003      	beq.n	800447e <HAL_TIM_ConfigClockSource+0x42>
 8004476:	d933      	bls.n	80044e0 <HAL_TIM_ConfigClockSource+0xa4>
 8004478:	4954      	ldr	r1, [pc, #336]	; (80045cc <HAL_TIM_ConfigClockSource+0x190>)
 800447a:	428b      	cmp	r3, r1
 800447c:	d14b      	bne.n	8004516 <HAL_TIM_ConfigClockSource+0xda>
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800447e:	6891      	ldr	r1, [r2, #8]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004480:	f421 1140 	bic.w	r1, r1, #3145728	; 0x300000
 8004484:	f021 0170 	bic.w	r1, r1, #112	; 0x70
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004488:	430b      	orrs	r3, r1
 800448a:	f043 0307 	orr.w	r3, r3, #7
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800448e:	6093      	str	r3, [r2, #8]
  __HAL_UNLOCK(htim);
 8004490:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 8004492:	2201      	movs	r2, #1
 8004494:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8004498:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
}
 800449c:	bcf0      	pop	{r4, r5, r6, r7}
  return HAL_OK;
 800449e:	4618      	mov	r0, r3
}
 80044a0:	4770      	bx	lr
  switch (sClockSourceConfig->ClockSource)
 80044a2:	2b40      	cmp	r3, #64	; 0x40
 80044a4:	d074      	beq.n	8004590 <HAL_TIM_ConfigClockSource+0x154>
 80044a6:	d93c      	bls.n	8004522 <HAL_TIM_ConfigClockSource+0xe6>
 80044a8:	2b50      	cmp	r3, #80	; 0x50
 80044aa:	d1f1      	bne.n	8004490 <HAL_TIM_ConfigClockSource+0x54>
  tmpccer = TIMx->CCER;
 80044ac:	6a15      	ldr	r5, [r2, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80044ae:	6a16      	ldr	r6, [r2, #32]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80044b0:	684c      	ldr	r4, [r1, #4]
 80044b2:	68cf      	ldr	r7, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80044b4:	f026 0601 	bic.w	r6, r6, #1
 80044b8:	6216      	str	r6, [r2, #32]
  tmpccmr1 = TIMx->CCMR1;
 80044ba:	6993      	ldr	r3, [r2, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80044bc:	f025 010a 	bic.w	r1, r5, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80044c0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80044c4:	ea43 1307 	orr.w	r3, r3, r7, lsl #4
  tmpccer |= TIM_ICPolarity;
 80044c8:	4321      	orrs	r1, r4
  TIMx->CCMR1 = tmpccmr1;
 80044ca:	6193      	str	r3, [r2, #24]
  TIMx->CCER = tmpccer;
 80044cc:	6211      	str	r1, [r2, #32]
  tmpsmcr = TIMx->SMCR;
 80044ce:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80044d0:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80044d4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80044d8:	f043 0357 	orr.w	r3, r3, #87	; 0x57
  TIMx->SMCR = tmpsmcr;
 80044dc:	6093      	str	r3, [r2, #8]
}
 80044de:	e7d7      	b.n	8004490 <HAL_TIM_ConfigClockSource+0x54>
  switch (sClockSourceConfig->ClockSource)
 80044e0:	3910      	subs	r1, #16
 80044e2:	428b      	cmp	r3, r1
 80044e4:	d0cb      	beq.n	800447e <HAL_TIM_ConfigClockSource+0x42>
 80044e6:	f023 0110 	bic.w	r1, r3, #16
 80044ea:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80044ee:	d0c6      	beq.n	800447e <HAL_TIM_ConfigClockSource+0x42>
 80044f0:	e7ce      	b.n	8004490 <HAL_TIM_ConfigClockSource+0x54>
 80044f2:	2b70      	cmp	r3, #112	; 0x70
 80044f4:	d1cc      	bne.n	8004490 <HAL_TIM_ConfigClockSource+0x54>

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80044f6:	e9d1 5301 	ldrd	r5, r3, [r1, #4]
 80044fa:	68cc      	ldr	r4, [r1, #12]
  tmpsmcr = TIMx->SMCR;
 80044fc:	6891      	ldr	r1, [r2, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80044fe:	432b      	orrs	r3, r5
 8004500:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004504:	f421 417f 	bic.w	r1, r1, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004508:	430b      	orrs	r3, r1

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800450a:	6093      	str	r3, [r2, #8]
      tmpsmcr = htim->Instance->SMCR;
 800450c:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800450e:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR = tmpsmcr;
 8004512:	6093      	str	r3, [r2, #8]
      break;
 8004514:	e7bc      	b.n	8004490 <HAL_TIM_ConfigClockSource+0x54>
  switch (sClockSourceConfig->ClockSource)
 8004516:	3930      	subs	r1, #48	; 0x30
 8004518:	f023 0410 	bic.w	r4, r3, #16
 800451c:	428c      	cmp	r4, r1
 800451e:	d0ae      	beq.n	800447e <HAL_TIM_ConfigClockSource+0x42>
 8004520:	e7b6      	b.n	8004490 <HAL_TIM_ConfigClockSource+0x54>
 8004522:	2b20      	cmp	r3, #32
 8004524:	d0ab      	beq.n	800447e <HAL_TIM_ConfigClockSource+0x42>
 8004526:	d902      	bls.n	800452e <HAL_TIM_ConfigClockSource+0xf2>
 8004528:	2b30      	cmp	r3, #48	; 0x30
 800452a:	d1b1      	bne.n	8004490 <HAL_TIM_ConfigClockSource+0x54>
 800452c:	e7a7      	b.n	800447e <HAL_TIM_ConfigClockSource+0x42>
 800452e:	f033 0110 	bics.w	r1, r3, #16
 8004532:	d1ad      	bne.n	8004490 <HAL_TIM_ConfigClockSource+0x54>
 8004534:	e7a3      	b.n	800447e <HAL_TIM_ConfigClockSource+0x42>
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004536:	e9d1 5301 	ldrd	r5, r3, [r1, #4]
 800453a:	68cc      	ldr	r4, [r1, #12]
  tmpsmcr = TIMx->SMCR;
 800453c:	6891      	ldr	r1, [r2, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800453e:	432b      	orrs	r3, r5
 8004540:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004544:	f421 417f 	bic.w	r1, r1, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004548:	430b      	orrs	r3, r1
  TIMx->SMCR = tmpsmcr;
 800454a:	6093      	str	r3, [r2, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800454c:	6893      	ldr	r3, [r2, #8]
 800454e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004552:	6093      	str	r3, [r2, #8]
      break;
 8004554:	e79c      	b.n	8004490 <HAL_TIM_ConfigClockSource+0x54>
  __HAL_LOCK(htim);
 8004556:	2002      	movs	r0, #2
}
 8004558:	4770      	bx	lr
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800455a:	6a14      	ldr	r4, [r2, #32]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800455c:	684d      	ldr	r5, [r1, #4]
 800455e:	68ce      	ldr	r6, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004560:	f024 0410 	bic.w	r4, r4, #16
 8004564:	6214      	str	r4, [r2, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004566:	6991      	ldr	r1, [r2, #24]
  tmpccer = TIMx->CCER;
 8004568:	6a13      	ldr	r3, [r2, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800456a:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800456e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8004572:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004576:	ea41 3106 	orr.w	r1, r1, r6, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 800457a:	6191      	str	r1, [r2, #24]
  TIMx->CCER = tmpccer;
 800457c:	6213      	str	r3, [r2, #32]
  tmpsmcr = TIMx->SMCR;
 800457e:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8004580:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8004584:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004588:	f043 0367 	orr.w	r3, r3, #103	; 0x67
  TIMx->SMCR = tmpsmcr;
 800458c:	6093      	str	r3, [r2, #8]
}
 800458e:	e77f      	b.n	8004490 <HAL_TIM_ConfigClockSource+0x54>
  tmpccer = TIMx->CCER;
 8004590:	6a15      	ldr	r5, [r2, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004592:	6a16      	ldr	r6, [r2, #32]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004594:	684c      	ldr	r4, [r1, #4]
 8004596:	68cf      	ldr	r7, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004598:	f026 0601 	bic.w	r6, r6, #1
 800459c:	6216      	str	r6, [r2, #32]
  tmpccmr1 = TIMx->CCMR1;
 800459e:	6993      	ldr	r3, [r2, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80045a0:	f025 010a 	bic.w	r1, r5, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80045a4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80045a8:	ea43 1307 	orr.w	r3, r3, r7, lsl #4
  tmpccer |= TIM_ICPolarity;
 80045ac:	4321      	orrs	r1, r4
  TIMx->CCMR1 = tmpccmr1;
 80045ae:	6193      	str	r3, [r2, #24]
  TIMx->CCER = tmpccer;
 80045b0:	6211      	str	r1, [r2, #32]
  tmpsmcr = TIMx->SMCR;
 80045b2:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80045b4:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80045b8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80045bc:	f043 0347 	orr.w	r3, r3, #71	; 0x47
  TIMx->SMCR = tmpsmcr;
 80045c0:	6093      	str	r3, [r2, #8]
}
 80045c2:	e765      	b.n	8004490 <HAL_TIM_ConfigClockSource+0x54>
 80045c4:	ffce0088 	.word	0xffce0088
 80045c8:	00100030 	.word	0x00100030
 80045cc:	00100070 	.word	0x00100070

080045d0 <HAL_TIM_OC_DelayElapsedCallback>:
 80045d0:	4770      	bx	lr
 80045d2:	bf00      	nop

080045d4 <HAL_TIM_IC_CaptureCallback>:
 80045d4:	4770      	bx	lr
 80045d6:	bf00      	nop

080045d8 <HAL_TIM_PWM_PulseFinishedCallback>:
 80045d8:	4770      	bx	lr
 80045da:	bf00      	nop

080045dc <HAL_TIM_TriggerCallback>:
 80045dc:	4770      	bx	lr
 80045de:	bf00      	nop

080045e0 <HAL_TIM_IRQHandler>:
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80045e0:	6803      	ldr	r3, [r0, #0]
 80045e2:	691a      	ldr	r2, [r3, #16]
 80045e4:	0791      	lsls	r1, r2, #30
{
 80045e6:	b510      	push	{r4, lr}
 80045e8:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80045ea:	d503      	bpl.n	80045f4 <HAL_TIM_IRQHandler+0x14>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80045ec:	68da      	ldr	r2, [r3, #12]
 80045ee:	0792      	lsls	r2, r2, #30
 80045f0:	f100 808a 	bmi.w	8004708 <HAL_TIM_IRQHandler+0x128>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80045f4:	691a      	ldr	r2, [r3, #16]
 80045f6:	0752      	lsls	r2, r2, #29
 80045f8:	d502      	bpl.n	8004600 <HAL_TIM_IRQHandler+0x20>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80045fa:	68da      	ldr	r2, [r3, #12]
 80045fc:	0750      	lsls	r0, r2, #29
 80045fe:	d470      	bmi.n	80046e2 <HAL_TIM_IRQHandler+0x102>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004600:	691a      	ldr	r2, [r3, #16]
 8004602:	0711      	lsls	r1, r2, #28
 8004604:	d502      	bpl.n	800460c <HAL_TIM_IRQHandler+0x2c>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004606:	68da      	ldr	r2, [r3, #12]
 8004608:	0712      	lsls	r2, r2, #28
 800460a:	d458      	bmi.n	80046be <HAL_TIM_IRQHandler+0xde>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800460c:	691a      	ldr	r2, [r3, #16]
 800460e:	06d1      	lsls	r1, r2, #27
 8004610:	d502      	bpl.n	8004618 <HAL_TIM_IRQHandler+0x38>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004612:	68da      	ldr	r2, [r3, #12]
 8004614:	06d2      	lsls	r2, r2, #27
 8004616:	d43e      	bmi.n	8004696 <HAL_TIM_IRQHandler+0xb6>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004618:	691a      	ldr	r2, [r3, #16]
 800461a:	07d0      	lsls	r0, r2, #31
 800461c:	d503      	bpl.n	8004626 <HAL_TIM_IRQHandler+0x46>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800461e:	68da      	ldr	r2, [r3, #12]
 8004620:	07d1      	lsls	r1, r2, #31
 8004622:	f100 808a 	bmi.w	800473a <HAL_TIM_IRQHandler+0x15a>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004626:	691a      	ldr	r2, [r3, #16]
 8004628:	0612      	lsls	r2, r2, #24
 800462a:	d503      	bpl.n	8004634 <HAL_TIM_IRQHandler+0x54>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800462c:	68da      	ldr	r2, [r3, #12]
 800462e:	0610      	lsls	r0, r2, #24
 8004630:	f100 808b 	bmi.w	800474a <HAL_TIM_IRQHandler+0x16a>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004634:	691a      	ldr	r2, [r3, #16]
 8004636:	05d1      	lsls	r1, r2, #23
 8004638:	d503      	bpl.n	8004642 <HAL_TIM_IRQHandler+0x62>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800463a:	68da      	ldr	r2, [r3, #12]
 800463c:	0612      	lsls	r2, r2, #24
 800463e:	f100 808c 	bmi.w	800475a <HAL_TIM_IRQHandler+0x17a>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004642:	691a      	ldr	r2, [r3, #16]
 8004644:	0650      	lsls	r0, r2, #25
 8004646:	d503      	bpl.n	8004650 <HAL_TIM_IRQHandler+0x70>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004648:	68da      	ldr	r2, [r3, #12]
 800464a:	0651      	lsls	r1, r2, #25
 800464c:	f100 808d 	bmi.w	800476a <HAL_TIM_IRQHandler+0x18a>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004650:	691a      	ldr	r2, [r3, #16]
 8004652:	0692      	lsls	r2, r2, #26
 8004654:	d503      	bpl.n	800465e <HAL_TIM_IRQHandler+0x7e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004656:	68da      	ldr	r2, [r3, #12]
 8004658:	0690      	lsls	r0, r2, #26
 800465a:	f100 808e 	bmi.w	800477a <HAL_TIM_IRQHandler+0x19a>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 800465e:	691a      	ldr	r2, [r3, #16]
 8004660:	02d1      	lsls	r1, r2, #11
 8004662:	d503      	bpl.n	800466c <HAL_TIM_IRQHandler+0x8c>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 8004664:	68da      	ldr	r2, [r3, #12]
 8004666:	02d2      	lsls	r2, r2, #11
 8004668:	f100 808f 	bmi.w	800478a <HAL_TIM_IRQHandler+0x1aa>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 800466c:	691a      	ldr	r2, [r3, #16]
 800466e:	0290      	lsls	r0, r2, #10
 8004670:	d503      	bpl.n	800467a <HAL_TIM_IRQHandler+0x9a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 8004672:	68da      	ldr	r2, [r3, #12]
 8004674:	0291      	lsls	r1, r2, #10
 8004676:	f100 8090 	bmi.w	800479a <HAL_TIM_IRQHandler+0x1ba>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 800467a:	691a      	ldr	r2, [r3, #16]
 800467c:	0252      	lsls	r2, r2, #9
 800467e:	d503      	bpl.n	8004688 <HAL_TIM_IRQHandler+0xa8>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 8004680:	68da      	ldr	r2, [r3, #12]
 8004682:	0250      	lsls	r0, r2, #9
 8004684:	f100 8091 	bmi.w	80047aa <HAL_TIM_IRQHandler+0x1ca>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 8004688:	691a      	ldr	r2, [r3, #16]
 800468a:	0211      	lsls	r1, r2, #8
 800468c:	d502      	bpl.n	8004694 <HAL_TIM_IRQHandler+0xb4>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 800468e:	68da      	ldr	r2, [r3, #12]
 8004690:	0212      	lsls	r2, r2, #8
 8004692:	d44a      	bmi.n	800472a <HAL_TIM_IRQHandler+0x14a>
}
 8004694:	bd10      	pop	{r4, pc}
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004696:	f06f 0110 	mvn.w	r1, #16
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800469a:	2208      	movs	r2, #8
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800469c:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800469e:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80046a0:	69db      	ldr	r3, [r3, #28]
 80046a2:	f413 7f40 	tst.w	r3, #768	; 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 80046a6:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80046a8:	f040 8090 	bne.w	80047cc <HAL_TIM_IRQHandler+0x1ec>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80046ac:	f7ff ff90 	bl	80045d0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80046b0:	4620      	mov	r0, r4
 80046b2:	f7ff ff91 	bl	80045d8 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80046b6:	2200      	movs	r2, #0
 80046b8:	6823      	ldr	r3, [r4, #0]
 80046ba:	7722      	strb	r2, [r4, #28]
 80046bc:	e7ac      	b.n	8004618 <HAL_TIM_IRQHandler+0x38>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80046be:	f06f 0108 	mvn.w	r1, #8
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80046c2:	2204      	movs	r2, #4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80046c4:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80046c6:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80046c8:	69db      	ldr	r3, [r3, #28]
 80046ca:	079b      	lsls	r3, r3, #30
        HAL_TIM_IC_CaptureCallback(htim);
 80046cc:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80046ce:	d17a      	bne.n	80047c6 <HAL_TIM_IRQHandler+0x1e6>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80046d0:	f7ff ff7e 	bl	80045d0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80046d4:	4620      	mov	r0, r4
 80046d6:	f7ff ff7f 	bl	80045d8 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80046da:	2200      	movs	r2, #0
 80046dc:	6823      	ldr	r3, [r4, #0]
 80046de:	7722      	strb	r2, [r4, #28]
 80046e0:	e794      	b.n	800460c <HAL_TIM_IRQHandler+0x2c>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80046e2:	f06f 0104 	mvn.w	r1, #4
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80046e6:	2202      	movs	r2, #2
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80046e8:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80046ea:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80046ec:	699b      	ldr	r3, [r3, #24]
 80046ee:	f413 7f40 	tst.w	r3, #768	; 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 80046f2:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80046f4:	d164      	bne.n	80047c0 <HAL_TIM_IRQHandler+0x1e0>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80046f6:	f7ff ff6b 	bl	80045d0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80046fa:	4620      	mov	r0, r4
 80046fc:	f7ff ff6c 	bl	80045d8 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004700:	2200      	movs	r2, #0
 8004702:	6823      	ldr	r3, [r4, #0]
 8004704:	7722      	strb	r2, [r4, #28]
 8004706:	e77b      	b.n	8004600 <HAL_TIM_IRQHandler+0x20>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004708:	f06f 0102 	mvn.w	r1, #2
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800470c:	2201      	movs	r2, #1
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800470e:	6119      	str	r1, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004710:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004712:	699b      	ldr	r3, [r3, #24]
 8004714:	0799      	lsls	r1, r3, #30
 8004716:	d150      	bne.n	80047ba <HAL_TIM_IRQHandler+0x1da>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004718:	f7ff ff5a 	bl	80045d0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800471c:	4620      	mov	r0, r4
 800471e:	f7ff ff5b 	bl	80045d8 <HAL_TIM_PWM_PulseFinishedCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004722:	2200      	movs	r2, #0
 8004724:	6823      	ldr	r3, [r4, #0]
 8004726:	7722      	strb	r2, [r4, #28]
 8004728:	e764      	b.n	80045f4 <HAL_TIM_IRQHandler+0x14>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 800472a:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
      HAL_TIMEx_TransitionErrorCallback(htim);
 800472e:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 8004730:	611a      	str	r2, [r3, #16]
}
 8004732:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_TransitionErrorCallback(htim);
 8004736:	f000 b8bd 	b.w	80048b4 <HAL_TIMEx_TransitionErrorCallback>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800473a:	f06f 0201 	mvn.w	r2, #1
 800473e:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8004740:	4620      	mov	r0, r4
 8004742:	f7fc fb8d 	bl	8000e60 <HAL_TIM_PeriodElapsedCallback>
 8004746:	6823      	ldr	r3, [r4, #0]
 8004748:	e76d      	b.n	8004626 <HAL_TIM_IRQHandler+0x46>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800474a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800474e:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8004750:	4620      	mov	r0, r4
 8004752:	f000 f8a5 	bl	80048a0 <HAL_TIMEx_BreakCallback>
 8004756:	6823      	ldr	r3, [r4, #0]
 8004758:	e76c      	b.n	8004634 <HAL_TIM_IRQHandler+0x54>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800475a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800475e:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 8004760:	4620      	mov	r0, r4
 8004762:	f000 f89f 	bl	80048a4 <HAL_TIMEx_Break2Callback>
 8004766:	6823      	ldr	r3, [r4, #0]
 8004768:	e76b      	b.n	8004642 <HAL_TIM_IRQHandler+0x62>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800476a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800476e:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8004770:	4620      	mov	r0, r4
 8004772:	f7ff ff33 	bl	80045dc <HAL_TIM_TriggerCallback>
 8004776:	6823      	ldr	r3, [r4, #0]
 8004778:	e76a      	b.n	8004650 <HAL_TIM_IRQHandler+0x70>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800477a:	f06f 0220 	mvn.w	r2, #32
 800477e:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 8004780:	4620      	mov	r0, r4
 8004782:	f000 f88b 	bl	800489c <HAL_TIMEx_CommutCallback>
 8004786:	6823      	ldr	r3, [r4, #0]
 8004788:	e769      	b.n	800465e <HAL_TIM_IRQHandler+0x7e>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 800478a:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 800478e:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_EncoderIndexCallback(htim);
 8004790:	4620      	mov	r0, r4
 8004792:	f000 f889 	bl	80048a8 <HAL_TIMEx_EncoderIndexCallback>
 8004796:	6823      	ldr	r3, [r4, #0]
 8004798:	e768      	b.n	800466c <HAL_TIM_IRQHandler+0x8c>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 800479a:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 800479e:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_DirectionChangeCallback(htim);
 80047a0:	4620      	mov	r0, r4
 80047a2:	f000 f883 	bl	80048ac <HAL_TIMEx_DirectionChangeCallback>
 80047a6:	6823      	ldr	r3, [r4, #0]
 80047a8:	e767      	b.n	800467a <HAL_TIM_IRQHandler+0x9a>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 80047aa:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 80047ae:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_IndexErrorCallback(htim);
 80047b0:	4620      	mov	r0, r4
 80047b2:	f000 f87d 	bl	80048b0 <HAL_TIMEx_IndexErrorCallback>
 80047b6:	6823      	ldr	r3, [r4, #0]
 80047b8:	e766      	b.n	8004688 <HAL_TIM_IRQHandler+0xa8>
          HAL_TIM_IC_CaptureCallback(htim);
 80047ba:	f7ff ff0b 	bl	80045d4 <HAL_TIM_IC_CaptureCallback>
 80047be:	e7b0      	b.n	8004722 <HAL_TIM_IRQHandler+0x142>
        HAL_TIM_IC_CaptureCallback(htim);
 80047c0:	f7ff ff08 	bl	80045d4 <HAL_TIM_IC_CaptureCallback>
 80047c4:	e79c      	b.n	8004700 <HAL_TIM_IRQHandler+0x120>
        HAL_TIM_IC_CaptureCallback(htim);
 80047c6:	f7ff ff05 	bl	80045d4 <HAL_TIM_IC_CaptureCallback>
 80047ca:	e786      	b.n	80046da <HAL_TIM_IRQHandler+0xfa>
        HAL_TIM_IC_CaptureCallback(htim);
 80047cc:	f7ff ff02 	bl	80045d4 <HAL_TIM_IC_CaptureCallback>
 80047d0:	e771      	b.n	80046b6 <HAL_TIM_IRQHandler+0xd6>
 80047d2:	bf00      	nop

080047d4 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80047d4:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80047d8:	2b01      	cmp	r3, #1
 80047da:	d058      	beq.n	800488e <HAL_TIMEx_MasterConfigSynchronization+0xba>
{
 80047dc:	b470      	push	{r4, r5, r6}

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80047de:	6802      	ldr	r2, [r0, #0]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80047e0:	4c2c      	ldr	r4, [pc, #176]	; (8004894 <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
  htim->State = HAL_TIM_STATE_BUSY;
 80047e2:	2302      	movs	r3, #2
 80047e4:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80047e8:	42a2      	cmp	r2, r4
  tmpcr2 = htim->Instance->CR2;
 80047ea:	6853      	ldr	r3, [r2, #4]
  tmpsmcr = htim->Instance->SMCR;
 80047ec:	6895      	ldr	r5, [r2, #8]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80047ee:	d042      	beq.n	8004876 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80047f0:	f504 6400 	add.w	r4, r4, #2048	; 0x800
 80047f4:	42a2      	cmp	r2, r4
 80047f6:	d032      	beq.n	800485e <HAL_TIMEx_MasterConfigSynchronization+0x8a>
 80047f8:	f504 54e0 	add.w	r4, r4, #7168	; 0x1c00
 80047fc:	42a2      	cmp	r2, r4
 80047fe:	d02e      	beq.n	800485e <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004800:	680c      	ldr	r4, [r1, #0]
  tmpcr2 &= ~TIM_CR2_MMS;
 8004802:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8004806:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800480a:	4323      	orrs	r3, r4

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800480c:	6053      	str	r3, [r2, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800480e:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 8004812:	d016      	beq.n	8004842 <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 8004814:	4b20      	ldr	r3, [pc, #128]	; (8004898 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8004816:	429a      	cmp	r2, r3
 8004818:	d013      	beq.n	8004842 <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 800481a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800481e:	429a      	cmp	r2, r3
 8004820:	d00f      	beq.n	8004842 <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 8004822:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004826:	429a      	cmp	r2, r3
 8004828:	d00b      	beq.n	8004842 <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 800482a:	f503 3394 	add.w	r3, r3, #75776	; 0x12800
 800482e:	429a      	cmp	r2, r3
 8004830:	d007      	beq.n	8004842 <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 8004832:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
 8004836:	429a      	cmp	r2, r3
 8004838:	d003      	beq.n	8004842 <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 800483a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800483e:	429a      	cmp	r2, r3
 8004840:	d104      	bne.n	800484c <HAL_TIMEx_MasterConfigSynchronization+0x78>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004842:	688b      	ldr	r3, [r1, #8]
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004844:	f025 0580 	bic.w	r5, r5, #128	; 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004848:	431d      	orrs	r5, r3

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800484a:	6095      	str	r5, [r2, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;

  __HAL_UNLOCK(htim);
 800484c:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 800484e:	2201      	movs	r2, #1
 8004850:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8004854:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
}
 8004858:	bc70      	pop	{r4, r5, r6}
  return HAL_OK;
 800485a:	4618      	mov	r0, r3
}
 800485c:	4770      	bx	lr
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800485e:	e9d1 4600 	ldrd	r4, r6, [r1]
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004862:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004866:	4333      	orrs	r3, r6
  tmpcr2 &= ~TIM_CR2_MMS;
 8004868:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 800486c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004870:	4323      	orrs	r3, r4
  htim->Instance->CR2 = tmpcr2;
 8004872:	6053      	str	r3, [r2, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004874:	e7cb      	b.n	800480e <HAL_TIMEx_MasterConfigSynchronization+0x3a>
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004876:	e9d1 4600 	ldrd	r4, r6, [r1]
    tmpcr2 &= ~TIM_CR2_MMS2;
 800487a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800487e:	4333      	orrs	r3, r6
  tmpcr2 &= ~TIM_CR2_MMS;
 8004880:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8004884:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004888:	4323      	orrs	r3, r4
  htim->Instance->CR2 = tmpcr2;
 800488a:	6053      	str	r3, [r2, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800488c:	e7d9      	b.n	8004842 <HAL_TIMEx_MasterConfigSynchronization+0x6e>
  __HAL_LOCK(htim);
 800488e:	2002      	movs	r0, #2
}
 8004890:	4770      	bx	lr
 8004892:	bf00      	nop
 8004894:	40012c00 	.word	0x40012c00
 8004898:	40000400 	.word	0x40000400

0800489c <HAL_TIMEx_CommutCallback>:
 800489c:	4770      	bx	lr
 800489e:	bf00      	nop

080048a0 <HAL_TIMEx_BreakCallback>:
 80048a0:	4770      	bx	lr
 80048a2:	bf00      	nop

080048a4 <HAL_TIMEx_Break2Callback>:
 80048a4:	4770      	bx	lr
 80048a6:	bf00      	nop

080048a8 <HAL_TIMEx_EncoderIndexCallback>:
 80048a8:	4770      	bx	lr
 80048aa:	bf00      	nop

080048ac <HAL_TIMEx_DirectionChangeCallback>:
 80048ac:	4770      	bx	lr
 80048ae:	bf00      	nop

080048b0 <HAL_TIMEx_IndexErrorCallback>:
 80048b0:	4770      	bx	lr
 80048b2:	bf00      	nop

080048b4 <HAL_TIMEx_TransitionErrorCallback>:
 80048b4:	4770      	bx	lr
 80048b6:	bf00      	nop

080048b8 <HAL_UART_Receive_IT>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80048b8:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
 80048bc:	2b20      	cmp	r3, #32
 80048be:	d149      	bne.n	8004954 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 80048c0:	2900      	cmp	r1, #0
 80048c2:	d045      	beq.n	8004950 <HAL_UART_Receive_IT+0x98>
 80048c4:	2a00      	cmp	r2, #0
 80048c6:	d043      	beq.n	8004950 <HAL_UART_Receive_IT+0x98>
    {
      return HAL_ERROR;
    }

    __HAL_LOCK(huart);
 80048c8:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 80048cc:	2b01      	cmp	r3, #1
 80048ce:	d041      	beq.n	8004954 <HAL_UART_Receive_IT+0x9c>
{
 80048d0:	b430      	push	{r4, r5}

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80048d2:	4b49      	ldr	r3, [pc, #292]	; (80049f8 <HAL_UART_Receive_IT+0x140>)
 80048d4:	6804      	ldr	r4, [r0, #0]
    __HAL_LOCK(huart);
 80048d6:	2501      	movs	r5, #1
 80048d8:	f880 5080 	strb.w	r5, [r0, #128]	; 0x80
    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80048dc:	429c      	cmp	r4, r3
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80048de:	f04f 0500 	mov.w	r5, #0
 80048e2:	66c5      	str	r5, [r0, #108]	; 0x6c
    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80048e4:	d006      	beq.n	80048f4 <HAL_UART_Receive_IT+0x3c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80048e6:	6863      	ldr	r3, [r4, #4]
 80048e8:	021b      	lsls	r3, r3, #8
 80048ea:	d503      	bpl.n	80048f4 <HAL_UART_Receive_IT+0x3c>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80048ec:	6823      	ldr	r3, [r4, #0]
 80048ee:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80048f2:	6023      	str	r3, [r4, #0]
  huart->RxXferSize  = Size;
  huart->RxXferCount = Size;
  huart->RxISR       = NULL;

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80048f4:	6883      	ldr	r3, [r0, #8]
  huart->pRxBuffPtr  = pData;
 80048f6:	6581      	str	r1, [r0, #88]	; 0x58
  UART_MASK_COMPUTATION(huart);
 80048f8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
  huart->RxISR       = NULL;
 80048fc:	f04f 0100 	mov.w	r1, #0
  huart->RxXferSize  = Size;
 8004900:	f8a0 205c 	strh.w	r2, [r0, #92]	; 0x5c
  huart->RxXferCount = Size;
 8004904:	f8a0 205e 	strh.w	r2, [r0, #94]	; 0x5e
  huart->RxISR       = NULL;
 8004908:	6701      	str	r1, [r0, #112]	; 0x70
  UART_MASK_COMPUTATION(huart);
 800490a:	d025      	beq.n	8004958 <HAL_UART_Receive_IT+0xa0>
 800490c:	2b00      	cmp	r3, #0
 800490e:	d138      	bne.n	8004982 <HAL_UART_Receive_IT+0xca>
 8004910:	6903      	ldr	r3, [r0, #16]
 8004912:	2b00      	cmp	r3, #0
 8004914:	d05e      	beq.n	80049d4 <HAL_UART_Receive_IT+0x11c>
 8004916:	237f      	movs	r3, #127	; 0x7f
 8004918:	f8a0 3060 	strh.w	r3, [r0, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800491c:	2100      	movs	r1, #0
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800491e:	2322      	movs	r3, #34	; 0x22
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004920:	f8c0 108c 	str.w	r1, [r0, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004924:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004928:	68a3      	ldr	r3, [r4, #8]

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800492a:	6e41      	ldr	r1, [r0, #100]	; 0x64
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800492c:	f043 0301 	orr.w	r3, r3, #1
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8004930:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004934:	60a3      	str	r3, [r4, #8]
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8004936:	d03a      	beq.n	80049ae <HAL_UART_Receive_IT+0xf6>
    {
      huart->RxISR = UART_RxISR_16BIT;
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8004938:	4b30      	ldr	r3, [pc, #192]	; (80049fc <HAL_UART_Receive_IT+0x144>)
 800493a:	6703      	str	r3, [r0, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 800493c:	2300      	movs	r3, #0
 800493e:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8004942:	6822      	ldr	r2, [r4, #0]
 8004944:	f442 7290 	orr.w	r2, r2, #288	; 0x120
    return (UART_Start_Receive_IT(huart, pData, Size));
 8004948:	4618      	mov	r0, r3
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800494a:	6022      	str	r2, [r4, #0]
}
 800494c:	bc30      	pop	{r4, r5}
 800494e:	4770      	bx	lr
      return HAL_ERROR;
 8004950:	2001      	movs	r0, #1
 8004952:	4770      	bx	lr
    return HAL_BUSY;
 8004954:	2002      	movs	r0, #2
}
 8004956:	4770      	bx	lr
  UART_MASK_COMPUTATION(huart);
 8004958:	6903      	ldr	r3, [r0, #16]
 800495a:	b9c3      	cbnz	r3, 800498e <HAL_UART_Receive_IT+0xd6>
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800495c:	2122      	movs	r1, #34	; 0x22
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800495e:	f8c0 308c 	str.w	r3, [r0, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004962:	f8c0 1088 	str.w	r1, [r0, #136]	; 0x88
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004966:	68a3      	ldr	r3, [r4, #8]
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8004968:	6e41      	ldr	r1, [r0, #100]	; 0x64
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800496a:	f043 0301 	orr.w	r3, r3, #1
 800496e:	f240 15ff 	movw	r5, #511	; 0x1ff
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8004972:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
 8004976:	f8a0 5060 	strh.w	r5, [r0, #96]	; 0x60
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800497a:	60a3      	str	r3, [r4, #8]
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800497c:	d035      	beq.n	80049ea <HAL_UART_Receive_IT+0x132>
      huart->RxISR = UART_RxISR_16BIT;
 800497e:	4b20      	ldr	r3, [pc, #128]	; (8004a00 <HAL_UART_Receive_IT+0x148>)
 8004980:	e7db      	b.n	800493a <HAL_UART_Receive_IT+0x82>
  UART_MASK_COMPUTATION(huart);
 8004982:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004986:	d029      	beq.n	80049dc <HAL_UART_Receive_IT+0x124>
 8004988:	f8a0 1060 	strh.w	r1, [r0, #96]	; 0x60
 800498c:	e7c6      	b.n	800491c <HAL_UART_Receive_IT+0x64>
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800498e:	2322      	movs	r3, #34	; 0x22
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004990:	f8c0 108c 	str.w	r1, [r0, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004994:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004998:	68a3      	ldr	r3, [r4, #8]
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800499a:	6e41      	ldr	r1, [r0, #100]	; 0x64
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800499c:	f043 0301 	orr.w	r3, r3, #1
 80049a0:	25ff      	movs	r5, #255	; 0xff
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 80049a2:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
 80049a6:	f8a0 5060 	strh.w	r5, [r0, #96]	; 0x60
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80049aa:	60a3      	str	r3, [r4, #8]
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 80049ac:	d1c4      	bne.n	8004938 <HAL_UART_Receive_IT+0x80>
 80049ae:	f8b0 3068 	ldrh.w	r3, [r0, #104]	; 0x68
 80049b2:	4293      	cmp	r3, r2
 80049b4:	d8c0      	bhi.n	8004938 <HAL_UART_Receive_IT+0x80>
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 80049b6:	4b13      	ldr	r3, [pc, #76]	; (8004a04 <HAL_UART_Receive_IT+0x14c>)
 80049b8:	6703      	str	r3, [r0, #112]	; 0x70
    __HAL_UNLOCK(huart);
 80049ba:	2300      	movs	r3, #0
 80049bc:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80049c0:	6822      	ldr	r2, [r4, #0]
 80049c2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80049c6:	6022      	str	r2, [r4, #0]
    SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80049c8:	68a2      	ldr	r2, [r4, #8]
 80049ca:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
    return (UART_Start_Receive_IT(huart, pData, Size));
 80049ce:	4618      	mov	r0, r3
    SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80049d0:	60a2      	str	r2, [r4, #8]
 80049d2:	e7bb      	b.n	800494c <HAL_UART_Receive_IT+0x94>
  UART_MASK_COMPUTATION(huart);
 80049d4:	23ff      	movs	r3, #255	; 0xff
 80049d6:	f8a0 3060 	strh.w	r3, [r0, #96]	; 0x60
 80049da:	e79f      	b.n	800491c <HAL_UART_Receive_IT+0x64>
 80049dc:	6903      	ldr	r3, [r0, #16]
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d099      	beq.n	8004916 <HAL_UART_Receive_IT+0x5e>
 80049e2:	233f      	movs	r3, #63	; 0x3f
 80049e4:	f8a0 3060 	strh.w	r3, [r0, #96]	; 0x60
 80049e8:	e798      	b.n	800491c <HAL_UART_Receive_IT+0x64>
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 80049ea:	f8b0 3068 	ldrh.w	r3, [r0, #104]	; 0x68
 80049ee:	4293      	cmp	r3, r2
 80049f0:	d8c5      	bhi.n	800497e <HAL_UART_Receive_IT+0xc6>
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 80049f2:	4b05      	ldr	r3, [pc, #20]	; (8004a08 <HAL_UART_Receive_IT+0x150>)
 80049f4:	e7e0      	b.n	80049b8 <HAL_UART_Receive_IT+0x100>
 80049f6:	bf00      	nop
 80049f8:	40008000 	.word	0x40008000
 80049fc:	08004cf9 	.word	0x08004cf9
 8004a00:	08004d79 	.word	0x08004d79
 8004a04:	08004df1 	.word	0x08004df1
 8004a08:	08004f65 	.word	0x08004f65

08004a0c <HAL_UART_TxCpltCallback>:
 8004a0c:	4770      	bx	lr
 8004a0e:	bf00      	nop

08004a10 <HAL_UART_ErrorCallback>:
 8004a10:	4770      	bx	lr
 8004a12:	bf00      	nop

08004a14 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004a14:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004a16:	6a80      	ldr	r0, [r0, #40]	; 0x28
  huart->RxXferCount = 0U;
 8004a18:	2300      	movs	r3, #0
 8004a1a:	f8a0 305e 	strh.w	r3, [r0, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8004a1e:	f8a0 3056 	strh.w	r3, [r0, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004a22:	f7ff fff5 	bl	8004a10 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004a26:	bd08      	pop	{r3, pc}

08004a28 <HAL_UARTEx_RxEventCallback>:
}
 8004a28:	4770      	bx	lr
 8004a2a:	bf00      	nop

08004a2c <HAL_UART_IRQHandler>:
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004a2c:	6802      	ldr	r2, [r0, #0]
 8004a2e:	69d3      	ldr	r3, [r2, #28]
{
 8004a30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004a34:	f640 060f 	movw	r6, #2063	; 0x80f
  if (errorflags == 0U)
 8004a38:	4233      	tst	r3, r6
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004a3a:	6815      	ldr	r5, [r2, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004a3c:	6891      	ldr	r1, [r2, #8]
{
 8004a3e:	4604      	mov	r4, r0
  if (errorflags == 0U)
 8004a40:	d027      	beq.n	8004a92 <HAL_UART_IRQHandler+0x66>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8004a42:	48aa      	ldr	r0, [pc, #680]	; (8004cec <HAL_UART_IRQHandler+0x2c0>)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8004a44:	4eaa      	ldr	r6, [pc, #680]	; (8004cf0 <HAL_UART_IRQHandler+0x2c4>)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8004a46:	4008      	ands	r0, r1
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8004a48:	402e      	ands	r6, r5
 8004a4a:	4306      	orrs	r6, r0
 8004a4c:	d153      	bne.n	8004af6 <HAL_UART_IRQHandler+0xca>
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004a4e:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8004a50:	2801      	cmp	r0, #1
 8004a52:	d02c      	beq.n	8004aae <HAL_UART_IRQHandler+0x82>
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004a54:	02de      	lsls	r6, r3, #11
 8004a56:	d502      	bpl.n	8004a5e <HAL_UART_IRQHandler+0x32>
 8004a58:	0248      	lsls	r0, r1, #9
 8004a5a:	f100 80d7 	bmi.w	8004c0c <HAL_UART_IRQHandler+0x1e0>
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8004a5e:	061f      	lsls	r7, r3, #24
 8004a60:	d506      	bpl.n	8004a70 <HAL_UART_IRQHandler+0x44>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8004a62:	f401 0100 	and.w	r1, r1, #8388608	; 0x800000
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8004a66:	f005 0080 	and.w	r0, r5, #128	; 0x80
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8004a6a:	4301      	orrs	r1, r0
 8004a6c:	f040 80c6 	bne.w	8004bfc <HAL_UART_IRQHandler+0x1d0>
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004a70:	065e      	lsls	r6, r3, #25
 8004a72:	d502      	bpl.n	8004a7a <HAL_UART_IRQHandler+0x4e>
 8004a74:	0668      	lsls	r0, r5, #25
 8004a76:	f100 80d5 	bmi.w	8004c24 <HAL_UART_IRQHandler+0x1f8>
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8004a7a:	0219      	lsls	r1, r3, #8
 8004a7c:	d502      	bpl.n	8004a84 <HAL_UART_IRQHandler+0x58>
 8004a7e:	006a      	lsls	r2, r5, #1
 8004a80:	f100 80dd 	bmi.w	8004c3e <HAL_UART_IRQHandler+0x212>
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8004a84:	01db      	lsls	r3, r3, #7
 8004a86:	d502      	bpl.n	8004a8e <HAL_UART_IRQHandler+0x62>
 8004a88:	2d00      	cmp	r5, #0
 8004a8a:	f2c0 810b 	blt.w	8004ca4 <HAL_UART_IRQHandler+0x278>
}
 8004a8e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8004a92:	069e      	lsls	r6, r3, #26
 8004a94:	d5db      	bpl.n	8004a4e <HAL_UART_IRQHandler+0x22>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8004a96:	f005 0620 	and.w	r6, r5, #32
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8004a9a:	f001 5780 	and.w	r7, r1, #268435456	; 0x10000000
 8004a9e:	433e      	orrs	r6, r7
 8004aa0:	d0d5      	beq.n	8004a4e <HAL_UART_IRQHandler+0x22>
      if (huart->RxISR != NULL)
 8004aa2:	6f03      	ldr	r3, [r0, #112]	; 0x70
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d0f2      	beq.n	8004a8e <HAL_UART_IRQHandler+0x62>
}
 8004aa8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004aac:	4718      	bx	r3
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8004aae:	06d8      	lsls	r0, r3, #27
 8004ab0:	d5d0      	bpl.n	8004a54 <HAL_UART_IRQHandler+0x28>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8004ab2:	06ef      	lsls	r7, r5, #27
 8004ab4:	d5ce      	bpl.n	8004a54 <HAL_UART_IRQHandler+0x28>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004ab6:	2310      	movs	r3, #16
 8004ab8:	6213      	str	r3, [r2, #32]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004aba:	6893      	ldr	r3, [r2, #8]
 8004abc:	f013 0340 	ands.w	r3, r3, #64	; 0x40
 8004ac0:	f000 80c9 	beq.w	8004c56 <HAL_UART_IRQHandler+0x22a>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004ac4:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 8004ac6:	6801      	ldr	r1, [r0, #0]
 8004ac8:	684b      	ldr	r3, [r1, #4]
 8004aca:	b29b      	uxth	r3, r3
      if ((nb_remaining_rx_data > 0U)
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d0de      	beq.n	8004a8e <HAL_UART_IRQHandler+0x62>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004ad0:	f8b4 505c 	ldrh.w	r5, [r4, #92]	; 0x5c
 8004ad4:	429d      	cmp	r5, r3
 8004ad6:	d9da      	bls.n	8004a8e <HAL_UART_IRQHandler+0x62>
        huart->RxXferCount = nb_remaining_rx_data;
 8004ad8:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8004adc:	680b      	ldr	r3, [r1, #0]
 8004ade:	f013 0320 	ands.w	r3, r3, #32
 8004ae2:	f000 80ea 	beq.w	8004cba <HAL_UART_IRQHandler+0x28e>
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004ae6:	f8b4 105e 	ldrh.w	r1, [r4, #94]	; 0x5e
 8004aea:	1a69      	subs	r1, r5, r1
 8004aec:	b289      	uxth	r1, r1
 8004aee:	4620      	mov	r0, r4
 8004af0:	f7ff ff9a 	bl	8004a28 <HAL_UARTEx_RxEventCallback>
 8004af4:	e7cb      	b.n	8004a8e <HAL_UART_IRQHandler+0x62>
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004af6:	07df      	lsls	r7, r3, #31
 8004af8:	d509      	bpl.n	8004b0e <HAL_UART_IRQHandler+0xe2>
 8004afa:	05ee      	lsls	r6, r5, #23
 8004afc:	d507      	bpl.n	8004b0e <HAL_UART_IRQHandler+0xe2>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004afe:	2601      	movs	r6, #1
 8004b00:	6216      	str	r6, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004b02:	f8d4 608c 	ldr.w	r6, [r4, #140]	; 0x8c
 8004b06:	f046 0601 	orr.w	r6, r6, #1
 8004b0a:	f8c4 608c 	str.w	r6, [r4, #140]	; 0x8c
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004b0e:	079f      	lsls	r7, r3, #30
 8004b10:	d567      	bpl.n	8004be2 <HAL_UART_IRQHandler+0x1b6>
 8004b12:	07ce      	lsls	r6, r1, #31
 8004b14:	d509      	bpl.n	8004b2a <HAL_UART_IRQHandler+0xfe>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004b16:	2602      	movs	r6, #2
 8004b18:	6216      	str	r6, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004b1a:	f8d4 608c 	ldr.w	r6, [r4, #140]	; 0x8c
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004b1e:	075f      	lsls	r7, r3, #29
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004b20:	f046 0604 	orr.w	r6, r6, #4
 8004b24:	f8c4 608c 	str.w	r6, [r4, #140]	; 0x8c
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004b28:	d45f      	bmi.n	8004bea <HAL_UART_IRQHandler+0x1be>
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004b2a:	071e      	lsls	r6, r3, #28
 8004b2c:	d50b      	bpl.n	8004b46 <HAL_UART_IRQHandler+0x11a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8004b2e:	f005 0620 	and.w	r6, r5, #32
 8004b32:	4330      	orrs	r0, r6
 8004b34:	d007      	beq.n	8004b46 <HAL_UART_IRQHandler+0x11a>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004b36:	2008      	movs	r0, #8
 8004b38:	6210      	str	r0, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004b3a:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
 8004b3e:	f040 0008 	orr.w	r0, r0, #8
 8004b42:	f8c4 008c 	str.w	r0, [r4, #140]	; 0x8c
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004b46:	0518      	lsls	r0, r3, #20
 8004b48:	d50a      	bpl.n	8004b60 <HAL_UART_IRQHandler+0x134>
 8004b4a:	016f      	lsls	r7, r5, #5
 8004b4c:	d508      	bpl.n	8004b60 <HAL_UART_IRQHandler+0x134>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004b4e:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8004b52:	6210      	str	r0, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004b54:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
 8004b58:	f040 0020 	orr.w	r0, r0, #32
 8004b5c:	f8c4 008c 	str.w	r0, [r4, #140]	; 0x8c
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004b60:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
 8004b64:	2800      	cmp	r0, #0
 8004b66:	d092      	beq.n	8004a8e <HAL_UART_IRQHandler+0x62>
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8004b68:	069e      	lsls	r6, r3, #26
 8004b6a:	d506      	bpl.n	8004b7a <HAL_UART_IRQHandler+0x14e>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8004b6c:	f005 0520 	and.w	r5, r5, #32
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8004b70:	f001 5180 	and.w	r1, r1, #268435456	; 0x10000000
 8004b74:	ea55 0301 	orrs.w	r3, r5, r1
 8004b78:	d166      	bne.n	8004c48 <HAL_UART_IRQHandler+0x21c>
      errorcode = huart->ErrorCode;
 8004b7a:	f8d4 508c 	ldr.w	r5, [r4, #140]	; 0x8c
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004b7e:	6893      	ldr	r3, [r2, #8]
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8004b80:	f005 0528 	and.w	r5, r5, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004b84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b88:	431d      	orrs	r5, r3
 8004b8a:	f000 8090 	beq.w	8004cae <HAL_UART_IRQHandler+0x282>
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004b8e:	6813      	ldr	r3, [r2, #0]
 8004b90:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004b94:	6013      	str	r3, [r2, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004b96:	6893      	ldr	r3, [r2, #8]
 8004b98:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004b9c:	f023 0301 	bic.w	r3, r3, #1
 8004ba0:	6093      	str	r3, [r2, #8]
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004ba2:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8004ba4:	2b01      	cmp	r3, #1
 8004ba6:	d103      	bne.n	8004bb0 <HAL_UART_IRQHandler+0x184>
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004ba8:	6813      	ldr	r3, [r2, #0]
 8004baa:	f023 0310 	bic.w	r3, r3, #16
 8004bae:	6013      	str	r3, [r2, #0]
  huart->RxState = HAL_UART_STATE_READY;
 8004bb0:	2120      	movs	r1, #32
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004bb2:	2300      	movs	r3, #0
  huart->RxState = HAL_UART_STATE_READY;
 8004bb4:	f8c4 1088 	str.w	r1, [r4, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004bb8:	66e3      	str	r3, [r4, #108]	; 0x6c
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004bba:	6891      	ldr	r1, [r2, #8]
  huart->RxISR = NULL;
 8004bbc:	6723      	str	r3, [r4, #112]	; 0x70
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004bbe:	064d      	lsls	r5, r1, #25
 8004bc0:	d52c      	bpl.n	8004c1c <HAL_UART_IRQHandler+0x1f0>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004bc2:	6893      	ldr	r3, [r2, #8]
          if (huart->hdmarx != NULL)
 8004bc4:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004bc6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004bca:	6093      	str	r3, [r2, #8]
          if (huart->hdmarx != NULL)
 8004bcc:	b330      	cbz	r0, 8004c1c <HAL_UART_IRQHandler+0x1f0>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004bce:	4b49      	ldr	r3, [pc, #292]	; (8004cf4 <HAL_UART_IRQHandler+0x2c8>)
 8004bd0:	6383      	str	r3, [r0, #56]	; 0x38
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004bd2:	f7fe fc51 	bl	8003478 <HAL_DMA_Abort_IT>
 8004bd6:	2800      	cmp	r0, #0
 8004bd8:	f43f af59 	beq.w	8004a8e <HAL_UART_IRQHandler+0x62>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004bdc:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 8004bde:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8004be0:	e762      	b.n	8004aa8 <HAL_UART_IRQHandler+0x7c>
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004be2:	075e      	lsls	r6, r3, #29
 8004be4:	d5a1      	bpl.n	8004b2a <HAL_UART_IRQHandler+0xfe>
 8004be6:	07cf      	lsls	r7, r1, #31
 8004be8:	d59f      	bpl.n	8004b2a <HAL_UART_IRQHandler+0xfe>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004bea:	2604      	movs	r6, #4
 8004bec:	6216      	str	r6, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004bee:	f8d4 608c 	ldr.w	r6, [r4, #140]	; 0x8c
 8004bf2:	f046 0602 	orr.w	r6, r6, #2
 8004bf6:	f8c4 608c 	str.w	r6, [r4, #140]	; 0x8c
 8004bfa:	e796      	b.n	8004b2a <HAL_UART_IRQHandler+0xfe>
    if (huart->TxISR != NULL)
 8004bfc:	6f63      	ldr	r3, [r4, #116]	; 0x74
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	f43f af45 	beq.w	8004a8e <HAL_UART_IRQHandler+0x62>
      huart->TxISR(huart);
 8004c04:	4620      	mov	r0, r4
}
 8004c06:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      huart->TxISR(huart);
 8004c0a:	4718      	bx	r3
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004c0c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
    HAL_UARTEx_WakeupCallback(huart);
 8004c10:	4620      	mov	r0, r4
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004c12:	6213      	str	r3, [r2, #32]
}
 8004c14:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    HAL_UARTEx_WakeupCallback(huart);
 8004c18:	f000 bcee 	b.w	80055f8 <HAL_UARTEx_WakeupCallback>
            HAL_UART_ErrorCallback(huart);
 8004c1c:	4620      	mov	r0, r4
 8004c1e:	f7ff fef7 	bl	8004a10 <HAL_UART_ErrorCallback>
 8004c22:	e734      	b.n	8004a8e <HAL_UART_IRQHandler+0x62>
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004c24:	6813      	ldr	r3, [r2, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004c26:	2520      	movs	r5, #32
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004c28:	f023 0340 	bic.w	r3, r3, #64	; 0x40

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004c2c:	2100      	movs	r1, #0
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004c2e:	6013      	str	r3, [r2, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004c30:	4620      	mov	r0, r4
  huart->gState = HAL_UART_STATE_READY;
 8004c32:	f8c4 5084 	str.w	r5, [r4, #132]	; 0x84
  huart->TxISR = NULL;
 8004c36:	6761      	str	r1, [r4, #116]	; 0x74
  HAL_UART_TxCpltCallback(huart);
 8004c38:	f7ff fee8 	bl	8004a0c <HAL_UART_TxCpltCallback>
    return;
 8004c3c:	e727      	b.n	8004a8e <HAL_UART_IRQHandler+0x62>
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8004c3e:	4620      	mov	r0, r4
}
 8004c40:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8004c44:	f000 bcdc 	b.w	8005600 <HAL_UARTEx_TxFifoEmptyCallback>
        if (huart->RxISR != NULL)
 8004c48:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d095      	beq.n	8004b7a <HAL_UART_IRQHandler+0x14e>
          huart->RxISR(huart);
 8004c4e:	4620      	mov	r0, r4
 8004c50:	4798      	blx	r3
 8004c52:	6822      	ldr	r2, [r4, #0]
 8004c54:	e791      	b.n	8004b7a <HAL_UART_IRQHandler+0x14e>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004c56:	f8b4 005e 	ldrh.w	r0, [r4, #94]	; 0x5e
      if ((huart->RxXferCount > 0U)
 8004c5a:	f8b4 105e 	ldrh.w	r1, [r4, #94]	; 0x5e
 8004c5e:	b289      	uxth	r1, r1
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004c60:	b280      	uxth	r0, r0
      if ((huart->RxXferCount > 0U)
 8004c62:	2900      	cmp	r1, #0
 8004c64:	f43f af13 	beq.w	8004a8e <HAL_UART_IRQHandler+0x62>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004c68:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 8004c6c:	1a08      	subs	r0, r1, r0
 8004c6e:	b281      	uxth	r1, r0
          && (nb_rx_data > 0U))
 8004c70:	2900      	cmp	r1, #0
 8004c72:	f43f af0c 	beq.w	8004a8e <HAL_UART_IRQHandler+0x62>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004c76:	6810      	ldr	r0, [r2, #0]
 8004c78:	f420 7090 	bic.w	r0, r0, #288	; 0x120
 8004c7c:	6010      	str	r0, [r2, #0]
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004c7e:	6890      	ldr	r0, [r2, #8]
 8004c80:	f020 5080 	bic.w	r0, r0, #268435456	; 0x10000000
 8004c84:	f020 0001 	bic.w	r0, r0, #1
        huart->RxState = HAL_UART_STATE_READY;
 8004c88:	2520      	movs	r5, #32
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004c8a:	6090      	str	r0, [r2, #8]
        huart->RxState = HAL_UART_STATE_READY;
 8004c8c:	f8c4 5088 	str.w	r5, [r4, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c90:	66e3      	str	r3, [r4, #108]	; 0x6c
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004c92:	6810      	ldr	r0, [r2, #0]
        huart->RxISR = NULL;
 8004c94:	6723      	str	r3, [r4, #112]	; 0x70
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004c96:	f020 0310 	bic.w	r3, r0, #16
 8004c9a:	6013      	str	r3, [r2, #0]
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004c9c:	4620      	mov	r0, r4
 8004c9e:	f7ff fec3 	bl	8004a28 <HAL_UARTEx_RxEventCallback>
 8004ca2:	e6f4      	b.n	8004a8e <HAL_UART_IRQHandler+0x62>
    HAL_UARTEx_RxFifoFullCallback(huart);
 8004ca4:	4620      	mov	r0, r4
}
 8004ca6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    HAL_UARTEx_RxFifoFullCallback(huart);
 8004caa:	f000 bca7 	b.w	80055fc <HAL_UARTEx_RxFifoFullCallback>
        HAL_UART_ErrorCallback(huart);
 8004cae:	4620      	mov	r0, r4
 8004cb0:	f7ff feae 	bl	8004a10 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004cb4:	f8c4 508c 	str.w	r5, [r4, #140]	; 0x8c
 8004cb8:	e6e9      	b.n	8004a8e <HAL_UART_IRQHandler+0x62>
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004cba:	6811      	ldr	r1, [r2, #0]
 8004cbc:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 8004cc0:	6011      	str	r1, [r2, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004cc2:	6891      	ldr	r1, [r2, #8]
 8004cc4:	f021 0101 	bic.w	r1, r1, #1
 8004cc8:	6091      	str	r1, [r2, #8]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004cca:	6891      	ldr	r1, [r2, #8]
          huart->RxState = HAL_UART_STATE_READY;
 8004ccc:	2520      	movs	r5, #32
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004cce:	f021 0140 	bic.w	r1, r1, #64	; 0x40
 8004cd2:	6091      	str	r1, [r2, #8]
          huart->RxState = HAL_UART_STATE_READY;
 8004cd4:	f8c4 5088 	str.w	r5, [r4, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004cd8:	66e3      	str	r3, [r4, #108]	; 0x6c
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004cda:	6813      	ldr	r3, [r2, #0]
 8004cdc:	f023 0310 	bic.w	r3, r3, #16
 8004ce0:	6013      	str	r3, [r2, #0]
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004ce2:	f7fe fb8f 	bl	8003404 <HAL_DMA_Abort>
 8004ce6:	f8b4 505c 	ldrh.w	r5, [r4, #92]	; 0x5c
 8004cea:	e6fc      	b.n	8004ae6 <HAL_UART_IRQHandler+0xba>
 8004cec:	10000001 	.word	0x10000001
 8004cf0:	04000120 	.word	0x04000120
 8004cf4:	08004a15 	.word	0x08004a15

08004cf8 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8004cf8:	b538      	push	{r3, r4, r5, lr}
  uint16_t uhMask = huart->Mask;
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004cfa:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
 8004cfe:	2b22      	cmp	r3, #34	; 0x22
{
 8004d00:	4604      	mov	r4, r0
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004d02:	d005      	beq.n	8004d10 <UART_RxISR_8BIT+0x18>
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004d04:	6802      	ldr	r2, [r0, #0]
 8004d06:	6993      	ldr	r3, [r2, #24]
 8004d08:	f043 0308 	orr.w	r3, r3, #8
 8004d0c:	6193      	str	r3, [r2, #24]
  }
}
 8004d0e:	bd38      	pop	{r3, r4, r5, pc}
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004d10:	6803      	ldr	r3, [r0, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8004d12:	f890 1060 	ldrb.w	r1, [r0, #96]	; 0x60
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004d16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8004d18:	6d82      	ldr	r2, [r0, #88]	; 0x58
 8004d1a:	400b      	ands	r3, r1
 8004d1c:	7013      	strb	r3, [r2, #0]
    huart->RxXferCount--;
 8004d1e:	f8b0 305e 	ldrh.w	r3, [r0, #94]	; 0x5e
    huart->pRxBuffPtr++;
 8004d22:	6d82      	ldr	r2, [r0, #88]	; 0x58
    huart->RxXferCount--;
 8004d24:	3b01      	subs	r3, #1
 8004d26:	b29b      	uxth	r3, r3
 8004d28:	f8a0 305e 	strh.w	r3, [r0, #94]	; 0x5e
    if (huart->RxXferCount == 0U)
 8004d2c:	f8b0 305e 	ldrh.w	r3, [r0, #94]	; 0x5e
    huart->pRxBuffPtr++;
 8004d30:	3201      	adds	r2, #1
    if (huart->RxXferCount == 0U)
 8004d32:	b29b      	uxth	r3, r3
    huart->pRxBuffPtr++;
 8004d34:	6582      	str	r2, [r0, #88]	; 0x58
    if (huart->RxXferCount == 0U)
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d1e9      	bne.n	8004d0e <UART_RxISR_8BIT+0x16>
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004d3a:	6802      	ldr	r2, [r0, #0]
 8004d3c:	6811      	ldr	r1, [r2, #0]
 8004d3e:	f421 7190 	bic.w	r1, r1, #288	; 0x120
 8004d42:	6011      	str	r1, [r2, #0]
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d44:	6891      	ldr	r1, [r2, #8]
      huart->RxState = HAL_UART_STATE_READY;
 8004d46:	2520      	movs	r5, #32
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d48:	f021 0101 	bic.w	r1, r1, #1
 8004d4c:	6091      	str	r1, [r2, #8]
      huart->RxState = HAL_UART_STATE_READY;
 8004d4e:	f8c0 5088 	str.w	r5, [r0, #136]	; 0x88
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004d52:	6ec1      	ldr	r1, [r0, #108]	; 0x6c
      huart->RxISR = NULL;
 8004d54:	6703      	str	r3, [r0, #112]	; 0x70
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004d56:	2901      	cmp	r1, #1
 8004d58:	d004      	beq.n	8004d64 <UART_RxISR_8BIT+0x6c>
        HAL_UART_RxCpltCallback(huart);
 8004d5a:	f7fc fba1 	bl	80014a0 <HAL_UART_RxCpltCallback>
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d5e:	2300      	movs	r3, #0
 8004d60:	66e3      	str	r3, [r4, #108]	; 0x6c
}
 8004d62:	bd38      	pop	{r3, r4, r5, pc}
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004d64:	6813      	ldr	r3, [r2, #0]
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004d66:	f8b0 105c 	ldrh.w	r1, [r0, #92]	; 0x5c
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004d6a:	f023 0310 	bic.w	r3, r3, #16
 8004d6e:	6013      	str	r3, [r2, #0]
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004d70:	f7ff fe5a 	bl	8004a28 <HAL_UARTEx_RxEventCallback>
 8004d74:	e7f3      	b.n	8004d5e <UART_RxISR_8BIT+0x66>
 8004d76:	bf00      	nop

08004d78 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8004d78:	b538      	push	{r3, r4, r5, lr}
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004d7a:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004d7e:	6802      	ldr	r2, [r0, #0]
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004d80:	2b22      	cmp	r3, #34	; 0x22
{
 8004d82:	4604      	mov	r4, r0
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004d84:	d004      	beq.n	8004d90 <UART_RxISR_16BIT+0x18>
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004d86:	6993      	ldr	r3, [r2, #24]
 8004d88:	f043 0308 	orr.w	r3, r3, #8
 8004d8c:	6193      	str	r3, [r2, #24]
  }
}
 8004d8e:	bd38      	pop	{r3, r4, r5, pc}
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004d90:	6a53      	ldr	r3, [r2, #36]	; 0x24
    *tmp = (uint16_t)(uhdata & uhMask);
 8004d92:	f8b0 5060 	ldrh.w	r5, [r0, #96]	; 0x60
 8004d96:	6d81      	ldr	r1, [r0, #88]	; 0x58
 8004d98:	402b      	ands	r3, r5
 8004d9a:	f821 3b02 	strh.w	r3, [r1], #2
    huart->RxXferCount--;
 8004d9e:	f8b0 305e 	ldrh.w	r3, [r0, #94]	; 0x5e
    huart->pRxBuffPtr += 2U;
 8004da2:	6581      	str	r1, [r0, #88]	; 0x58
    huart->RxXferCount--;
 8004da4:	3b01      	subs	r3, #1
 8004da6:	b29b      	uxth	r3, r3
 8004da8:	f8a0 305e 	strh.w	r3, [r0, #94]	; 0x5e
    if (huart->RxXferCount == 0U)
 8004dac:	f8b0 305e 	ldrh.w	r3, [r0, #94]	; 0x5e
 8004db0:	b29b      	uxth	r3, r3
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d1eb      	bne.n	8004d8e <UART_RxISR_16BIT+0x16>
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004db6:	6811      	ldr	r1, [r2, #0]
 8004db8:	f421 7190 	bic.w	r1, r1, #288	; 0x120
 8004dbc:	6011      	str	r1, [r2, #0]
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004dbe:	6891      	ldr	r1, [r2, #8]
      huart->RxState = HAL_UART_STATE_READY;
 8004dc0:	2520      	movs	r5, #32
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004dc2:	f021 0101 	bic.w	r1, r1, #1
 8004dc6:	6091      	str	r1, [r2, #8]
      huart->RxState = HAL_UART_STATE_READY;
 8004dc8:	f8c0 5088 	str.w	r5, [r0, #136]	; 0x88
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004dcc:	6ec1      	ldr	r1, [r0, #108]	; 0x6c
      huart->RxISR = NULL;
 8004dce:	6703      	str	r3, [r0, #112]	; 0x70
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004dd0:	2901      	cmp	r1, #1
 8004dd2:	d004      	beq.n	8004dde <UART_RxISR_16BIT+0x66>
        HAL_UART_RxCpltCallback(huart);
 8004dd4:	f7fc fb64 	bl	80014a0 <HAL_UART_RxCpltCallback>
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004dd8:	2300      	movs	r3, #0
 8004dda:	66e3      	str	r3, [r4, #108]	; 0x6c
}
 8004ddc:	bd38      	pop	{r3, r4, r5, pc}
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004dde:	6813      	ldr	r3, [r2, #0]
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004de0:	f8b0 105c 	ldrh.w	r1, [r0, #92]	; 0x5c
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004de4:	f023 0310 	bic.w	r3, r3, #16
 8004de8:	6013      	str	r3, [r2, #0]
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004dea:	f7ff fe1d 	bl	8004a28 <HAL_UARTEx_RxEventCallback>
 8004dee:	e7f3      	b.n	8004dd8 <UART_RxISR_16BIT+0x60>

08004df0 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8004df0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint16_t  uhMask = huart->Mask;
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8004df4:	6803      	ldr	r3, [r0, #0]
 8004df6:	69d9      	ldr	r1, [r3, #28]
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8004df8:	681f      	ldr	r7, [r3, #0]
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8004dfa:	689e      	ldr	r6, [r3, #8]

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004dfc:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
 8004e00:	2a22      	cmp	r2, #34	; 0x22
 8004e02:	d005      	beq.n	8004e10 <UART_RxISR_8BIT_FIFOEN+0x20>
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004e04:	699a      	ldr	r2, [r3, #24]
 8004e06:	f042 0208 	orr.w	r2, r2, #8
 8004e0a:	619a      	str	r2, [r3, #24]
  }
}
 8004e0c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8004e10:	f8b0 2068 	ldrh.w	r2, [r0, #104]	; 0x68
 8004e14:	4604      	mov	r4, r0
 8004e16:	2a00      	cmp	r2, #0
 8004e18:	f000 809c 	beq.w	8004f54 <UART_RxISR_8BIT_FIFOEN+0x164>
 8004e1c:	068a      	lsls	r2, r1, #26
 8004e1e:	f140 8082 	bpl.w	8004f26 <UART_RxISR_8BIT_FIFOEN+0x136>
 8004e22:	f890 5060 	ldrb.w	r5, [r0, #96]	; 0x60
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004e26:	f8df 9138 	ldr.w	r9, [pc, #312]	; 8004f60 <UART_RxISR_8BIT_FIFOEN+0x170>
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004e2a:	f407 7780 	and.w	r7, r7, #256	; 0x100
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004e2e:	f006 0601 	and.w	r6, r6, #1
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e32:	f04f 0800 	mov.w	r8, #0
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004e36:	f04f 0a04 	mov.w	sl, #4
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004e3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8004e3c:	6da2      	ldr	r2, [r4, #88]	; 0x58
 8004e3e:	402b      	ands	r3, r5
 8004e40:	7013      	strb	r3, [r2, #0]
      huart->RxXferCount--;
 8004e42:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8004e46:	6821      	ldr	r1, [r4, #0]
      huart->pRxBuffPtr++;
 8004e48:	6da2      	ldr	r2, [r4, #88]	; 0x58
      huart->RxXferCount--;
 8004e4a:	3b01      	subs	r3, #1
 8004e4c:	b29b      	uxth	r3, r3
 8004e4e:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8004e52:	f8d1 b01c 	ldr.w	fp, [r1, #28]
      huart->pRxBuffPtr++;
 8004e56:	3201      	adds	r2, #1
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8004e58:	f01b 0f07 	tst.w	fp, #7
      huart->pRxBuffPtr++;
 8004e5c:	65a2      	str	r2, [r4, #88]	; 0x58
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8004e5e:	d026      	beq.n	8004eae <UART_RxISR_8BIT_FIFOEN+0xbe>
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004e60:	f01b 0f01 	tst.w	fp, #1
 8004e64:	d008      	beq.n	8004e78 <UART_RxISR_8BIT_FIFOEN+0x88>
 8004e66:	b13f      	cbz	r7, 8004e78 <UART_RxISR_8BIT_FIFOEN+0x88>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004e68:	2301      	movs	r3, #1
 8004e6a:	620b      	str	r3, [r1, #32]
          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004e6c:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8004e70:	f043 0301 	orr.w	r3, r3, #1
 8004e74:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004e78:	f01b 0f02 	tst.w	fp, #2
 8004e7c:	d035      	beq.n	8004eea <UART_RxISR_8BIT_FIFOEN+0xfa>
 8004e7e:	b196      	cbz	r6, 8004ea6 <UART_RxISR_8BIT_FIFOEN+0xb6>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004e80:	2302      	movs	r3, #2
 8004e82:	620b      	str	r3, [r1, #32]
          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004e84:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004e88:	f01b 0f04 	tst.w	fp, #4
          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004e8c:	f043 0304 	orr.w	r3, r3, #4
 8004e90:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004e94:	d007      	beq.n	8004ea6 <UART_RxISR_8BIT_FIFOEN+0xb6>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004e96:	f8c1 a020 	str.w	sl, [r1, #32]
          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004e9a:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8004e9e:	f043 0302 	orr.w	r3, r3, #2
 8004ea2:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004ea6:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d135      	bne.n	8004f1a <UART_RxISR_8BIT_FIFOEN+0x12a>
      if (huart->RxXferCount == 0U)
 8004eae:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 8004eb2:	b29b      	uxth	r3, r3
 8004eb4:	b9a3      	cbnz	r3, 8004ee0 <UART_RxISR_8BIT_FIFOEN+0xf0>
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004eb6:	6822      	ldr	r2, [r4, #0]
 8004eb8:	6811      	ldr	r1, [r2, #0]
 8004eba:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 8004ebe:	6011      	str	r1, [r2, #0]
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004ec0:	6891      	ldr	r1, [r2, #8]
        huart->RxState = HAL_UART_STATE_READY;
 8004ec2:	2020      	movs	r0, #32
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004ec4:	ea01 0109 	and.w	r1, r1, r9
 8004ec8:	6091      	str	r1, [r2, #8]
        huart->RxState = HAL_UART_STATE_READY;
 8004eca:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004ece:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
        huart->RxISR = NULL;
 8004ed0:	6723      	str	r3, [r4, #112]	; 0x70
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004ed2:	2901      	cmp	r1, #1
 8004ed4:	d017      	beq.n	8004f06 <UART_RxISR_8BIT_FIFOEN+0x116>
          HAL_UART_RxCpltCallback(huart);
 8004ed6:	4620      	mov	r0, r4
 8004ed8:	f7fc fae2 	bl	80014a0 <HAL_UART_RxCpltCallback>
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004edc:	f8c4 806c 	str.w	r8, [r4, #108]	; 0x6c
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8004ee0:	f01b 0f20 	tst.w	fp, #32
 8004ee4:	d01f      	beq.n	8004f26 <UART_RxISR_8BIT_FIFOEN+0x136>
 8004ee6:	6823      	ldr	r3, [r4, #0]
 8004ee8:	e7a7      	b.n	8004e3a <UART_RxISR_8BIT_FIFOEN+0x4a>
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004eea:	f01b 0f04 	tst.w	fp, #4
 8004eee:	d0da      	beq.n	8004ea6 <UART_RxISR_8BIT_FIFOEN+0xb6>
 8004ef0:	2e00      	cmp	r6, #0
 8004ef2:	d0d8      	beq.n	8004ea6 <UART_RxISR_8BIT_FIFOEN+0xb6>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004ef4:	f8c1 a020 	str.w	sl, [r1, #32]
          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004ef8:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8004efc:	f043 0302 	orr.w	r3, r3, #2
 8004f00:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
 8004f04:	e7cf      	b.n	8004ea6 <UART_RxISR_8BIT_FIFOEN+0xb6>
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004f06:	6813      	ldr	r3, [r2, #0]
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004f08:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004f0c:	f023 0310 	bic.w	r3, r3, #16
 8004f10:	6013      	str	r3, [r2, #0]
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004f12:	4620      	mov	r0, r4
 8004f14:	f7ff fd88 	bl	8004a28 <HAL_UARTEx_RxEventCallback>
 8004f18:	e7e0      	b.n	8004edc <UART_RxISR_8BIT_FIFOEN+0xec>
          HAL_UART_ErrorCallback(huart);
 8004f1a:	4620      	mov	r0, r4
 8004f1c:	f7ff fd78 	bl	8004a10 <HAL_UART_ErrorCallback>
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f20:	f8c4 808c 	str.w	r8, [r4, #140]	; 0x8c
 8004f24:	e7c3      	b.n	8004eae <UART_RxISR_8BIT_FIFOEN+0xbe>
    rxdatacount = huart->RxXferCount;
 8004f26:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 8004f2a:	b29b      	uxth	r3, r3
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	f43f af6d 	beq.w	8004e0c <UART_RxISR_8BIT_FIFOEN+0x1c>
 8004f32:	f8b4 2068 	ldrh.w	r2, [r4, #104]	; 0x68
 8004f36:	429a      	cmp	r2, r3
 8004f38:	f67f af68 	bls.w	8004e0c <UART_RxISR_8BIT_FIFOEN+0x1c>
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8004f3c:	6823      	ldr	r3, [r4, #0]
      huart->RxISR = UART_RxISR_8BIT;
 8004f3e:	4907      	ldr	r1, [pc, #28]	; (8004f5c <UART_RxISR_8BIT_FIFOEN+0x16c>)
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8004f40:	689a      	ldr	r2, [r3, #8]
 8004f42:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8004f46:	609a      	str	r2, [r3, #8]
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8004f48:	681a      	ldr	r2, [r3, #0]
      huart->RxISR = UART_RxISR_8BIT;
 8004f4a:	6721      	str	r1, [r4, #112]	; 0x70
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8004f4c:	f042 0220 	orr.w	r2, r2, #32
 8004f50:	601a      	str	r2, [r3, #0]
 8004f52:	e75b      	b.n	8004e0c <UART_RxISR_8BIT_FIFOEN+0x1c>
    rxdatacount = huart->RxXferCount;
 8004f54:	f8b0 305e 	ldrh.w	r3, [r0, #94]	; 0x5e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8004f58:	e758      	b.n	8004e0c <UART_RxISR_8BIT_FIFOEN+0x1c>
 8004f5a:	bf00      	nop
 8004f5c:	08004cf9 	.word	0x08004cf9
 8004f60:	effffffe 	.word	0xeffffffe

08004f64 <UART_RxISR_16BIT_FIFOEN>:
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8004f64:	6802      	ldr	r2, [r0, #0]
{
 8004f66:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8004f6a:	69d1      	ldr	r1, [r2, #28]
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8004f6c:	6817      	ldr	r7, [r2, #0]
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8004f6e:	6896      	ldr	r6, [r2, #8]

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004f70:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
 8004f74:	2b22      	cmp	r3, #34	; 0x22
 8004f76:	d005      	beq.n	8004f84 <UART_RxISR_16BIT_FIFOEN+0x20>
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004f78:	6993      	ldr	r3, [r2, #24]
 8004f7a:	f043 0308 	orr.w	r3, r3, #8
 8004f7e:	6193      	str	r3, [r2, #24]
  }
}
 8004f80:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8004f84:	f8b0 3068 	ldrh.w	r3, [r0, #104]	; 0x68
 8004f88:	4604      	mov	r4, r0
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	f000 8099 	beq.w	80050c2 <UART_RxISR_16BIT_FIFOEN+0x15e>
 8004f90:	068b      	lsls	r3, r1, #26
 8004f92:	d57f      	bpl.n	8005094 <UART_RxISR_16BIT_FIFOEN+0x130>
  uint16_t  uhMask = huart->Mask;
 8004f94:	f8b0 5060 	ldrh.w	r5, [r0, #96]	; 0x60
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004f98:	f8df 9130 	ldr.w	r9, [pc, #304]	; 80050cc <UART_RxISR_16BIT_FIFOEN+0x168>
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004f9c:	f407 7780 	and.w	r7, r7, #256	; 0x100
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004fa0:	f006 0601 	and.w	r6, r6, #1
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004fa4:	f04f 0800 	mov.w	r8, #0
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004fa8:	f04f 0a04 	mov.w	sl, #4
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004fac:	6a53      	ldr	r3, [r2, #36]	; 0x24
      *tmp = (uint16_t)(uhdata & uhMask);
 8004fae:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8004fb0:	402b      	ands	r3, r5
 8004fb2:	f821 3b02 	strh.w	r3, [r1], #2
      huart->RxXferCount--;
 8004fb6:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
      huart->pRxBuffPtr += 2U;
 8004fba:	65a1      	str	r1, [r4, #88]	; 0x58
      huart->RxXferCount--;
 8004fbc:	3b01      	subs	r3, #1
 8004fbe:	b29b      	uxth	r3, r3
 8004fc0:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8004fc4:	f8d2 b01c 	ldr.w	fp, [r2, #28]
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8004fc8:	f01b 0f07 	tst.w	fp, #7
 8004fcc:	d026      	beq.n	800501c <UART_RxISR_16BIT_FIFOEN+0xb8>
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004fce:	f01b 0f01 	tst.w	fp, #1
 8004fd2:	d008      	beq.n	8004fe6 <UART_RxISR_16BIT_FIFOEN+0x82>
 8004fd4:	b13f      	cbz	r7, 8004fe6 <UART_RxISR_16BIT_FIFOEN+0x82>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004fd6:	2301      	movs	r3, #1
 8004fd8:	6213      	str	r3, [r2, #32]
          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004fda:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8004fde:	f043 0301 	orr.w	r3, r3, #1
 8004fe2:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004fe6:	f01b 0f02 	tst.w	fp, #2
 8004fea:	d035      	beq.n	8005058 <UART_RxISR_16BIT_FIFOEN+0xf4>
 8004fec:	b196      	cbz	r6, 8005014 <UART_RxISR_16BIT_FIFOEN+0xb0>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004fee:	2302      	movs	r3, #2
 8004ff0:	6213      	str	r3, [r2, #32]
          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004ff2:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004ff6:	f01b 0f04 	tst.w	fp, #4
          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004ffa:	f043 0304 	orr.w	r3, r3, #4
 8004ffe:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005002:	d007      	beq.n	8005014 <UART_RxISR_16BIT_FIFOEN+0xb0>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005004:	f8c2 a020 	str.w	sl, [r2, #32]
          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005008:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 800500c:	f043 0302 	orr.w	r3, r3, #2
 8005010:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005014:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8005018:	2b00      	cmp	r3, #0
 800501a:	d135      	bne.n	8005088 <UART_RxISR_16BIT_FIFOEN+0x124>
      if (huart->RxXferCount == 0U)
 800501c:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 8005020:	b29b      	uxth	r3, r3
 8005022:	b9a3      	cbnz	r3, 800504e <UART_RxISR_16BIT_FIFOEN+0xea>
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005024:	6822      	ldr	r2, [r4, #0]
 8005026:	6811      	ldr	r1, [r2, #0]
 8005028:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 800502c:	6011      	str	r1, [r2, #0]
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800502e:	6891      	ldr	r1, [r2, #8]
        huart->RxState = HAL_UART_STATE_READY;
 8005030:	2020      	movs	r0, #32
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005032:	ea01 0109 	and.w	r1, r1, r9
 8005036:	6091      	str	r1, [r2, #8]
        huart->RxState = HAL_UART_STATE_READY;
 8005038:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800503c:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
        huart->RxISR = NULL;
 800503e:	6723      	str	r3, [r4, #112]	; 0x70
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005040:	2901      	cmp	r1, #1
 8005042:	d017      	beq.n	8005074 <UART_RxISR_16BIT_FIFOEN+0x110>
          HAL_UART_RxCpltCallback(huart);
 8005044:	4620      	mov	r0, r4
 8005046:	f7fc fa2b 	bl	80014a0 <HAL_UART_RxCpltCallback>
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800504a:	f8c4 806c 	str.w	r8, [r4, #108]	; 0x6c
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800504e:	f01b 0f20 	tst.w	fp, #32
 8005052:	d01f      	beq.n	8005094 <UART_RxISR_16BIT_FIFOEN+0x130>
 8005054:	6822      	ldr	r2, [r4, #0]
 8005056:	e7a9      	b.n	8004fac <UART_RxISR_16BIT_FIFOEN+0x48>
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005058:	f01b 0f04 	tst.w	fp, #4
 800505c:	d0da      	beq.n	8005014 <UART_RxISR_16BIT_FIFOEN+0xb0>
 800505e:	2e00      	cmp	r6, #0
 8005060:	d0d8      	beq.n	8005014 <UART_RxISR_16BIT_FIFOEN+0xb0>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005062:	f8c2 a020 	str.w	sl, [r2, #32]
          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005066:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 800506a:	f043 0302 	orr.w	r3, r3, #2
 800506e:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
 8005072:	e7cf      	b.n	8005014 <UART_RxISR_16BIT_FIFOEN+0xb0>
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005074:	6813      	ldr	r3, [r2, #0]
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005076:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800507a:	f023 0310 	bic.w	r3, r3, #16
 800507e:	6013      	str	r3, [r2, #0]
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005080:	4620      	mov	r0, r4
 8005082:	f7ff fcd1 	bl	8004a28 <HAL_UARTEx_RxEventCallback>
 8005086:	e7e0      	b.n	800504a <UART_RxISR_16BIT_FIFOEN+0xe6>
          HAL_UART_ErrorCallback(huart);
 8005088:	4620      	mov	r0, r4
 800508a:	f7ff fcc1 	bl	8004a10 <HAL_UART_ErrorCallback>
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800508e:	f8c4 808c 	str.w	r8, [r4, #140]	; 0x8c
 8005092:	e7c3      	b.n	800501c <UART_RxISR_16BIT_FIFOEN+0xb8>
    rxdatacount = huart->RxXferCount;
 8005094:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 8005098:	b29b      	uxth	r3, r3
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800509a:	2b00      	cmp	r3, #0
 800509c:	f43f af70 	beq.w	8004f80 <UART_RxISR_16BIT_FIFOEN+0x1c>
 80050a0:	f8b4 2068 	ldrh.w	r2, [r4, #104]	; 0x68
 80050a4:	429a      	cmp	r2, r3
 80050a6:	f67f af6b 	bls.w	8004f80 <UART_RxISR_16BIT_FIFOEN+0x1c>
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80050aa:	6823      	ldr	r3, [r4, #0]
      huart->RxISR = UART_RxISR_16BIT;
 80050ac:	4906      	ldr	r1, [pc, #24]	; (80050c8 <UART_RxISR_16BIT_FIFOEN+0x164>)
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80050ae:	689a      	ldr	r2, [r3, #8]
 80050b0:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 80050b4:	609a      	str	r2, [r3, #8]
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80050b6:	681a      	ldr	r2, [r3, #0]
      huart->RxISR = UART_RxISR_16BIT;
 80050b8:	6721      	str	r1, [r4, #112]	; 0x70
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80050ba:	f042 0220 	orr.w	r2, r2, #32
 80050be:	601a      	str	r2, [r3, #0]
 80050c0:	e75e      	b.n	8004f80 <UART_RxISR_16BIT_FIFOEN+0x1c>
    rxdatacount = huart->RxXferCount;
 80050c2:	f8b0 305e 	ldrh.w	r3, [r0, #94]	; 0x5e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80050c6:	e75b      	b.n	8004f80 <UART_RxISR_16BIT_FIFOEN+0x1c>
 80050c8:	08004d79 	.word	0x08004d79
 80050cc:	effffffe 	.word	0xeffffffe

080050d0 <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80050d0:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80050d2:	07da      	lsls	r2, r3, #31
{
 80050d4:	b410      	push	{r4}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80050d6:	d506      	bpl.n	80050e6 <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80050d8:	6801      	ldr	r1, [r0, #0]
 80050da:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 80050dc:	684a      	ldr	r2, [r1, #4]
 80050de:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 80050e2:	4322      	orrs	r2, r4
 80050e4:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80050e6:	079c      	lsls	r4, r3, #30
 80050e8:	d506      	bpl.n	80050f8 <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80050ea:	6801      	ldr	r1, [r0, #0]
 80050ec:	6b04      	ldr	r4, [r0, #48]	; 0x30
 80050ee:	684a      	ldr	r2, [r1, #4]
 80050f0:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80050f4:	4322      	orrs	r2, r4
 80050f6:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80050f8:	0759      	lsls	r1, r3, #29
 80050fa:	d506      	bpl.n	800510a <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80050fc:	6801      	ldr	r1, [r0, #0]
 80050fe:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8005100:	684a      	ldr	r2, [r1, #4]
 8005102:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005106:	4322      	orrs	r2, r4
 8005108:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800510a:	071a      	lsls	r2, r3, #28
 800510c:	d506      	bpl.n	800511c <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800510e:	6801      	ldr	r1, [r0, #0]
 8005110:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8005112:	684a      	ldr	r2, [r1, #4]
 8005114:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005118:	4322      	orrs	r2, r4
 800511a:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800511c:	06dc      	lsls	r4, r3, #27
 800511e:	d506      	bpl.n	800512e <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005120:	6801      	ldr	r1, [r0, #0]
 8005122:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 8005124:	688a      	ldr	r2, [r1, #8]
 8005126:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800512a:	4322      	orrs	r2, r4
 800512c:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800512e:	0699      	lsls	r1, r3, #26
 8005130:	d506      	bpl.n	8005140 <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005132:	6801      	ldr	r1, [r0, #0]
 8005134:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8005136:	688a      	ldr	r2, [r1, #8]
 8005138:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800513c:	4322      	orrs	r2, r4
 800513e:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005140:	065a      	lsls	r2, r3, #25
 8005142:	d509      	bpl.n	8005158 <UART_AdvFeatureConfig+0x88>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005144:	6801      	ldr	r1, [r0, #0]
 8005146:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8005148:	684a      	ldr	r2, [r1, #4]
 800514a:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 800514e:	4322      	orrs	r2, r4
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005150:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005154:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005156:	d00b      	beq.n	8005170 <UART_AdvFeatureConfig+0xa0>
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005158:	061b      	lsls	r3, r3, #24
 800515a:	d506      	bpl.n	800516a <UART_AdvFeatureConfig+0x9a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800515c:	6802      	ldr	r2, [r0, #0]
 800515e:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 8005160:	6853      	ldr	r3, [r2, #4]
 8005162:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8005166:	430b      	orrs	r3, r1
 8005168:	6053      	str	r3, [r2, #4]
}
 800516a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800516e:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005170:	684a      	ldr	r2, [r1, #4]
 8005172:	6c84      	ldr	r4, [r0, #72]	; 0x48
 8005174:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 8005178:	4322      	orrs	r2, r4
 800517a:	604a      	str	r2, [r1, #4]
 800517c:	e7ec      	b.n	8005158 <UART_AdvFeatureConfig+0x88>
 800517e:	bf00      	nop

08005180 <UART_CheckIdleState>:
{
 8005180:	b538      	push	{r3, r4, r5, lr}
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005182:	2300      	movs	r3, #0
{
 8005184:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005186:	f8c0 308c 	str.w	r3, [r0, #140]	; 0x8c
  tickstart = HAL_GetTick();
 800518a:	f7fc fedd 	bl	8001f48 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800518e:	6823      	ldr	r3, [r4, #0]
 8005190:	681a      	ldr	r2, [r3, #0]
 8005192:	0711      	lsls	r1, r2, #28
  tickstart = HAL_GetTick();
 8005194:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005196:	d40d      	bmi.n	80051b4 <UART_CheckIdleState+0x34>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005198:	681a      	ldr	r2, [r3, #0]
 800519a:	0752      	lsls	r2, r2, #29
 800519c:	d431      	bmi.n	8005202 <UART_CheckIdleState+0x82>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800519e:	2300      	movs	r3, #0
  huart->gState = HAL_UART_STATE_READY;
 80051a0:	2220      	movs	r2, #32
  __HAL_UNLOCK(huart);
 80051a2:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
  huart->gState = HAL_UART_STATE_READY;
 80051a6:	f8c4 2084 	str.w	r2, [r4, #132]	; 0x84
  return HAL_OK;
 80051aa:	4618      	mov	r0, r3
  huart->RxState = HAL_UART_STATE_READY;
 80051ac:	f8c4 2088 	str.w	r2, [r4, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80051b0:	66e3      	str	r3, [r4, #108]	; 0x6c
}
 80051b2:	bd38      	pop	{r3, r4, r5, pc}
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80051b4:	69da      	ldr	r2, [r3, #28]
 80051b6:	0292      	lsls	r2, r2, #10
 80051b8:	d4ee      	bmi.n	8005198 <UART_CheckIdleState+0x18>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80051ba:	f7fc fec5 	bl	8001f48 <HAL_GetTick>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 80051be:	6823      	ldr	r3, [r4, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80051c0:	1b40      	subs	r0, r0, r5
 80051c2:	f1b0 7f00 	cmp.w	r0, #33554432	; 0x2000000
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 80051c6:	681a      	ldr	r2, [r3, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80051c8:	d22c      	bcs.n	8005224 <UART_CheckIdleState+0xa4>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80051ca:	0750      	lsls	r0, r2, #29
 80051cc:	d5f2      	bpl.n	80051b4 <UART_CheckIdleState+0x34>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80051ce:	69da      	ldr	r2, [r3, #28]
 80051d0:	0511      	lsls	r1, r2, #20
 80051d2:	d5ef      	bpl.n	80051b4 <UART_CheckIdleState+0x34>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80051d4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80051d8:	621a      	str	r2, [r3, #32]
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 80051da:	681a      	ldr	r2, [r3, #0]
 80051dc:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80051e0:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80051e2:	6899      	ldr	r1, [r3, #8]
          __HAL_UNLOCK(huart);
 80051e4:	2500      	movs	r5, #0
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80051e6:	f021 0101 	bic.w	r1, r1, #1
 80051ea:	6099      	str	r1, [r3, #8]
          huart->gState = HAL_UART_STATE_READY;
 80051ec:	2220      	movs	r2, #32
          __HAL_UNLOCK(huart);
 80051ee:	f884 5080 	strb.w	r5, [r4, #128]	; 0x80
          huart->gState = HAL_UART_STATE_READY;
 80051f2:	f8c4 2084 	str.w	r2, [r4, #132]	; 0x84
      return HAL_TIMEOUT;
 80051f6:	2003      	movs	r0, #3
          huart->RxState = HAL_UART_STATE_READY;
 80051f8:	f8c4 2088 	str.w	r2, [r4, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80051fc:	f8c4 208c 	str.w	r2, [r4, #140]	; 0x8c
}
 8005200:	bd38      	pop	{r3, r4, r5, pc}
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005202:	69db      	ldr	r3, [r3, #28]
 8005204:	0258      	lsls	r0, r3, #9
 8005206:	d4ca      	bmi.n	800519e <UART_CheckIdleState+0x1e>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005208:	f7fc fe9e 	bl	8001f48 <HAL_GetTick>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800520c:	6823      	ldr	r3, [r4, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800520e:	1b40      	subs	r0, r0, r5
 8005210:	f1b0 7f00 	cmp.w	r0, #33554432	; 0x2000000
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8005214:	681a      	ldr	r2, [r3, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005216:	d205      	bcs.n	8005224 <UART_CheckIdleState+0xa4>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005218:	0751      	lsls	r1, r2, #29
 800521a:	d5f2      	bpl.n	8005202 <UART_CheckIdleState+0x82>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800521c:	69da      	ldr	r2, [r3, #28]
 800521e:	0512      	lsls	r2, r2, #20
 8005220:	d5ef      	bpl.n	8005202 <UART_CheckIdleState+0x82>
 8005222:	e7d7      	b.n	80051d4 <UART_CheckIdleState+0x54>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8005224:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005228:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800522a:	689a      	ldr	r2, [r3, #8]
        __HAL_UNLOCK(huart);
 800522c:	2500      	movs	r5, #0
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800522e:	f022 0201 	bic.w	r2, r2, #1
 8005232:	609a      	str	r2, [r3, #8]
        huart->gState = HAL_UART_STATE_READY;
 8005234:	2120      	movs	r1, #32
        __HAL_UNLOCK(huart);
 8005236:	f884 5080 	strb.w	r5, [r4, #128]	; 0x80
        huart->gState = HAL_UART_STATE_READY;
 800523a:	f8c4 1084 	str.w	r1, [r4, #132]	; 0x84
      return HAL_TIMEOUT;
 800523e:	2003      	movs	r0, #3
        huart->RxState = HAL_UART_STATE_READY;
 8005240:	f8c4 1088 	str.w	r1, [r4, #136]	; 0x88
}
 8005244:	bd38      	pop	{r3, r4, r5, pc}
 8005246:	bf00      	nop

08005248 <HAL_UART_Init>:
  if (huart == NULL)
 8005248:	2800      	cmp	r0, #0
 800524a:	f000 81b5 	beq.w	80055b8 <HAL_UART_Init+0x370>
  if (huart->gState == HAL_UART_STATE_RESET)
 800524e:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
{
 8005252:	b570      	push	{r4, r5, r6, lr}
 8005254:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 8005256:	2b00      	cmp	r3, #0
 8005258:	d06c      	beq.n	8005334 <HAL_UART_Init+0xec>
  __HAL_UART_DISABLE(huart);
 800525a:	6823      	ldr	r3, [r4, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800525c:	6926      	ldr	r6, [r4, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800525e:	49c0      	ldr	r1, [pc, #768]	; (8005560 <HAL_UART_Init+0x318>)
  huart->gState = HAL_UART_STATE_BUSY;
 8005260:	2224      	movs	r2, #36	; 0x24
 8005262:	f8c4 2084 	str.w	r2, [r4, #132]	; 0x84
  __HAL_UART_DISABLE(huart);
 8005266:	6818      	ldr	r0, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005268:	68a2      	ldr	r2, [r4, #8]
  __HAL_UART_DISABLE(huart);
 800526a:	f020 0001 	bic.w	r0, r0, #1
 800526e:	6018      	str	r0, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005270:	6960      	ldr	r0, [r4, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005272:	681d      	ldr	r5, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005274:	4332      	orrs	r2, r6
 8005276:	4302      	orrs	r2, r0
 8005278:	69e0      	ldr	r0, [r4, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800527a:	4029      	ands	r1, r5
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800527c:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800527e:	430a      	orrs	r2, r1
 8005280:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005282:	685a      	ldr	r2, [r3, #4]
 8005284:	68e5      	ldr	r5, [r4, #12]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005286:	49b7      	ldr	r1, [pc, #732]	; (8005564 <HAL_UART_Init+0x31c>)
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005288:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 800528c:	432a      	orrs	r2, r5
 800528e:	605a      	str	r2, [r3, #4]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005290:	428b      	cmp	r3, r1
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005292:	69a2      	ldr	r2, [r4, #24]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005294:	6899      	ldr	r1, [r3, #8]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005296:	d052      	beq.n	800533e <HAL_UART_Init+0xf6>
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005298:	e9d4 6508 	ldrd	r6, r5, [r4, #32]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800529c:	f021 416e 	bic.w	r1, r1, #3992977408	; 0xee000000
 80052a0:	f421 6130 	bic.w	r1, r1, #2816	; 0xb00
    tmpreg |= huart->Init.OneBitSampling;
 80052a4:	4332      	orrs	r2, r6
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80052a6:	430a      	orrs	r2, r1
 80052a8:	609a      	str	r2, [r3, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80052aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 80052ac:	49ae      	ldr	r1, [pc, #696]	; (8005568 <HAL_UART_Init+0x320>)
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80052ae:	f022 020f 	bic.w	r2, r2, #15
 80052b2:	432a      	orrs	r2, r5
  UART_GETCLOCKSOURCE(huart, clocksource);
 80052b4:	428b      	cmp	r3, r1
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80052b6:	62da      	str	r2, [r3, #44]	; 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 80052b8:	d028      	beq.n	800530c <HAL_UART_Init+0xc4>
 80052ba:	4aac      	ldr	r2, [pc, #688]	; (800556c <HAL_UART_Init+0x324>)
 80052bc:	4293      	cmp	r3, r2
 80052be:	f000 8091 	beq.w	80053e4 <HAL_UART_Init+0x19c>
 80052c2:	4aab      	ldr	r2, [pc, #684]	; (8005570 <HAL_UART_Init+0x328>)
 80052c4:	4293      	cmp	r3, r2
 80052c6:	f000 8165 	beq.w	8005594 <HAL_UART_Init+0x34c>
 80052ca:	4aaa      	ldr	r2, [pc, #680]	; (8005574 <HAL_UART_Init+0x32c>)
 80052cc:	4293      	cmp	r3, r2
 80052ce:	f000 80e4 	beq.w	800549a <HAL_UART_Init+0x252>
 80052d2:	4aa9      	ldr	r2, [pc, #676]	; (8005578 <HAL_UART_Init+0x330>)
 80052d4:	4293      	cmp	r3, r2
 80052d6:	d111      	bne.n	80052fc <HAL_UART_Init+0xb4>
 80052d8:	4ba8      	ldr	r3, [pc, #672]	; (800557c <HAL_UART_Init+0x334>)
 80052da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052de:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80052e2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80052e6:	f000 817d 	beq.w	80055e4 <HAL_UART_Init+0x39c>
 80052ea:	f200 8101 	bhi.w	80054f0 <HAL_UART_Init+0x2a8>
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	f000 80e7 	beq.w	80054c2 <HAL_UART_Init+0x27a>
 80052f4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80052f8:	f000 80dd 	beq.w	80054b6 <HAL_UART_Init+0x26e>
  huart->NbRxDataToProcess = 1;
 80052fc:	f04f 1201 	mov.w	r2, #65537	; 0x10001
  huart->RxISR = NULL;
 8005300:	2300      	movs	r3, #0
  huart->TxISR = NULL;
 8005302:	e9c4 331c 	strd	r3, r3, [r4, #112]	; 0x70
  huart->NbRxDataToProcess = 1;
 8005306:	66a2      	str	r2, [r4, #104]	; 0x68
}
 8005308:	2001      	movs	r0, #1
 800530a:	bd70      	pop	{r4, r5, r6, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 800530c:	4b9b      	ldr	r3, [pc, #620]	; (800557c <HAL_UART_Init+0x334>)
 800530e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005312:	f003 0303 	and.w	r3, r3, #3
 8005316:	3b01      	subs	r3, #1
 8005318:	2b02      	cmp	r3, #2
 800531a:	f240 80d9 	bls.w	80054d0 <HAL_UART_Init+0x288>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800531e:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8005322:	f000 8151 	beq.w	80055c8 <HAL_UART_Init+0x380>
        pclk = HAL_RCC_GetPCLK2Freq();
 8005326:	f7fe fe15 	bl	8003f54 <HAL_RCC_GetPCLK2Freq>
    if (pclk != 0U)
 800532a:	2800      	cmp	r0, #0
 800532c:	f000 80d3 	beq.w	80054d6 <HAL_UART_Init+0x28e>
 8005330:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8005332:	e081      	b.n	8005438 <HAL_UART_Init+0x1f0>
    huart->Lock = HAL_UNLOCKED;
 8005334:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
    HAL_UART_MspInit(huart);
 8005338:	f7fc fcf2 	bl	8001d20 <HAL_UART_MspInit>
 800533c:	e78d      	b.n	800525a <HAL_UART_Init+0x12>
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800533e:	f021 416e 	bic.w	r1, r1, #3992977408	; 0xee000000
 8005342:	f421 6130 	bic.w	r1, r1, #2816	; 0xb00
 8005346:	430a      	orrs	r2, r1
 8005348:	609a      	str	r2, [r3, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800534a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800534c:	6a61      	ldr	r1, [r4, #36]	; 0x24
  UART_GETCLOCKSOURCE(huart, clocksource);
 800534e:	488b      	ldr	r0, [pc, #556]	; (800557c <HAL_UART_Init+0x334>)
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005350:	f022 020f 	bic.w	r2, r2, #15
 8005354:	430a      	orrs	r2, r1
 8005356:	62da      	str	r2, [r3, #44]	; 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005358:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
 800535c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005360:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005364:	f000 813c 	beq.w	80055e0 <HAL_UART_Init+0x398>
 8005368:	d80c      	bhi.n	8005384 <HAL_UART_Init+0x13c>
 800536a:	2b00      	cmp	r3, #0
 800536c:	f000 8132 	beq.w	80055d4 <HAL_UART_Init+0x38c>
 8005370:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005374:	d1c2      	bne.n	80052fc <HAL_UART_Init+0xb4>
        pclk = HAL_RCC_GetSysClockFreq();
 8005376:	f7fe fc8b 	bl	8003c90 <HAL_RCC_GetSysClockFreq>
    if (pclk != 0U)
 800537a:	2800      	cmp	r0, #0
 800537c:	f000 80ab 	beq.w	80054d6 <HAL_UART_Init+0x28e>
 8005380:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8005382:	e004      	b.n	800538e <HAL_UART_Init+0x146>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005384:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005388:	d1b8      	bne.n	80052fc <HAL_UART_Init+0xb4>
        pclk = (uint32_t) LSE_VALUE;
 800538a:	f44f 4000 	mov.w	r0, #32768	; 0x8000
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800538e:	6865      	ldr	r5, [r4, #4]
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005390:	4b7b      	ldr	r3, [pc, #492]	; (8005580 <HAL_UART_Init+0x338>)
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005392:	eb05 0645 	add.w	r6, r5, r5, lsl #1
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005396:	f833 2011 	ldrh.w	r2, [r3, r1, lsl #1]
 800539a:	fbb0 f3f2 	udiv	r3, r0, r2
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800539e:	42b3      	cmp	r3, r6
 80053a0:	d3ac      	bcc.n	80052fc <HAL_UART_Init+0xb4>
 80053a2:	ebb3 3f05 	cmp.w	r3, r5, lsl #12
 80053a6:	d8a9      	bhi.n	80052fc <HAL_UART_Init+0xb4>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80053a8:	2600      	movs	r6, #0
 80053aa:	2300      	movs	r3, #0
 80053ac:	4631      	mov	r1, r6
 80053ae:	f7fb fbd9 	bl	8000b64 <__aeabi_uldivmod>
 80053b2:	020b      	lsls	r3, r1, #8
 80053b4:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80053b8:	0202      	lsls	r2, r0, #8
 80053ba:	0868      	lsrs	r0, r5, #1
 80053bc:	1810      	adds	r0, r2, r0
 80053be:	f143 0100 	adc.w	r1, r3, #0
 80053c2:	462a      	mov	r2, r5
 80053c4:	4633      	mov	r3, r6
 80053c6:	f7fb fbcd 	bl	8000b64 <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80053ca:	4b6e      	ldr	r3, [pc, #440]	; (8005584 <HAL_UART_Init+0x33c>)
 80053cc:	f5a0 7240 	sub.w	r2, r0, #768	; 0x300
 80053d0:	429a      	cmp	r2, r3
 80053d2:	d893      	bhi.n	80052fc <HAL_UART_Init+0xb4>
          huart->Instance->BRR = usartdiv;
 80053d4:	6822      	ldr	r2, [r4, #0]
  huart->NbRxDataToProcess = 1;
 80053d6:	f04f 1301 	mov.w	r3, #65537	; 0x10001
          huart->Instance->BRR = usartdiv;
 80053da:	60d0      	str	r0, [r2, #12]
  huart->TxISR = NULL;
 80053dc:	e9c4 661c 	strd	r6, r6, [r4, #112]	; 0x70
  huart->NbRxDataToProcess = 1;
 80053e0:	66a3      	str	r3, [r4, #104]	; 0x68
  return ret;
 80053e2:	e043      	b.n	800546c <HAL_UART_Init+0x224>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80053e4:	4b65      	ldr	r3, [pc, #404]	; (800557c <HAL_UART_Init+0x334>)
 80053e6:	4a68      	ldr	r2, [pc, #416]	; (8005588 <HAL_UART_Init+0x340>)
 80053e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053ec:	f003 030c 	and.w	r3, r3, #12
 80053f0:	5cd3      	ldrb	r3, [r2, r3]
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80053f2:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 80053f6:	d07f      	beq.n	80054f8 <HAL_UART_Init+0x2b0>
    switch (clocksource)
 80053f8:	2b08      	cmp	r3, #8
 80053fa:	f63f af7f 	bhi.w	80052fc <HAL_UART_Init+0xb4>
 80053fe:	a201      	add	r2, pc, #4	; (adr r2, 8005404 <HAL_UART_Init+0x1bc>)
 8005400:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005404:	080054cb 	.word	0x080054cb
 8005408:	08005327 	.word	0x08005327
 800540c:	08005497 	.word	0x08005497
 8005410:	080052fd 	.word	0x080052fd
 8005414:	080054bd 	.word	0x080054bd
 8005418:	080052fd 	.word	0x080052fd
 800541c:	080052fd 	.word	0x080052fd
 8005420:	080052fd 	.word	0x080052fd
 8005424:	08005435 	.word	0x08005435
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005428:	2b30      	cmp	r3, #48	; 0x30
 800542a:	f47f af67 	bne.w	80052fc <HAL_UART_Init+0xb4>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800542e:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8005432:	d07a      	beq.n	800552a <HAL_UART_Init+0x2e2>
 8005434:	f44f 4000 	mov.w	r0, #32768	; 0x8000
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005438:	6862      	ldr	r2, [r4, #4]
 800543a:	4b51      	ldr	r3, [pc, #324]	; (8005580 <HAL_UART_Init+0x338>)
 800543c:	f833 3015 	ldrh.w	r3, [r3, r5, lsl #1]
 8005440:	fbb0 f3f3 	udiv	r3, r0, r3
 8005444:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 8005448:	fbb3 f3f2 	udiv	r3, r3, r2
 800544c:	b29b      	uxth	r3, r3
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800544e:	f1a3 0110 	sub.w	r1, r3, #16
 8005452:	f64f 72ef 	movw	r2, #65519	; 0xffef
 8005456:	4291      	cmp	r1, r2
 8005458:	f63f af50 	bhi.w	80052fc <HAL_UART_Init+0xb4>
        huart->Instance->BRR = usartdiv;
 800545c:	6820      	ldr	r0, [r4, #0]
 800545e:	60c3      	str	r3, [r0, #12]
  huart->RxISR = NULL;
 8005460:	2200      	movs	r2, #0
  huart->TxISR = NULL;
 8005462:	e9c4 221c 	strd	r2, r2, [r4, #112]	; 0x70
  huart->NbRxDataToProcess = 1;
 8005466:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800546a:	66a1      	str	r1, [r4, #104]	; 0x68
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800546c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800546e:	2b00      	cmp	r3, #0
 8005470:	d13a      	bne.n	80054e8 <HAL_UART_Init+0x2a0>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005472:	6823      	ldr	r3, [r4, #0]
 8005474:	685a      	ldr	r2, [r3, #4]
 8005476:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800547a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800547c:	689a      	ldr	r2, [r3, #8]
 800547e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005482:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8005484:	681a      	ldr	r2, [r3, #0]
 8005486:	f042 0201 	orr.w	r2, r2, #1
  return (UART_CheckIdleState(huart));
 800548a:	4620      	mov	r0, r4
  __HAL_UART_ENABLE(huart);
 800548c:	601a      	str	r2, [r3, #0]
}
 800548e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  return (UART_CheckIdleState(huart));
 8005492:	f7ff be75 	b.w	8005180 <UART_CheckIdleState>
        pclk = (uint32_t) HSI_VALUE;
 8005496:	483d      	ldr	r0, [pc, #244]	; (800558c <HAL_UART_Init+0x344>)
 8005498:	e7ce      	b.n	8005438 <HAL_UART_Init+0x1f0>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800549a:	4b38      	ldr	r3, [pc, #224]	; (800557c <HAL_UART_Init+0x334>)
 800549c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054a0:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80054a4:	2b80      	cmp	r3, #128	; 0x80
 80054a6:	f000 809d 	beq.w	80055e4 <HAL_UART_Init+0x39c>
 80054aa:	f200 8081 	bhi.w	80055b0 <HAL_UART_Init+0x368>
 80054ae:	b143      	cbz	r3, 80054c2 <HAL_UART_Init+0x27a>
 80054b0:	2b40      	cmp	r3, #64	; 0x40
 80054b2:	f47f af23 	bne.w	80052fc <HAL_UART_Init+0xb4>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80054b6:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 80054ba:	d07f      	beq.n	80055bc <HAL_UART_Init+0x374>
        pclk = HAL_RCC_GetSysClockFreq();
 80054bc:	f7fe fbe8 	bl	8003c90 <HAL_RCC_GetSysClockFreq>
        break;
 80054c0:	e733      	b.n	800532a <HAL_UART_Init+0xe2>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80054c2:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 80054c6:	f000 8082 	beq.w	80055ce <HAL_UART_Init+0x386>
        pclk = HAL_RCC_GetPCLK1Freq();
 80054ca:	f7fe fd31 	bl	8003f30 <HAL_RCC_GetPCLK1Freq>
        break;
 80054ce:	e72c      	b.n	800532a <HAL_UART_Init+0xe2>
 80054d0:	4a2f      	ldr	r2, [pc, #188]	; (8005590 <HAL_UART_Init+0x348>)
 80054d2:	5cd3      	ldrb	r3, [r2, r3]
  if (UART_INSTANCE_LOWPOWER(huart))
 80054d4:	e78d      	b.n	80053f2 <HAL_UART_Init+0x1aa>
  huart->RxISR = NULL;
 80054d6:	2300      	movs	r3, #0
  huart->TxISR = NULL;
 80054d8:	e9c4 331c 	strd	r3, r3, [r4, #112]	; 0x70
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80054dc:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  huart->NbRxDataToProcess = 1;
 80054de:	f04f 1201 	mov.w	r2, #65537	; 0x10001
 80054e2:	66a2      	str	r2, [r4, #104]	; 0x68
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d0c4      	beq.n	8005472 <HAL_UART_Init+0x22a>
    UART_AdvFeatureConfig(huart);
 80054e8:	4620      	mov	r0, r4
 80054ea:	f7ff fdf1 	bl	80050d0 <UART_AdvFeatureConfig>
 80054ee:	e7c0      	b.n	8005472 <HAL_UART_Init+0x22a>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80054f0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80054f4:	d09b      	beq.n	800542e <HAL_UART_Init+0x1e6>
 80054f6:	e701      	b.n	80052fc <HAL_UART_Init+0xb4>
    switch (clocksource)
 80054f8:	2b08      	cmp	r3, #8
 80054fa:	f63f aeff 	bhi.w	80052fc <HAL_UART_Init+0xb4>
 80054fe:	a201      	add	r2, pc, #4	; (adr r2, 8005504 <HAL_UART_Init+0x2bc>)
 8005500:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005504:	080055cf 	.word	0x080055cf
 8005508:	080055c9 	.word	0x080055c9
 800550c:	08005529 	.word	0x08005529
 8005510:	080052fd 	.word	0x080052fd
 8005514:	080055bd 	.word	0x080055bd
 8005518:	080052fd 	.word	0x080052fd
 800551c:	080052fd 	.word	0x080052fd
 8005520:	080052fd 	.word	0x080052fd
 8005524:	0800552b 	.word	0x0800552b
        pclk = (uint32_t) HSI_VALUE;
 8005528:	4818      	ldr	r0, [pc, #96]	; (800558c <HAL_UART_Init+0x344>)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800552a:	6862      	ldr	r2, [r4, #4]
 800552c:	4914      	ldr	r1, [pc, #80]	; (8005580 <HAL_UART_Init+0x338>)
 800552e:	0853      	lsrs	r3, r2, #1
 8005530:	f831 1015 	ldrh.w	r1, [r1, r5, lsl #1]
 8005534:	fbb0 f0f1 	udiv	r0, r0, r1
 8005538:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 800553c:	fbb0 f0f2 	udiv	r0, r0, r2
 8005540:	b282      	uxth	r2, r0
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005542:	f1a2 0110 	sub.w	r1, r2, #16
 8005546:	f64f 73ef 	movw	r3, #65519	; 0xffef
 800554a:	4299      	cmp	r1, r3
 800554c:	f63f aed6 	bhi.w	80052fc <HAL_UART_Init+0xb4>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005550:	f020 030f 	bic.w	r3, r0, #15
 8005554:	b29b      	uxth	r3, r3
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005556:	f3c2 0242 	ubfx	r2, r2, #1, #3
        huart->Instance->BRR = brrtemp;
 800555a:	6820      	ldr	r0, [r4, #0]
 800555c:	4313      	orrs	r3, r2
 800555e:	e77e      	b.n	800545e <HAL_UART_Init+0x216>
 8005560:	cfff69f3 	.word	0xcfff69f3
 8005564:	40008000 	.word	0x40008000
 8005568:	40013800 	.word	0x40013800
 800556c:	40004400 	.word	0x40004400
 8005570:	40004800 	.word	0x40004800
 8005574:	40004c00 	.word	0x40004c00
 8005578:	40005000 	.word	0x40005000
 800557c:	40021000 	.word	0x40021000
 8005580:	080058a0 	.word	0x080058a0
 8005584:	000ffcff 	.word	0x000ffcff
 8005588:	08005890 	.word	0x08005890
 800558c:	00f42400 	.word	0x00f42400
 8005590:	0800588c 	.word	0x0800588c
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005594:	4b16      	ldr	r3, [pc, #88]	; (80055f0 <HAL_UART_Init+0x3a8>)
 8005596:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800559a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800559e:	2b20      	cmp	r3, #32
 80055a0:	d020      	beq.n	80055e4 <HAL_UART_Init+0x39c>
 80055a2:	f63f af41 	bhi.w	8005428 <HAL_UART_Init+0x1e0>
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d08b      	beq.n	80054c2 <HAL_UART_Init+0x27a>
 80055aa:	2b10      	cmp	r3, #16
 80055ac:	d083      	beq.n	80054b6 <HAL_UART_Init+0x26e>
 80055ae:	e6a5      	b.n	80052fc <HAL_UART_Init+0xb4>
 80055b0:	2bc0      	cmp	r3, #192	; 0xc0
 80055b2:	f43f af3c 	beq.w	800542e <HAL_UART_Init+0x1e6>
 80055b6:	e6a1      	b.n	80052fc <HAL_UART_Init+0xb4>
}
 80055b8:	2001      	movs	r0, #1
 80055ba:	4770      	bx	lr
        pclk = HAL_RCC_GetSysClockFreq();
 80055bc:	f7fe fb68 	bl	8003c90 <HAL_RCC_GetSysClockFreq>
    if (pclk != 0U)
 80055c0:	2800      	cmp	r0, #0
 80055c2:	d088      	beq.n	80054d6 <HAL_UART_Init+0x28e>
 80055c4:	6a65      	ldr	r5, [r4, #36]	; 0x24
 80055c6:	e7b0      	b.n	800552a <HAL_UART_Init+0x2e2>
        pclk = HAL_RCC_GetPCLK2Freq();
 80055c8:	f7fe fcc4 	bl	8003f54 <HAL_RCC_GetPCLK2Freq>
        break;
 80055cc:	e7f8      	b.n	80055c0 <HAL_UART_Init+0x378>
        pclk = HAL_RCC_GetPCLK1Freq();
 80055ce:	f7fe fcaf 	bl	8003f30 <HAL_RCC_GetPCLK1Freq>
        break;
 80055d2:	e7f5      	b.n	80055c0 <HAL_UART_Init+0x378>
        pclk = HAL_RCC_GetPCLK1Freq();
 80055d4:	f7fe fcac 	bl	8003f30 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 80055d8:	2800      	cmp	r0, #0
 80055da:	f43f af7c 	beq.w	80054d6 <HAL_UART_Init+0x28e>
 80055de:	e6cf      	b.n	8005380 <HAL_UART_Init+0x138>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80055e0:	4804      	ldr	r0, [pc, #16]	; (80055f4 <HAL_UART_Init+0x3ac>)
 80055e2:	e6d4      	b.n	800538e <HAL_UART_Init+0x146>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80055e4:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
        pclk = (uint32_t) HSI_VALUE;
 80055e8:	4802      	ldr	r0, [pc, #8]	; (80055f4 <HAL_UART_Init+0x3ac>)
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80055ea:	f47f af25 	bne.w	8005438 <HAL_UART_Init+0x1f0>
 80055ee:	e79c      	b.n	800552a <HAL_UART_Init+0x2e2>
 80055f0:	40021000 	.word	0x40021000
 80055f4:	00f42400 	.word	0x00f42400

080055f8 <HAL_UARTEx_WakeupCallback>:
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80055f8:	4770      	bx	lr
 80055fa:	bf00      	nop

080055fc <HAL_UARTEx_RxFifoFullCallback>:
 80055fc:	4770      	bx	lr
 80055fe:	bf00      	nop

08005600 <HAL_UARTEx_TxFifoEmptyCallback>:
 8005600:	4770      	bx	lr
 8005602:	bf00      	nop

08005604 <HAL_UARTEx_DisableFifoMode>:

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005604:	f890 2080 	ldrb.w	r2, [r0, #128]	; 0x80
 8005608:	2a01      	cmp	r2, #1
 800560a:	d017      	beq.n	800563c <HAL_UARTEx_DisableFifoMode+0x38>

  huart->gState = HAL_UART_STATE_BUSY;

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800560c:	6802      	ldr	r2, [r0, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 800560e:	2124      	movs	r1, #36	; 0x24
{
 8005610:	b430      	push	{r4, r5}
  huart->gState = HAL_UART_STATE_BUSY;
 8005612:	f8c0 1084 	str.w	r1, [r0, #132]	; 0x84
 8005616:	4603      	mov	r3, r0
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005618:	6810      	ldr	r0, [r2, #0]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800561a:	6814      	ldr	r4, [r2, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800561c:	2100      	movs	r1, #0
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800561e:	f020 5000 	bic.w	r0, r0, #536870912	; 0x20000000
  __HAL_UART_DISABLE(huart);
 8005622:	f024 0401 	bic.w	r4, r4, #1
 8005626:	6014      	str	r4, [r2, #0]

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);

  huart->gState = HAL_UART_STATE_READY;
 8005628:	2520      	movs	r5, #32
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800562a:	6659      	str	r1, [r3, #100]	; 0x64
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800562c:	6010      	str	r0, [r2, #0]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800562e:	f883 1080 	strb.w	r1, [r3, #128]	; 0x80

  return HAL_OK;
 8005632:	4608      	mov	r0, r1
  huart->gState = HAL_UART_STATE_READY;
 8005634:	f8c3 5084 	str.w	r5, [r3, #132]	; 0x84
}
 8005638:	bc30      	pop	{r4, r5}
 800563a:	4770      	bx	lr
  __HAL_LOCK(huart);
 800563c:	2002      	movs	r0, #2
}
 800563e:	4770      	bx	lr

08005640 <HAL_UARTEx_SetTxFifoThreshold>:
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005640:	f890 2080 	ldrb.w	r2, [r0, #128]	; 0x80
 8005644:	2a01      	cmp	r2, #1
 8005646:	d033      	beq.n	80056b0 <HAL_UARTEx_SetTxFifoThreshold+0x70>

  huart->gState = HAL_UART_STATE_BUSY;
 8005648:	4603      	mov	r3, r0
 800564a:	2024      	movs	r0, #36	; 0x24

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800564c:	681a      	ldr	r2, [r3, #0]
{
 800564e:	b4f0      	push	{r4, r5, r6, r7}
  huart->gState = HAL_UART_STATE_BUSY;
 8005650:	f8c3 0084 	str.w	r0, [r3, #132]	; 0x84
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005654:	6814      	ldr	r4, [r2, #0]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005656:	6810      	ldr	r0, [r2, #0]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005658:	6e5d      	ldr	r5, [r3, #100]	; 0x64
  __HAL_UART_DISABLE(huart);
 800565a:	f020 0001 	bic.w	r0, r0, #1
 800565e:	6010      	str	r0, [r2, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005660:	6890      	ldr	r0, [r2, #8]
 8005662:	f020 4060 	bic.w	r0, r0, #3758096384	; 0xe0000000
 8005666:	4301      	orrs	r1, r0
 8005668:	6091      	str	r1, [r2, #8]
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800566a:	b1f5      	cbz	r5, 80056aa <HAL_UARTEx_SetTxFifoThreshold+0x6a>
  }
  else
  {
    rx_fifo_depth = RX_FIFO_DEPTH;
    tx_fifo_depth = TX_FIFO_DEPTH;
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800566c:	6896      	ldr	r6, [r2, #8]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800566e:	6895      	ldr	r5, [r2, #8]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005670:	4810      	ldr	r0, [pc, #64]	; (80056b4 <HAL_UARTEx_SetTxFifoThreshold+0x74>)
                               (uint16_t)denominator[tx_fifo_threshold];
 8005672:	4f11      	ldr	r7, [pc, #68]	; (80056b8 <HAL_UARTEx_SetTxFifoThreshold+0x78>)
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005674:	f3c6 6642 	ubfx	r6, r6, #25, #3
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005678:	0f6d      	lsrs	r5, r5, #29
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800567a:	5d81      	ldrb	r1, [r0, r6]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800567c:	5d40      	ldrb	r0, [r0, r5]
                               (uint16_t)denominator[rx_fifo_threshold];
 800567e:	5dbe      	ldrb	r6, [r7, r6]
                               (uint16_t)denominator[tx_fifo_threshold];
 8005680:	5d7d      	ldrb	r5, [r7, r5]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005682:	00c9      	lsls	r1, r1, #3
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005684:	00c0      	lsls	r0, r0, #3
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005686:	fbb1 f1f6 	udiv	r1, r1, r6
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800568a:	fbb0 f0f5 	udiv	r0, r0, r5
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800568e:	f8a3 1068 	strh.w	r1, [r3, #104]	; 0x68
  __HAL_UNLOCK(huart);
 8005692:	2100      	movs	r1, #0
  huart->gState = HAL_UART_STATE_READY;
 8005694:	2520      	movs	r5, #32
 8005696:	f8a3 006a 	strh.w	r0, [r3, #106]	; 0x6a
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800569a:	6014      	str	r4, [r2, #0]
  __HAL_UNLOCK(huart);
 800569c:	f883 1080 	strb.w	r1, [r3, #128]	; 0x80
  return HAL_OK;
 80056a0:	4608      	mov	r0, r1
  huart->gState = HAL_UART_STATE_READY;
 80056a2:	f8c3 5084 	str.w	r5, [r3, #132]	; 0x84
}
 80056a6:	bcf0      	pop	{r4, r5, r6, r7}
 80056a8:	4770      	bx	lr
    huart->NbRxDataToProcess = 1U;
 80056aa:	2101      	movs	r1, #1
    huart->NbTxDataToProcess = 1U;
 80056ac:	4608      	mov	r0, r1
 80056ae:	e7ee      	b.n	800568e <HAL_UARTEx_SetTxFifoThreshold+0x4e>
  __HAL_LOCK(huart);
 80056b0:	2002      	movs	r0, #2
}
 80056b2:	4770      	bx	lr
 80056b4:	080058c0 	.word	0x080058c0
 80056b8:	080058b8 	.word	0x080058b8

080056bc <HAL_UARTEx_SetRxFifoThreshold>:
  __HAL_LOCK(huart);
 80056bc:	f890 2080 	ldrb.w	r2, [r0, #128]	; 0x80
 80056c0:	2a01      	cmp	r2, #1
 80056c2:	d033      	beq.n	800572c <HAL_UARTEx_SetRxFifoThreshold+0x70>
  huart->gState = HAL_UART_STATE_BUSY;
 80056c4:	4603      	mov	r3, r0
 80056c6:	2024      	movs	r0, #36	; 0x24
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80056c8:	681a      	ldr	r2, [r3, #0]
{
 80056ca:	b4f0      	push	{r4, r5, r6, r7}
  huart->gState = HAL_UART_STATE_BUSY;
 80056cc:	f8c3 0084 	str.w	r0, [r3, #132]	; 0x84
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80056d0:	6814      	ldr	r4, [r2, #0]
  __HAL_UART_DISABLE(huart);
 80056d2:	6810      	ldr	r0, [r2, #0]
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80056d4:	6e5d      	ldr	r5, [r3, #100]	; 0x64
  __HAL_UART_DISABLE(huart);
 80056d6:	f020 0001 	bic.w	r0, r0, #1
 80056da:	6010      	str	r0, [r2, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80056dc:	6890      	ldr	r0, [r2, #8]
 80056de:	f020 6060 	bic.w	r0, r0, #234881024	; 0xe000000
 80056e2:	4301      	orrs	r1, r0
 80056e4:	6091      	str	r1, [r2, #8]
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80056e6:	b1f5      	cbz	r5, 8005726 <HAL_UARTEx_SetRxFifoThreshold+0x6a>
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80056e8:	6896      	ldr	r6, [r2, #8]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80056ea:	6895      	ldr	r5, [r2, #8]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80056ec:	4810      	ldr	r0, [pc, #64]	; (8005730 <HAL_UARTEx_SetRxFifoThreshold+0x74>)
                               (uint16_t)denominator[tx_fifo_threshold];
 80056ee:	4f11      	ldr	r7, [pc, #68]	; (8005734 <HAL_UARTEx_SetRxFifoThreshold+0x78>)
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80056f0:	f3c6 6642 	ubfx	r6, r6, #25, #3
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80056f4:	0f6d      	lsrs	r5, r5, #29
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80056f6:	5d81      	ldrb	r1, [r0, r6]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80056f8:	5d40      	ldrb	r0, [r0, r5]
                               (uint16_t)denominator[rx_fifo_threshold];
 80056fa:	5dbe      	ldrb	r6, [r7, r6]
                               (uint16_t)denominator[tx_fifo_threshold];
 80056fc:	5d7d      	ldrb	r5, [r7, r5]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80056fe:	00c9      	lsls	r1, r1, #3
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005700:	00c0      	lsls	r0, r0, #3
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005702:	fbb1 f1f6 	udiv	r1, r1, r6
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005706:	fbb0 f0f5 	udiv	r0, r0, r5
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800570a:	f8a3 1068 	strh.w	r1, [r3, #104]	; 0x68
  __HAL_UNLOCK(huart);
 800570e:	2100      	movs	r1, #0
  huart->gState = HAL_UART_STATE_READY;
 8005710:	2520      	movs	r5, #32
 8005712:	f8a3 006a 	strh.w	r0, [r3, #106]	; 0x6a
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005716:	6014      	str	r4, [r2, #0]
  __HAL_UNLOCK(huart);
 8005718:	f883 1080 	strb.w	r1, [r3, #128]	; 0x80
  return HAL_OK;
 800571c:	4608      	mov	r0, r1
  huart->gState = HAL_UART_STATE_READY;
 800571e:	f8c3 5084 	str.w	r5, [r3, #132]	; 0x84
}
 8005722:	bcf0      	pop	{r4, r5, r6, r7}
 8005724:	4770      	bx	lr
    huart->NbRxDataToProcess = 1U;
 8005726:	2101      	movs	r1, #1
    huart->NbTxDataToProcess = 1U;
 8005728:	4608      	mov	r0, r1
 800572a:	e7ee      	b.n	800570a <HAL_UARTEx_SetRxFifoThreshold+0x4e>
  __HAL_LOCK(huart);
 800572c:	2002      	movs	r0, #2
}
 800572e:	4770      	bx	lr
 8005730:	080058c0 	.word	0x080058c0
 8005734:	080058b8 	.word	0x080058b8

08005738 <__libc_init_array>:
 8005738:	b570      	push	{r4, r5, r6, lr}
 800573a:	4d0d      	ldr	r5, [pc, #52]	; (8005770 <__libc_init_array+0x38>)
 800573c:	4c0d      	ldr	r4, [pc, #52]	; (8005774 <__libc_init_array+0x3c>)
 800573e:	1b64      	subs	r4, r4, r5
 8005740:	10a4      	asrs	r4, r4, #2
 8005742:	2600      	movs	r6, #0
 8005744:	42a6      	cmp	r6, r4
 8005746:	d109      	bne.n	800575c <__libc_init_array+0x24>
 8005748:	4d0b      	ldr	r5, [pc, #44]	; (8005778 <__libc_init_array+0x40>)
 800574a:	4c0c      	ldr	r4, [pc, #48]	; (800577c <__libc_init_array+0x44>)
 800574c:	f000 f820 	bl	8005790 <_init>
 8005750:	1b64      	subs	r4, r4, r5
 8005752:	10a4      	asrs	r4, r4, #2
 8005754:	2600      	movs	r6, #0
 8005756:	42a6      	cmp	r6, r4
 8005758:	d105      	bne.n	8005766 <__libc_init_array+0x2e>
 800575a:	bd70      	pop	{r4, r5, r6, pc}
 800575c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005760:	4798      	blx	r3
 8005762:	3601      	adds	r6, #1
 8005764:	e7ee      	b.n	8005744 <__libc_init_array+0xc>
 8005766:	f855 3b04 	ldr.w	r3, [r5], #4
 800576a:	4798      	blx	r3
 800576c:	3601      	adds	r6, #1
 800576e:	e7f2      	b.n	8005756 <__libc_init_array+0x1e>
 8005770:	080058d0 	.word	0x080058d0
 8005774:	080058d0 	.word	0x080058d0
 8005778:	080058d0 	.word	0x080058d0
 800577c:	080058d4 	.word	0x080058d4

08005780 <memset>:
 8005780:	4402      	add	r2, r0
 8005782:	4603      	mov	r3, r0
 8005784:	4293      	cmp	r3, r2
 8005786:	d100      	bne.n	800578a <memset+0xa>
 8005788:	4770      	bx	lr
 800578a:	f803 1b01 	strb.w	r1, [r3], #1
 800578e:	e7f9      	b.n	8005784 <memset+0x4>

08005790 <_init>:
 8005790:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005792:	bf00      	nop
 8005794:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005796:	bc08      	pop	{r3}
 8005798:	469e      	mov	lr, r3
 800579a:	4770      	bx	lr

0800579c <_fini>:
 800579c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800579e:	bf00      	nop
 80057a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80057a2:	bc08      	pop	{r3}
 80057a4:	469e      	mov	lr, r3
 80057a6:	4770      	bx	lr
